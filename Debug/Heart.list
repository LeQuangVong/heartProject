
Heart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007134  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bec  08007248  08007248  00017248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e34  08007e34  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007e34  08007e34  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e34  08007e34  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e34  08007e34  00017e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  200001e0  0800801c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  0800801c  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0a4  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f7a  00000000  00000000  0002d2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002f228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002fc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001892a  00000000  00000000  00030590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c876  00000000  00000000  00048eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086664  00000000  00000000  00055730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbd94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b90  00000000  00000000  000dbde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800722c 	.word	0x0800722c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800722c 	.word	0x0800722c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f000 fff1 	bl	800201c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f863 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 f901 	bl	8001244 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001042:	f000 f89b 	bl	800117c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001046:	f000 f8c7 	bl	80011d8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800104a:	f000 fbfc 	bl	8001846 <SSD1306_Init>
  MAX30100_Init(&max30100, &hi2c1);
 800104e:	4925      	ldr	r1, [pc, #148]	; (80010e4 <main+0xb4>)
 8001050:	4825      	ldr	r0, [pc, #148]	; (80010e8 <main+0xb8>)
 8001052:	f000 fad9 	bl	8001608 <MAX30100_Init>
  SSD1306_Fill(Black);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 fdfc 	bl	8001c54 <SSD1306_Fill>
  //SSD1306_WriteString("SSD1306 OK", Font_7x10, White);
  SSD1306_UpdateScreen();
 800105c:	f000 fd02 	bl	8001a64 <SSD1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(fifo_full_flag)
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <main+0xbc>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <main+0x44>
	  {
		  fifo_full_flag = 0;
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <main+0xbc>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
	      MAX30100_Read_FIFO(&max30100); // Đọc FIFO
 800106e:	481e      	ldr	r0, [pc, #120]	; (80010e8 <main+0xb8>)
 8001070:	f000 fb1d 	bl	80016ae <MAX30100_Read_FIFO>
	  }

	  if(data_ready_flag)
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <main+0xc0>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <main+0x56>
	  {
	      data_ready_flag = 0;
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <main+0xc0>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
	      process(); // Xử lý dữ liệu (lọc, tính toán, hiển thị)
 8001082:	f000 f933 	bl	80012ec <process>
	  }

	  if (error_flag)
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <main+0xc4>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0e8      	beq.n	8001060 <main+0x30>
	  {
		  SSD1306_SetCursor(0, 0);
 800108e:	2100      	movs	r1, #0
 8001090:	2000      	movs	r0, #0
 8001092:	f000 fdc7 	bl	8001c24 <SSD1306_SetCursor>
		  SSD1306_WriteString("Error detected", Font_7x10, White);
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <main+0xc8>)
 8001098:	2201      	movs	r2, #1
 800109a:	9200      	str	r2, [sp, #0]
 800109c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800109e:	4817      	ldr	r0, [pc, #92]	; (80010fc <main+0xcc>)
 80010a0:	f000 fd9a 	bl	8001bd8 <SSD1306_WriteString>
		  SSD1306_UpdateScreen();
 80010a4:	f000 fcde 	bl	8001a64 <SSD1306_UpdateScreen>
		  HAL_Delay(1000);
 80010a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ac:	f001 f818 	bl	80020e0 <HAL_Delay>
		  MAX30100_Init(&max30100, &hi2c1);
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <main+0xb4>)
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <main+0xb8>)
 80010b4:	f000 faa8 	bl	8001608 <MAX30100_Init>
		  error_flag = 0;
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <main+0xc4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
		  SSD1306_SetCursor(0, 20);
 80010be:	2114      	movs	r1, #20
 80010c0:	2000      	movs	r0, #0
 80010c2:	f000 fdaf 	bl	8001c24 <SSD1306_SetCursor>
		  SSD1306_WriteString("Restarting...", Font_7x10, White);
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <main+0xc8>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ce:	480c      	ldr	r0, [pc, #48]	; (8001100 <main+0xd0>)
 80010d0:	f000 fd82 	bl	8001bd8 <SSD1306_WriteString>
		  SSD1306_UpdateScreen();
 80010d4:	f000 fcc6 	bl	8001a64 <SSD1306_UpdateScreen>
		  HAL_Delay(2000); // Khởi động lại cảm biến
 80010d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010dc:	f001 f800 	bl	80020e0 <HAL_Delay>
	  if(fifo_full_flag)
 80010e0:	e7be      	b.n	8001060 <main+0x30>
 80010e2:	bf00      	nop
 80010e4:	20000648 	.word	0x20000648
 80010e8:	2000063c 	.word	0x2000063c
 80010ec:	20000224 	.word	0x20000224
 80010f0:	20000225 	.word	0x20000225
 80010f4:	20000226 	.word	0x20000226
 80010f8:	08007a1c 	.word	0x08007a1c
 80010fc:	08007248 	.word	0x08007248
 8001100:	08007258 	.word	0x08007258

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b090      	sub	sp, #64	; 0x40
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	2228      	movs	r2, #40	; 0x28
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f003 f9d6 	bl	80044c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112a:	2301      	movs	r3, #1
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112e:	2310      	movs	r3, #16
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001132:	2300      	movs	r3, #0
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001136:	f107 0318 	add.w	r3, r7, #24
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fb1c 	bl	8003778 <HAL_RCC_OscConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001146:	f000 fa59 	bl	80015fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114a:	230f      	movs	r3, #15
 800114c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fd88 	bl	8003c78 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800116e:	f000 fa45 	bl	80015fc <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3740      	adds	r7, #64	; 0x40
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_I2C1_Init+0x50>)
 8001182:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <MX_I2C1_Init+0x54>)
 8001184:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_I2C1_Init+0x50>)
 8001188:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <MX_I2C1_Init+0x58>)
 800118a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_I2C1_Init+0x50>)
 800119a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_I2C1_Init+0x50>)
 80011ba:	f001 fa77 	bl	80026ac <HAL_I2C_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c4:	f000 fa1a 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000648 	.word	0x20000648
 80011d0:	40005400 	.word	0x40005400
 80011d4:	000186a0 	.word	0x000186a0

080011d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI1_Init+0x64>)
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_SPI1_Init+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_SPI1_Init+0x64>)
 80011e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_SPI1_Init+0x64>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI1_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI1_Init+0x64>)
 8001224:	220a      	movs	r2, #10
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_SPI1_Init+0x64>)
 800122a:	f002 fe9f 	bl	8003f6c <HAL_SPI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001234:	f000 f9e2 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200006a0 	.word	0x200006a0
 8001240:	40013000 	.word	0x40013000

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_GPIO_Init+0x9c>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a20      	ldr	r2, [pc, #128]	; (80012e0 <MX_GPIO_Init+0x9c>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <MX_GPIO_Init+0x9c>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_GPIO_Init+0x9c>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <MX_GPIO_Init+0x9c>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_GPIO_Init+0x9c>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|DC_Pin|RES_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2158      	movs	r1, #88	; 0x58
 800128c:	4815      	ldr	r0, [pc, #84]	; (80012e4 <MX_GPIO_Init+0xa0>)
 800128e:	f001 f9dd 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001292:	2302      	movs	r3, #2
 8001294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_GPIO_Init+0xa4>)
 8001298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129a:	2301      	movs	r3, #1
 800129c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	4619      	mov	r1, r3
 80012a4:	480f      	ldr	r0, [pc, #60]	; (80012e4 <MX_GPIO_Init+0xa0>)
 80012a6:	f001 f84d 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin RES_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RES_Pin;
 80012aa:	2358      	movs	r3, #88	; 0x58
 80012ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2302      	movs	r3, #2
 80012b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	4619      	mov	r1, r3
 80012c0:	4808      	ldr	r0, [pc, #32]	; (80012e4 <MX_GPIO_Init+0xa0>)
 80012c2:	f001 f83f 	bl	8002344 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2007      	movs	r0, #7
 80012cc:	f001 f803 	bl	80022d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80012d0:	2007      	movs	r0, #7
 80012d2:	f001 f81c 	bl	800230e <HAL_NVIC_EnableIRQ>

}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010800 	.word	0x40010800
 80012e8:	10210000 	.word	0x10210000

080012ec <process>:

/* USER CODE BEGIN 4 */
void process()
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af02      	add	r7, sp, #8
	if(int_status & (1 << 5))
 80012f2:	4b87      	ldr	r3, [pc, #540]	; (8001510 <process+0x224>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	f003 0320 	and.w	r3, r3, #32
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d039      	beq.n	8001372 <process+0x86>
	{
		ir_filtered = low_pass_filter(max30100.ir, ir_filtered, 0.9);
 80012fe:	4b85      	ldr	r3, [pc, #532]	; (8001514 <process+0x228>)
 8001300:	889b      	ldrh	r3, [r3, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fc76 	bl	8000bf4 <__aeabi_ui2f>
 8001308:	4b83      	ldr	r3, [pc, #524]	; (8001518 <process+0x22c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a83      	ldr	r2, [pc, #524]	; (800151c <process+0x230>)
 800130e:	4619      	mov	r1, r3
 8001310:	f000 f9f8 	bl	8001704 <low_pass_filter>
 8001314:	4603      	mov	r3, r0
 8001316:	4a80      	ldr	r2, [pc, #512]	; (8001518 <process+0x22c>)
 8001318:	6013      	str	r3, [r2, #0]
		peak_count = detect_peak(&ir_filtered, length);
 800131a:	4b81      	ldr	r3, [pc, #516]	; (8001520 <process+0x234>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	487d      	ldr	r0, [pc, #500]	; (8001518 <process+0x22c>)
 8001322:	f000 fa0f 	bl	8001744 <detect_peak>
 8001326:	4603      	mov	r3, r0
 8001328:	4a7e      	ldr	r2, [pc, #504]	; (8001524 <process+0x238>)
 800132a:	6013      	str	r3, [r2, #0]
		peak_interval = 1.0f / sample_rate;
 800132c:	2364      	movs	r3, #100	; 0x64
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fc64 	bl	8000bfc <__aeabi_i2f>
 8001334:	4603      	mov	r3, r0
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800133c:	f7ff fd66 	bl	8000e0c <__aeabi_fdiv>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b78      	ldr	r3, [pc, #480]	; (8001528 <process+0x23c>)
 8001346:	601a      	str	r2, [r3, #0]
		heart_rate = (60.0f / (peak_interval * peak_count));
 8001348:	4b76      	ldr	r3, [pc, #472]	; (8001524 <process+0x238>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fc55 	bl	8000bfc <__aeabi_i2f>
 8001352:	4602      	mov	r2, r0
 8001354:	4b74      	ldr	r3, [pc, #464]	; (8001528 <process+0x23c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	4610      	mov	r0, r2
 800135c:	f7ff fca2 	bl	8000ca4 <__aeabi_fmul>
 8001360:	4603      	mov	r3, r0
 8001362:	4619      	mov	r1, r3
 8001364:	4871      	ldr	r0, [pc, #452]	; (800152c <process+0x240>)
 8001366:	f7ff fd51 	bl	8000e0c <__aeabi_fdiv>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	4b70      	ldr	r3, [pc, #448]	; (8001530 <process+0x244>)
 8001370:	601a      	str	r2, [r3, #0]
	}

	if(int_status & (1 << 4))
 8001372:	4b67      	ldr	r3, [pc, #412]	; (8001510 <process+0x224>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2b00      	cmp	r3, #0
 800137c:	d042      	beq.n	8001404 <process+0x118>
	{
		red_filtered = low_pass_filter(max30100.red, red_filtered, 0.9);
 800137e:	4b65      	ldr	r3, [pc, #404]	; (8001514 <process+0x228>)
 8001380:	88db      	ldrh	r3, [r3, #6]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fc36 	bl	8000bf4 <__aeabi_ui2f>
 8001388:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <process+0x248>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a63      	ldr	r2, [pc, #396]	; (800151c <process+0x230>)
 800138e:	4619      	mov	r1, r3
 8001390:	f000 f9b8 	bl	8001704 <low_pass_filter>
 8001394:	4603      	mov	r3, r0
 8001396:	4a67      	ldr	r2, [pc, #412]	; (8001534 <process+0x248>)
 8001398:	6013      	str	r3, [r2, #0]

		dc_ir = ir_filtered;
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <process+0x22c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a66      	ldr	r2, [pc, #408]	; (8001538 <process+0x24c>)
 80013a0:	6013      	str	r3, [r2, #0]
		dc_red = red_filtered;
 80013a2:	4b64      	ldr	r3, [pc, #400]	; (8001534 <process+0x248>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a65      	ldr	r2, [pc, #404]	; (800153c <process+0x250>)
 80013a8:	6013      	str	r3, [r2, #0]

		ac_ir = max30100.ir - dc_ir;
 80013aa:	4b5a      	ldr	r3, [pc, #360]	; (8001514 <process+0x228>)
 80013ac:	889b      	ldrh	r3, [r3, #4]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fc24 	bl	8000bfc <__aeabi_i2f>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b60      	ldr	r3, [pc, #384]	; (8001538 <process+0x24c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	4610      	mov	r0, r2
 80013be:	f7ff fb67 	bl	8000a90 <__aeabi_fsub>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <process+0x254>)
 80013c8:	601a      	str	r2, [r3, #0]
		ac_red = max30100.red - dc_red;
 80013ca:	4b52      	ldr	r3, [pc, #328]	; (8001514 <process+0x228>)
 80013cc:	88db      	ldrh	r3, [r3, #6]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fc14 	bl	8000bfc <__aeabi_i2f>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b59      	ldr	r3, [pc, #356]	; (800153c <process+0x250>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4619      	mov	r1, r3
 80013dc:	4610      	mov	r0, r2
 80013de:	f7ff fb57 	bl	8000a90 <__aeabi_fsub>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b57      	ldr	r3, [pc, #348]	; (8001544 <process+0x258>)
 80013e8:	601a      	str	r2, [r3, #0]
		spo2 = calculate_spo2(ac_red, dc_red, ac_ir, dc_ir);
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <process+0x258>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	4b53      	ldr	r3, [pc, #332]	; (800153c <process+0x250>)
 80013f0:	6819      	ldr	r1, [r3, #0]
 80013f2:	4b53      	ldr	r3, [pc, #332]	; (8001540 <process+0x254>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b50      	ldr	r3, [pc, #320]	; (8001538 <process+0x24c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f000 f9e1 	bl	80017c0 <calculate_spo2>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a51      	ldr	r2, [pc, #324]	; (8001548 <process+0x25c>)
 8001402:	6013      	str	r3, [r2, #0]
	}

	if (heart_rate < 40.0f || heart_rate > 180.0f)
 8001404:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <process+0x244>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4950      	ldr	r1, [pc, #320]	; (800154c <process+0x260>)
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fde8 	bl	8000fe0 <__aeabi_fcmplt>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d108      	bne.n	8001428 <process+0x13c>
 8001416:	4b46      	ldr	r3, [pc, #280]	; (8001530 <process+0x244>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	494d      	ldr	r1, [pc, #308]	; (8001550 <process+0x264>)
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fdfd 	bl	800101c <__aeabi_fcmpgt>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00c      	beq.n	8001442 <process+0x156>
	{
		SSD1306_SetCursor(0, 20);
 8001428:	2114      	movs	r1, #20
 800142a:	2000      	movs	r0, #0
 800142c:	f000 fbfa 	bl	8001c24 <SSD1306_SetCursor>
	    SSD1306_WriteString("HR Error", Font_7x10, White);
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <process+0x268>)
 8001432:	2201      	movs	r2, #1
 8001434:	9200      	str	r2, [sp, #0]
 8001436:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001438:	4847      	ldr	r0, [pc, #284]	; (8001558 <process+0x26c>)
 800143a:	f000 fbcd 	bl	8001bd8 <SSD1306_WriteString>
	    SSD1306_UpdateScreen();  // Cập nhật màn hình
 800143e:	f000 fb11 	bl	8001a64 <SSD1306_UpdateScreen>
	}

	if (spo2 < 85.0f || spo2 > 100.0f)
 8001442:	4b41      	ldr	r3, [pc, #260]	; (8001548 <process+0x25c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4945      	ldr	r1, [pc, #276]	; (800155c <process+0x270>)
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fdc9 	bl	8000fe0 <__aeabi_fcmplt>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d108      	bne.n	8001466 <process+0x17a>
 8001454:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <process+0x25c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4941      	ldr	r1, [pc, #260]	; (8001560 <process+0x274>)
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fdde 	bl	800101c <__aeabi_fcmpgt>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00c      	beq.n	8001480 <process+0x194>
	{
		SSD1306_SetCursor(0, 40);
 8001466:	2128      	movs	r1, #40	; 0x28
 8001468:	2000      	movs	r0, #0
 800146a:	f000 fbdb 	bl	8001c24 <SSD1306_SetCursor>
	    SSD1306_WriteString("SpO2 Error", Font_7x10, White);
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <process+0x268>)
 8001470:	2201      	movs	r2, #1
 8001472:	9200      	str	r2, [sp, #0]
 8001474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001476:	483b      	ldr	r0, [pc, #236]	; (8001564 <process+0x278>)
 8001478:	f000 fbae 	bl	8001bd8 <SSD1306_WriteString>
	    SSD1306_UpdateScreen();  // Cập nhật màn hình
 800147c:	f000 faf2 	bl	8001a64 <SSD1306_UpdateScreen>
	}

	char buffer[32];

    SSD1306_SetCursor(0, 0);
 8001480:	2100      	movs	r1, #0
 8001482:	2000      	movs	r0, #0
 8001484:	f000 fbce 	bl	8001c24 <SSD1306_SetCursor>
    SSD1306_WriteString("MAX30100 Data", Font_7x10, White);
 8001488:	4b32      	ldr	r3, [pc, #200]	; (8001554 <process+0x268>)
 800148a:	2201      	movs	r2, #1
 800148c:	9200      	str	r2, [sp, #0]
 800148e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001490:	4835      	ldr	r0, [pc, #212]	; (8001568 <process+0x27c>)
 8001492:	f000 fba1 	bl	8001bd8 <SSD1306_WriteString>

    snprintf(buffer, sizeof(buffer), "HR: %.1f bpm", heart_rate);
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <process+0x244>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ffc4 	bl	8000428 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4638      	mov	r0, r7
 80014a6:	e9cd 2300 	strd	r2, r3, [sp]
 80014aa:	4a30      	ldr	r2, [pc, #192]	; (800156c <process+0x280>)
 80014ac:	2120      	movs	r1, #32
 80014ae:	f003 fc71 	bl	8004d94 <sniprintf>
    SSD1306_SetCursor(0, 20);
 80014b2:	2114      	movs	r1, #20
 80014b4:	2000      	movs	r0, #0
 80014b6:	f000 fbb5 	bl	8001c24 <SSD1306_SetCursor>
    SSD1306_WriteString(buffer, Font_7x10, White);
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <process+0x268>)
 80014bc:	4638      	mov	r0, r7
 80014be:	2201      	movs	r2, #1
 80014c0:	9200      	str	r2, [sp, #0]
 80014c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c4:	f000 fb88 	bl	8001bd8 <SSD1306_WriteString>

    snprintf(buffer, sizeof(buffer), "SpO2: %.1f %%", spo2);
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <process+0x25c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ffab 	bl	8000428 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4638      	mov	r0, r7
 80014d8:	e9cd 2300 	strd	r2, r3, [sp]
 80014dc:	4a24      	ldr	r2, [pc, #144]	; (8001570 <process+0x284>)
 80014de:	2120      	movs	r1, #32
 80014e0:	f003 fc58 	bl	8004d94 <sniprintf>
    SSD1306_SetCursor(0, 40);
 80014e4:	2128      	movs	r1, #40	; 0x28
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 fb9c 	bl	8001c24 <SSD1306_SetCursor>
    SSD1306_WriteString(buffer, Font_7x10, White);
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <process+0x268>)
 80014ee:	4638      	mov	r0, r7
 80014f0:	2201      	movs	r2, #1
 80014f2:	9200      	str	r2, [sp, #0]
 80014f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f6:	f000 fb6f 	bl	8001bd8 <SSD1306_WriteString>

    SSD1306_UpdateScreen();  // Cập nhật màn hình
 80014fa:	f000 fab3 	bl	8001a64 <SSD1306_UpdateScreen>
    HAL_Delay(1000);
 80014fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001502:	f000 fded 	bl	80020e0 <HAL_Delay>
}
 8001506:	bf00      	nop
 8001508:	3720      	adds	r7, #32
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000069c 	.word	0x2000069c
 8001514:	2000063c 	.word	0x2000063c
 8001518:	200001fc 	.word	0x200001fc
 800151c:	3f666666 	.word	0x3f666666
 8001520:	20000000 	.word	0x20000000
 8001524:	2000021c 	.word	0x2000021c
 8001528:	20000220 	.word	0x20000220
 800152c:	42700000 	.word	0x42700000
 8001530:	20000218 	.word	0x20000218
 8001534:	20000200 	.word	0x20000200
 8001538:	20000208 	.word	0x20000208
 800153c:	20000204 	.word	0x20000204
 8001540:	20000210 	.word	0x20000210
 8001544:	2000020c 	.word	0x2000020c
 8001548:	20000214 	.word	0x20000214
 800154c:	42200000 	.word	0x42200000
 8001550:	43340000 	.word	0x43340000
 8001554:	08007a1c 	.word	0x08007a1c
 8001558:	08007268 	.word	0x08007268
 800155c:	42aa0000 	.word	0x42aa0000
 8001560:	42c80000 	.word	0x42c80000
 8001564:	08007274 	.word	0x08007274
 8001568:	08007280 	.word	0x08007280
 800156c:	08007290 	.word	0x08007290
 8001570:	080072a0 	.word	0x080072a0

08001574 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af04      	add	r7, sp, #16
 800157a:	4603      	mov	r3, r0
 800157c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d12d      	bne.n	80015e0 <HAL_GPIO_EXTI_Callback+0x6c>
	{
		if (HAL_I2C_Mem_Read(&hi2c1, MAX30100_ADDR, MAX30100_IT_STATUS, I2C_MEMADD_SIZE_8BIT, &int_status, 1, HAL_MAX_DELAY) != HAL_OK)
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	9302      	str	r3, [sp, #8]
 800158a:	2301      	movs	r3, #1
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2301      	movs	r3, #1
 8001594:	2200      	movs	r2, #0
 8001596:	21ae      	movs	r1, #174	; 0xae
 8001598:	4814      	ldr	r0, [pc, #80]	; (80015ec <HAL_GPIO_EXTI_Callback+0x78>)
 800159a:	f001 fac5 	bl	8002b28 <HAL_I2C_Mem_Read>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_EXTI_Callback+0x38>
		{
			// Xử lý lỗi nếu không đọc được
			error_flag = 1;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
			return;
 80015aa:	e019      	b.n	80015e0 <HAL_GPIO_EXTI_Callback+0x6c>
		}

		if (int_status & (1 << 7)) // FIFO Full
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x74>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da02      	bge.n	80015bc <HAL_GPIO_EXTI_Callback+0x48>
		{
			fifo_full_flag = 1;
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x80>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
		}

		// Kiểm tra dữ liệu sẵn sàng
		if (int_status & (1 << 5)) // Data Ready
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x74>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	f003 0320 	and.w	r3, r3, #32
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <HAL_GPIO_EXTI_Callback+0x5a>
		{
			data_ready_flag = 1;
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_GPIO_EXTI_Callback+0x84>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
		}

		if(int_status & (1 << 6))
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x74>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <HAL_GPIO_EXTI_Callback+0x6c>
		{
			error_flag = 1;
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000069c 	.word	0x2000069c
 80015ec:	20000648 	.word	0x20000648
 80015f0:	20000226 	.word	0x20000226
 80015f4:	20000224 	.word	0x20000224
 80015f8:	20000225 	.word	0x20000225

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <MAX30100_Init>:
#include "my_MAX30100.h"

void MAX30100_Init(MAX30100_Handle_t *pMAX30100, I2C_HandleTypeDef *hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af04      	add	r7, sp, #16
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	pMAX30100->hi2c = hi2c;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	601a      	str	r2, [r3, #0]

	MAX30100_Reset(pMAX30100);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f8fb 	bl	8001814 <MAX30100_Reset>

	uint8_t data;

	data = 0x03;
 800161e:	2303      	movs	r3, #3
 8001620:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(pMAX30100->hi2c, MAX30100_ADDR, MAX30100_MODE_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	2301      	movs	r3, #1
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	f107 030f 	add.w	r3, r7, #15
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2301      	movs	r3, #1
 8001638:	2206      	movs	r2, #6
 800163a:	21ae      	movs	r1, #174	; 0xae
 800163c:	f001 f97a 	bl	8002934 <HAL_I2C_Mem_Write>

	data = 0x27;
 8001640:	2327      	movs	r3, #39	; 0x27
 8001642:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(pMAX30100->hi2c, MAX30100_ADDR, MAX30100_SPO2_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	2301      	movs	r3, #1
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	f107 030f 	add.w	r3, r7, #15
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	2207      	movs	r2, #7
 800165c:	21ae      	movs	r1, #174	; 0xae
 800165e:	f001 f969 	bl	8002934 <HAL_I2C_Mem_Write>

	data = 0x24;
 8001662:	2324      	movs	r3, #36	; 0x24
 8001664:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(pMAX30100->hi2c, MAX30100_ADDR, MAX30100_LED_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	9302      	str	r3, [sp, #8]
 8001670:	2301      	movs	r3, #1
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	f107 030f 	add.w	r3, r7, #15
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	2209      	movs	r2, #9
 800167e:	21ae      	movs	r1, #174	; 0xae
 8001680:	f001 f958 	bl	8002934 <HAL_I2C_Mem_Write>

	//uint8_t int_enable = (1 << 5) | (1 << 4);
	uint8_t int_enable = 0xF0;
 8001684:	23f0      	movs	r3, #240	; 0xf0
 8001686:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(pMAX30100->hi2c, MAX30100_ADDR, MAX30100_IT_ENABLE, I2C_MEMADD_SIZE_8BIT, &int_enable, 1, HAL_MAX_DELAY);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	9302      	str	r3, [sp, #8]
 8001692:	2301      	movs	r3, #1
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	f107 030e 	add.w	r3, r7, #14
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2301      	movs	r3, #1
 800169e:	2201      	movs	r2, #1
 80016a0:	21ae      	movs	r1, #174	; 0xae
 80016a2:	f001 f947 	bl	8002934 <HAL_I2C_Mem_Write>
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <MAX30100_Read_FIFO>:

void MAX30100_Read_FIFO(MAX30100_Handle_t *pMAX30100)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b088      	sub	sp, #32
 80016b2:	af04      	add	r7, sp, #16
 80016b4:	6078      	str	r0, [r7, #4]
	uint8_t data[4];

	HAL_I2C_Mem_Read(pMAX30100->hi2c, MAX30100_ADDR, MAX30100_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, data, 4, HAL_MAX_DELAY);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	2304      	movs	r3, #4
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2301      	movs	r3, #1
 80016cc:	2205      	movs	r2, #5
 80016ce:	21ae      	movs	r1, #174	; 0xae
 80016d0:	f001 fa2a 	bl	8002b28 <HAL_I2C_Mem_Read>

	pMAX30100->ir = (data[0] << 8) | data[1];
 80016d4:	7b3b      	ldrb	r3, [r7, #12]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b21a      	sxth	r2, r3
 80016da:	7b7b      	ldrb	r3, [r7, #13]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	4313      	orrs	r3, r2
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	809a      	strh	r2, [r3, #4]
	pMAX30100->red = (data[2] << 8) | data[3];
 80016e8:	7bbb      	ldrb	r3, [r7, #14]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	80da      	strh	r2, [r3, #6]
}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <low_pass_filter>:

float low_pass_filter(float input, float previous_output, float alpha)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
	return alpha * input + (1 - alpha) * previous_output;
 8001710:	68f9      	ldr	r1, [r7, #12]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fac6 	bl	8000ca4 <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	461c      	mov	r4, r3
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001722:	f7ff f9b5 	bl	8000a90 <__aeabi_fsub>
 8001726:	4603      	mov	r3, r0
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff faba 	bl	8000ca4 <__aeabi_fmul>
 8001730:	4603      	mov	r3, r0
 8001732:	4619      	mov	r1, r3
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff f9ad 	bl	8000a94 <__addsf3>
 800173a:	4603      	mov	r3, r0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}

08001744 <detect_peak>:

int detect_peak(float *data, int lenght)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	int peak_count = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
	for(int i = 1; i < lenght - 1; i++)
 8001752:	2301      	movs	r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	e029      	b.n	80017ac <detect_peak+0x68>
	{
		if(data[i] > data[i-1] && data[i] > data[i+1])
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001768:	3b01      	subs	r3, #1
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff fc52 	bl	800101c <__aeabi_fcmpgt>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d013      	beq.n	80017a6 <detect_peak+0x62>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3301      	adds	r3, #1
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff fc41 	bl	800101c <__aeabi_fcmpgt>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <detect_peak+0x62>
		{
			peak_count++;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3301      	adds	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
	for(int i = 1; i < lenght - 1; i++)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3301      	adds	r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbd0      	blt.n	8001758 <detect_peak+0x14>
		}
	}
	return peak_count;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <calculate_spo2>:

float calculate_spo2(float ac_red, float dc_red, float ac_ir, float dc_ir)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
	float ratio = (ac_red/dc_red) / (ac_ir/dc_ir);
 80017ce:	68b9      	ldr	r1, [r7, #8]
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f7ff fb1b 	bl	8000e0c <__aeabi_fdiv>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461c      	mov	r4, r3
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fb15 	bl	8000e0c <__aeabi_fdiv>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4619      	mov	r1, r3
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7ff fb10 	bl	8000e0c <__aeabi_fdiv>
 80017ec:	4603      	mov	r3, r0
 80017ee:	617b      	str	r3, [r7, #20]
	return 110 - 25*ratio;
 80017f0:	4906      	ldr	r1, [pc, #24]	; (800180c <calculate_spo2+0x4c>)
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff fa56 	bl	8000ca4 <__aeabi_fmul>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4619      	mov	r1, r3
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <calculate_spo2+0x50>)
 80017fe:	f7ff f947 	bl	8000a90 <__aeabi_fsub>
 8001802:	4603      	mov	r3, r0
}
 8001804:	4618      	mov	r0, r3
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	41c80000 	.word	0x41c80000
 8001810:	42dc0000 	.word	0x42dc0000

08001814 <MAX30100_Reset>:

void MAX30100_Reset(MAX30100_Handle_t *pMAX30100)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af04      	add	r7, sp, #16
 800181a:	6078      	str	r0, [r7, #4]
    uint8_t reset_command = 0x40; // Giá trị reset trong thanh ghi MODE_CONFIG
 800181c:	2340      	movs	r3, #64	; 0x40
 800181e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(pMAX30100->hi2c, MAX30100_ADDR, MAX30100_MODE_CONFIG, I2C_MEMADD_SIZE_8BIT, &reset_command, 1, HAL_MAX_DELAY);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
 8001828:	9302      	str	r3, [sp, #8]
 800182a:	2301      	movs	r3, #1
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	f107 030f 	add.w	r3, r7, #15
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2301      	movs	r3, #1
 8001836:	2206      	movs	r2, #6
 8001838:	21ae      	movs	r1, #174	; 0xae
 800183a:	f001 f87b 	bl	8002934 <HAL_I2C_Mem_Write>
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <SSD1306_Init>:
static SSD1306_t SSD1306;

static uint8_t SSD1306_Buffer[SSD1306_BUFFER_SIZE];

// Hàm khởi tạo SSD1306
void SSD1306_Init(void) {
 8001846:	b580      	push	{r7, lr}
 8001848:	af00      	add	r7, sp, #0
    // Reset màn hình
	SSD1306_Reset();
 800184a:	f000 f8a7 	bl	800199c <SSD1306_Reset>

	HAL_Delay(100);
 800184e:	2064      	movs	r0, #100	; 0x64
 8001850:	f000 fc46 	bl	80020e0 <HAL_Delay>

    // Cấu hình các lệnh khởi tạo của SSD1306
    SSD1306_WriteCommand(0xAE); // Tắt màn hình
 8001854:	20ae      	movs	r0, #174	; 0xae
 8001856:	f000 f8bd 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xD5); // Set display clock divide ratio/oscillator frequency
 800185a:	20d5      	movs	r0, #213	; 0xd5
 800185c:	f000 f8ba 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x80); // Suggested ratio 0x80
 8001860:	2080      	movs	r0, #128	; 0x80
 8001862:	f000 f8b7 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA8); // Set multiplex ratio(1 to 64)
 8001866:	20a8      	movs	r0, #168	; 0xa8
 8001868:	f000 f8b4 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x3F); // 1/64 duty
 800186c:	203f      	movs	r0, #63	; 0x3f
 800186e:	f000 f8b1 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xD3); // Set display offset
 8001872:	20d3      	movs	r0, #211	; 0xd3
 8001874:	f000 f8ae 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x00); // No offset
 8001878:	2000      	movs	r0, #0
 800187a:	f000 f8ab 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x40 | 0x0); // Set start line address
 800187e:	2040      	movs	r0, #64	; 0x40
 8001880:	f000 f8a8 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x8D); // Enable charge pump regulator
 8001884:	208d      	movs	r0, #141	; 0x8d
 8001886:	f000 f8a5 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x14);
 800188a:	2014      	movs	r0, #20
 800188c:	f000 f8a2 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x20); // Set memory addressing mode
 8001890:	2020      	movs	r0, #32
 8001892:	f000 f89f 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x00); // Horizontal addressing mode
 8001896:	2000      	movs	r0, #0
 8001898:	f000 f89c 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA1); // Set segment re-map 0 to 127
 800189c:	20a1      	movs	r0, #161	; 0xa1
 800189e:	f000 f899 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xC8); // Set COM output scan direction, remapped mode
 80018a2:	20c8      	movs	r0, #200	; 0xc8
 80018a4:	f000 f896 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xDA); // Set COM pins hardware configuration
 80018a8:	20da      	movs	r0, #218	; 0xda
 80018aa:	f000 f893 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x12);
 80018ae:	2012      	movs	r0, #18
 80018b0:	f000 f890 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x81); // Set contrast control
 80018b4:	2081      	movs	r0, #129	; 0x81
 80018b6:	f000 f88d 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x7F);
 80018ba:	207f      	movs	r0, #127	; 0x7f
 80018bc:	f000 f88a 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xD9); // Set pre-charge period
 80018c0:	20d9      	movs	r0, #217	; 0xd9
 80018c2:	f000 f887 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xF1);
 80018c6:	20f1      	movs	r0, #241	; 0xf1
 80018c8:	f000 f884 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xDB); // Set VCOMH deselect level
 80018cc:	20db      	movs	r0, #219	; 0xdb
 80018ce:	f000 f881 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x40);
 80018d2:	2040      	movs	r0, #64	; 0x40
 80018d4:	f000 f87e 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA4); // Output follows RAM content
 80018d8:	20a4      	movs	r0, #164	; 0xa4
 80018da:	f000 f87b 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA6); // Set normal display
 80018de:	20a6      	movs	r0, #166	; 0xa6
 80018e0:	f000 f878 	bl	80019d4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xAF); // Bật màn hình
 80018e4:	20af      	movs	r0, #175	; 0xaf
 80018e6:	f000 f875 	bl	80019d4 <SSD1306_WriteCommand>

    SSD1306_Fill(Black);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f000 f9b2 	bl	8001c54 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80018f0:	f000 f8b8 	bl	8001a64 <SSD1306_UpdateScreen>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <SSD1306_DrawPixel>:

// Vẽ một điểm ảnh
void SSD1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
 8001902:	460b      	mov	r3, r1
 8001904:	71bb      	strb	r3, [r7, #6]
 8001906:	4613      	mov	r3, r2
 8001908:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db3d      	blt.n	800198e <SSD1306_DrawPixel+0x96>
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	2b3f      	cmp	r3, #63	; 0x3f
 8001916:	d83a      	bhi.n	800198e <SSD1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8001918:	797b      	ldrb	r3, [r7, #5]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d11a      	bne.n	8001954 <SSD1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800191e:	79fa      	ldrb	r2, [r7, #7]
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	08db      	lsrs	r3, r3, #3
 8001924:	b2d8      	uxtb	r0, r3
 8001926:	4603      	mov	r3, r0
 8001928:	01db      	lsls	r3, r3, #7
 800192a:	4413      	add	r3, r2
 800192c:	4a1a      	ldr	r2, [pc, #104]	; (8001998 <SSD1306_DrawPixel+0xa0>)
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	b25a      	sxtb	r2, r3
 8001932:	79bb      	ldrb	r3, [r7, #6]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	b25b      	sxtb	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b259      	sxtb	r1, r3
 8001944:	79fa      	ldrb	r2, [r7, #7]
 8001946:	4603      	mov	r3, r0
 8001948:	01db      	lsls	r3, r3, #7
 800194a:	4413      	add	r3, r2
 800194c:	b2c9      	uxtb	r1, r1
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <SSD1306_DrawPixel+0xa0>)
 8001950:	54d1      	strb	r1, [r2, r3]
 8001952:	e01d      	b.n	8001990 <SSD1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001954:	79fa      	ldrb	r2, [r7, #7]
 8001956:	79bb      	ldrb	r3, [r7, #6]
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	b2d8      	uxtb	r0, r3
 800195c:	4603      	mov	r3, r0
 800195e:	01db      	lsls	r3, r3, #7
 8001960:	4413      	add	r3, r2
 8001962:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <SSD1306_DrawPixel+0xa0>)
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	b25a      	sxtb	r2, r3
 8001968:	79bb      	ldrb	r3, [r7, #6]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	b25b      	sxtb	r3, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	b25b      	sxtb	r3, r3
 800197a:	4013      	ands	r3, r2
 800197c:	b259      	sxtb	r1, r3
 800197e:	79fa      	ldrb	r2, [r7, #7]
 8001980:	4603      	mov	r3, r0
 8001982:	01db      	lsls	r3, r3, #7
 8001984:	4413      	add	r3, r2
 8001986:	b2c9      	uxtb	r1, r1
 8001988:	4a03      	ldr	r2, [pc, #12]	; (8001998 <SSD1306_DrawPixel+0xa0>)
 800198a:	54d1      	strb	r1, [r2, r3]
 800198c:	e000      	b.n	8001990 <SSD1306_DrawPixel+0x98>
        return;
 800198e:	bf00      	nop
    }
}
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	20000230 	.word	0x20000230

0800199c <SSD1306_Reset>:

void SSD1306_Reset(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	2108      	movs	r1, #8
 80019a4:	480a      	ldr	r0, [pc, #40]	; (80019d0 <SSD1306_Reset+0x34>)
 80019a6:	f000 fe51 	bl	800264c <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_RESET_GPIO, SSD1306_RESET_PIN, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2140      	movs	r1, #64	; 0x40
 80019ae:	4808      	ldr	r0, [pc, #32]	; (80019d0 <SSD1306_Reset+0x34>)
 80019b0:	f000 fe4c 	bl	800264c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80019b4:	200a      	movs	r0, #10
 80019b6:	f000 fb93 	bl	80020e0 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_RESET_GPIO, SSD1306_RESET_PIN, GPIO_PIN_SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	2140      	movs	r1, #64	; 0x40
 80019be:	4804      	ldr	r0, [pc, #16]	; (80019d0 <SSD1306_Reset+0x34>)
 80019c0:	f000 fe44 	bl	800264c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80019c4:	200a      	movs	r0, #10
 80019c6:	f000 fb8b 	bl	80020e0 <HAL_Delay>
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40010800 	.word	0x40010800

080019d4 <SSD1306_WriteCommand>:

// Send a byte to the command register
void SSD1306_WriteCommand(uint8_t byte) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_RESET); // select OLED
 80019de:	2200      	movs	r2, #0
 80019e0:	2108      	movs	r1, #8
 80019e2:	480c      	ldr	r0, [pc, #48]	; (8001a14 <SSD1306_WriteCommand+0x40>)
 80019e4:	f000 fe32 	bl	800264c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_RESET); // command
 80019e8:	2200      	movs	r2, #0
 80019ea:	2110      	movs	r1, #16
 80019ec:	4809      	ldr	r0, [pc, #36]	; (8001a14 <SSD1306_WriteCommand+0x40>)
 80019ee:	f000 fe2d 	bl	800264c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80019f2:	1df9      	adds	r1, r7, #7
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	2201      	movs	r2, #1
 80019fa:	4807      	ldr	r0, [pc, #28]	; (8001a18 <SSD1306_WriteCommand+0x44>)
 80019fc:	f002 fb3a 	bl	8004074 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_SET); // un-select OLED
 8001a00:	2201      	movs	r2, #1
 8001a02:	2108      	movs	r1, #8
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <SSD1306_WriteCommand+0x40>)
 8001a06:	f000 fe21 	bl	800264c <HAL_GPIO_WritePin>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40010800 	.word	0x40010800
 8001a18:	200006a0 	.word	0x200006a0

08001a1c <SSD1306_WriteData>:

// Send data
void SSD1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_RESET); // select OLED
 8001a26:	2200      	movs	r2, #0
 8001a28:	2108      	movs	r1, #8
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <SSD1306_WriteData+0x40>)
 8001a2c:	f000 fe0e 	bl	800264c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_SET); // data
 8001a30:	2201      	movs	r2, #1
 8001a32:	2110      	movs	r1, #16
 8001a34:	4809      	ldr	r0, [pc, #36]	; (8001a5c <SSD1306_WriteData+0x40>)
 8001a36:	f000 fe09 	bl	800264c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4806      	ldr	r0, [pc, #24]	; (8001a60 <SSD1306_WriteData+0x44>)
 8001a46:	f002 fb15 	bl	8004074 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_SET); // un-select OLED
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2108      	movs	r1, #8
 8001a4e:	4803      	ldr	r0, [pc, #12]	; (8001a5c <SSD1306_WriteData+0x40>)
 8001a50:	f000 fdfc 	bl	800264c <HAL_GPIO_WritePin>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40010800 	.word	0x40010800
 8001a60:	200006a0 	.word	0x200006a0

08001a64 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	e016      	b.n	8001a9e <SSD1306_UpdateScreen+0x3a>
        SSD1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	3b50      	subs	r3, #80	; 0x50
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ffac 	bl	80019d4 <SSD1306_WriteCommand>
        SSD1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff ffa9 	bl	80019d4 <SSD1306_WriteCommand>
        SSD1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a82:	2010      	movs	r0, #16
 8001a84:	f7ff ffa6 	bl	80019d4 <SSD1306_WriteCommand>
        SSD1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	01db      	lsls	r3, r3, #7
 8001a8c:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <SSD1306_UpdateScreen+0x4c>)
 8001a8e:	4413      	add	r3, r2
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ffc2 	bl	8001a1c <SSD1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	71fb      	strb	r3, [r7, #7]
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b07      	cmp	r3, #7
 8001aa2:	d9e5      	bls.n	8001a70 <SSD1306_UpdateScreen+0xc>
    }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000230 	.word	0x20000230

08001ab4 <SSD1306_WriteChar>:

char SSD1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4604      	mov	r4, r0
 8001abc:	4638      	mov	r0, r7
 8001abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b1f      	cmp	r3, #31
 8001aca:	d902      	bls.n	8001ad2 <SSD1306_WriteChar+0x1e>
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	2b7e      	cmp	r3, #126	; 0x7e
 8001ad0:	d901      	bls.n	8001ad6 <SSD1306_WriteChar+0x22>
        return 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e079      	b.n	8001bca <SSD1306_WriteChar+0x116>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <SSD1306_WriteChar+0x120>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	783b      	ldrb	r3, [r7, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	2b80      	cmp	r3, #128	; 0x80
 8001ae2:	dc06      	bgt.n	8001af2 <SSD1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001ae4:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <SSD1306_WriteChar+0x120>)
 8001ae6:	885b      	ldrh	r3, [r3, #2]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	787b      	ldrb	r3, [r7, #1]
 8001aec:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001aee:	2b40      	cmp	r3, #64	; 0x40
 8001af0:	dd01      	ble.n	8001af6 <SSD1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e069      	b.n	8001bca <SSD1306_WriteChar+0x116>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	e04e      	b.n	8001b9a <SSD1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	3b20      	subs	r3, #32
 8001b02:	7879      	ldrb	r1, [r7, #1]
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	440b      	add	r3, r1
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	e036      	b.n	8001b8a <SSD1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <SSD1306_WriteChar+0xa0>
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <SSD1306_WriteChar+0x120>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	b2d8      	uxtb	r0, r3
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <SSD1306_WriteChar+0x120>)
 8001b3c:	885b      	ldrh	r3, [r3, #2]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7ff fed3 	bl	80018f8 <SSD1306_DrawPixel>
 8001b52:	e017      	b.n	8001b84 <SSD1306_WriteChar+0xd0>
            } else {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <SSD1306_WriteChar+0x120>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	b2d8      	uxtb	r0, r3
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <SSD1306_WriteChar+0x120>)
 8001b64:	885b      	ldrh	r3, [r3, #2]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b2d9      	uxtb	r1, r3
 8001b70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf0c      	ite	eq
 8001b78:	2301      	moveq	r3, #1
 8001b7a:	2300      	movne	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f7ff feba 	bl	80018f8 <SSD1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	783b      	ldrb	r3, [r7, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d3c3      	bcc.n	8001b1c <SSD1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	3301      	adds	r3, #1
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	787b      	ldrb	r3, [r7, #1]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d3ab      	bcc.n	8001afc <SSD1306_WriteChar+0x48>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <SSD1306_WriteChar+0x120>)
 8001ba6:	881a      	ldrh	r2, [r3, #0]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <SSD1306_WriteChar+0x108>
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	3b20      	subs	r3, #32
 8001bb4:	440b      	add	r3, r1
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	e001      	b.n	8001bc0 <SSD1306_WriteChar+0x10c>
 8001bbc:	783b      	ldrb	r3, [r7, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <SSD1306_WriteChar+0x120>)
 8001bc6:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd90      	pop	{r4, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000228 	.word	0x20000228

08001bd8 <SSD1306_WriteString>:

char SSD1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	4638      	mov	r0, r7
 8001be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001be6:	e013      	b.n	8001c10 <SSD1306_WriteString+0x38>
        if (SSD1306_WriteChar(*str, Font, color) != *str) {
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	7818      	ldrb	r0, [r3, #0]
 8001bec:	7e3b      	ldrb	r3, [r7, #24]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bf4:	f7ff ff5e 	bl	8001ab4 <SSD1306_WriteChar>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d002      	beq.n	8001c0a <SSD1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	e008      	b.n	8001c1c <SSD1306_WriteString+0x44>
        }
        str++;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e7      	bne.n	8001be8 <SSD1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <SSD1306_SetCursor>:

void SSD1306_SetCursor(uint8_t x, uint8_t y) {
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	71fb      	strb	r3, [r7, #7]
 8001c30:	4613      	mov	r3, r2
 8001c32:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SSD1306_SetCursor+0x2c>)
 8001c3a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001c3c:	79bb      	ldrb	r3, [r7, #6]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <SSD1306_SetCursor+0x2c>)
 8001c42:	805a      	strh	r2, [r3, #2]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000228 	.word	0x20000228

08001c54 <SSD1306_Fill>:

void SSD1306_Fill(SSD1306_COLOR color) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <SSD1306_Fill+0x14>
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <SSD1306_Fill+0x16>
 8001c68:	23ff      	movs	r3, #255	; 0xff
 8001c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <SSD1306_Fill+0x2c>)
 8001c72:	f002 fc27 	bl	80044c4 <memset>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000230 	.word	0x20000230

08001c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_MspInit+0x5c>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <HAL_MspInit+0x5c>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6193      	str	r3, [r2, #24]
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_MspInit+0x5c>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_MspInit+0x5c>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_MspInit+0x5c>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_MspInit+0x5c>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_MspInit+0x60>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_MspInit+0x60>)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40010000 	.word	0x40010000

08001ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <HAL_I2C_MspInit+0x70>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d123      	bne.n	8001d50 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <HAL_I2C_MspInit+0x74>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <HAL_I2C_MspInit+0x74>)
 8001d0e:	f043 0308 	orr.w	r3, r3, #8
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_I2C_MspInit+0x74>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d20:	23c0      	movs	r3, #192	; 0xc0
 8001d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d24:	2312      	movs	r3, #18
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4619      	mov	r1, r3
 8001d32:	480b      	ldr	r0, [pc, #44]	; (8001d60 <HAL_I2C_MspInit+0x78>)
 8001d34:	f000 fb06 	bl	8002344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_I2C_MspInit+0x74>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_I2C_MspInit+0x74>)
 8001d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d42:	61d3      	str	r3, [r2, #28]
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_I2C_MspInit+0x74>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d50:	bf00      	nop
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40005400 	.word	0x40005400
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010c00 	.word	0x40010c00

08001d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <HAL_SPI_MspInit+0x70>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d123      	bne.n	8001dcc <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_SPI_MspInit+0x74>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <HAL_SPI_MspInit+0x74>)
 8001d8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d8e:	6193      	str	r3, [r2, #24]
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_SPI_MspInit+0x74>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_SPI_MspInit+0x74>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <HAL_SPI_MspInit+0x74>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_SPI_MspInit+0x74>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001db4:	23a0      	movs	r3, #160	; 0xa0
 8001db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <HAL_SPI_MspInit+0x78>)
 8001dc8:	f000 fabc 	bl	8002344 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40013000 	.word	0x40013000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010800 	.word	0x40010800

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <HardFault_Handler+0x4>

08001df2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <MemManage_Handler+0x4>

08001df8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <BusFault_Handler+0x4>

08001dfe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <UsageFault_Handler+0x4>

08001e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2c:	f000 f93c 	bl	80020a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f000 fc1f 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
	return 1;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <_kill>:

int _kill(int pid, int sig)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e5a:	f002 fb09 	bl	8004470 <__errno>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2216      	movs	r2, #22
 8001e62:	601a      	str	r2, [r3, #0]
	return -1;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_exit>:

void _exit (int status)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ffe7 	bl	8001e50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e82:	e7fe      	b.n	8001e82 <_exit+0x12>

08001e84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e00a      	b.n	8001eac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e96:	f3af 8000 	nop.w
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	60ba      	str	r2, [r7, #8]
 8001ea2:	b2ca      	uxtb	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dbf0      	blt.n	8001e96 <_read+0x12>
	}

return len;
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e009      	b.n	8001ee4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	60ba      	str	r2, [r7, #8]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbf1      	blt.n	8001ed0 <_write+0x12>
	}
	return len;
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_close>:

int _close(int file)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
	return -1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1c:	605a      	str	r2, [r3, #4]
	return 0;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <_isatty>:

int _isatty(int file)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
	return 1;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
	return 0;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
	...

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f002 fa72 	bl	8004470 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20005000 	.word	0x20005000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	20000630 	.word	0x20000630
 8001fc0:	20000710 	.word	0x20000710

08001fc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd0:	480c      	ldr	r0, [pc, #48]	; (8002004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fd2:	490d      	ldr	r1, [pc, #52]	; (8002008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe8:	4c0a      	ldr	r4, [pc, #40]	; (8002014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ff6:	f7ff ffe5 	bl	8001fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f002 fa3f 	bl	800447c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ffe:	f7ff f817 	bl	8001030 <main>
  bx lr
 8002002:	4770      	bx	lr
  ldr r0, =_sdata
 8002004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002008:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800200c:	08007e3c 	.word	0x08007e3c
  ldr r2, =_sbss
 8002010:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002014:	2000070c 	.word	0x2000070c

08002018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC1_2_IRQHandler>
	...

0800201c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_Init+0x28>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <HAL_Init+0x28>)
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202c:	2003      	movs	r0, #3
 800202e:	f000 f947 	bl	80022c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002032:	2000      	movs	r0, #0
 8002034:	f000 f808 	bl	8002048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002038:	f7ff fe24 	bl	8001c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000

08002048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_InitTick+0x54>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_InitTick+0x58>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f95f 	bl	800232a <HAL_SYSTICK_Config>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e00e      	b.n	8002094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b0f      	cmp	r3, #15
 800207a:	d80a      	bhi.n	8002092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800207c:	2200      	movs	r2, #0
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f000 f927 	bl	80022d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002088:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <HAL_InitTick+0x5c>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	e000      	b.n	8002094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000004 	.word	0x20000004
 80020a0:	2000000c 	.word	0x2000000c
 80020a4:	20000008 	.word	0x20000008

080020a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_IncTick+0x1c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_IncTick+0x20>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	4a03      	ldr	r2, [pc, #12]	; (80020c8 <HAL_IncTick+0x20>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	2000000c 	.word	0x2000000c
 80020c8:	200006f8 	.word	0x200006f8

080020cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return uwTick;
 80020d0:	4b02      	ldr	r3, [pc, #8]	; (80020dc <HAL_GetTick+0x10>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	200006f8 	.word	0x200006f8

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff fff0 	bl	80020cc <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffe0 	bl	80020cc <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2000000c 	.word	0x2000000c

08002128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002144:	4013      	ands	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215a:	4a04      	ldr	r2, [pc, #16]	; (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	60d3      	str	r3, [r2, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <__NVIC_GetPriorityGrouping+0x18>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	f003 0307 	and.w	r3, r3, #7
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	2b00      	cmp	r3, #0
 800219c:	db0b      	blt.n	80021b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	4906      	ldr	r1, [pc, #24]	; (80021c0 <__NVIC_EnableIRQ+0x34>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	2001      	movs	r0, #1
 80021ae:	fa00 f202 	lsl.w	r2, r0, r2
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	; (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800228c:	d301      	bcc.n	8002292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228e:	2301      	movs	r3, #1
 8002290:	e00f      	b.n	80022b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <SysTick_Config+0x40>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3b01      	subs	r3, #1
 8002298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229a:	210f      	movs	r1, #15
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f7ff ff90 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <SysTick_Config+0x40>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SysTick_Config+0x40>)
 80022ac:	2207      	movs	r2, #7
 80022ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	e000e010 	.word	0xe000e010

080022c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff2d 	bl	8002128 <__NVIC_SetPriorityGrouping>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e8:	f7ff ff42 	bl	8002170 <__NVIC_GetPriorityGrouping>
 80022ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	6978      	ldr	r0, [r7, #20]
 80022f4:	f7ff ff90 	bl	8002218 <NVIC_EncodePriority>
 80022f8:	4602      	mov	r2, r0
 80022fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff5f 	bl	80021c4 <__NVIC_SetPriority>
}
 8002306:	bf00      	nop
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff35 	bl	800218c <__NVIC_EnableIRQ>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ffa2 	bl	800227c <SysTick_Config>
 8002338:	4603      	mov	r3, r0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002344:	b480      	push	{r7}
 8002346:	b08b      	sub	sp, #44	; 0x2c
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002356:	e169      	b.n	800262c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002358:	2201      	movs	r2, #1
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	429a      	cmp	r2, r3
 8002372:	f040 8158 	bne.w	8002626 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a9a      	ldr	r2, [pc, #616]	; (80025e4 <HAL_GPIO_Init+0x2a0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d05e      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 8002380:	4a98      	ldr	r2, [pc, #608]	; (80025e4 <HAL_GPIO_Init+0x2a0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d875      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 8002386:	4a98      	ldr	r2, [pc, #608]	; (80025e8 <HAL_GPIO_Init+0x2a4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d058      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 800238c:	4a96      	ldr	r2, [pc, #600]	; (80025e8 <HAL_GPIO_Init+0x2a4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d86f      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 8002392:	4a96      	ldr	r2, [pc, #600]	; (80025ec <HAL_GPIO_Init+0x2a8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d052      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 8002398:	4a94      	ldr	r2, [pc, #592]	; (80025ec <HAL_GPIO_Init+0x2a8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d869      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 800239e:	4a94      	ldr	r2, [pc, #592]	; (80025f0 <HAL_GPIO_Init+0x2ac>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d04c      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 80023a4:	4a92      	ldr	r2, [pc, #584]	; (80025f0 <HAL_GPIO_Init+0x2ac>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d863      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 80023aa:	4a92      	ldr	r2, [pc, #584]	; (80025f4 <HAL_GPIO_Init+0x2b0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d046      	beq.n	800243e <HAL_GPIO_Init+0xfa>
 80023b0:	4a90      	ldr	r2, [pc, #576]	; (80025f4 <HAL_GPIO_Init+0x2b0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d85d      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 80023b6:	2b12      	cmp	r3, #18
 80023b8:	d82a      	bhi.n	8002410 <HAL_GPIO_Init+0xcc>
 80023ba:	2b12      	cmp	r3, #18
 80023bc:	d859      	bhi.n	8002472 <HAL_GPIO_Init+0x12e>
 80023be:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <HAL_GPIO_Init+0x80>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	0800243f 	.word	0x0800243f
 80023c8:	08002419 	.word	0x08002419
 80023cc:	0800242b 	.word	0x0800242b
 80023d0:	0800246d 	.word	0x0800246d
 80023d4:	08002473 	.word	0x08002473
 80023d8:	08002473 	.word	0x08002473
 80023dc:	08002473 	.word	0x08002473
 80023e0:	08002473 	.word	0x08002473
 80023e4:	08002473 	.word	0x08002473
 80023e8:	08002473 	.word	0x08002473
 80023ec:	08002473 	.word	0x08002473
 80023f0:	08002473 	.word	0x08002473
 80023f4:	08002473 	.word	0x08002473
 80023f8:	08002473 	.word	0x08002473
 80023fc:	08002473 	.word	0x08002473
 8002400:	08002473 	.word	0x08002473
 8002404:	08002473 	.word	0x08002473
 8002408:	08002421 	.word	0x08002421
 800240c:	08002435 	.word	0x08002435
 8002410:	4a79      	ldr	r2, [pc, #484]	; (80025f8 <HAL_GPIO_Init+0x2b4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002416:	e02c      	b.n	8002472 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	623b      	str	r3, [r7, #32]
          break;
 800241e:	e029      	b.n	8002474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	3304      	adds	r3, #4
 8002426:	623b      	str	r3, [r7, #32]
          break;
 8002428:	e024      	b.n	8002474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	3308      	adds	r3, #8
 8002430:	623b      	str	r3, [r7, #32]
          break;
 8002432:	e01f      	b.n	8002474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	330c      	adds	r3, #12
 800243a:	623b      	str	r3, [r7, #32]
          break;
 800243c:	e01a      	b.n	8002474 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002446:	2304      	movs	r3, #4
 8002448:	623b      	str	r3, [r7, #32]
          break;
 800244a:	e013      	b.n	8002474 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002454:	2308      	movs	r3, #8
 8002456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	611a      	str	r2, [r3, #16]
          break;
 800245e:	e009      	b.n	8002474 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002460:	2308      	movs	r3, #8
 8002462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	615a      	str	r2, [r3, #20]
          break;
 800246a:	e003      	b.n	8002474 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800246c:	2300      	movs	r3, #0
 800246e:	623b      	str	r3, [r7, #32]
          break;
 8002470:	e000      	b.n	8002474 <HAL_GPIO_Init+0x130>
          break;
 8002472:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2bff      	cmp	r3, #255	; 0xff
 8002478:	d801      	bhi.n	800247e <HAL_GPIO_Init+0x13a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	e001      	b.n	8002482 <HAL_GPIO_Init+0x13e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2bff      	cmp	r3, #255	; 0xff
 8002488:	d802      	bhi.n	8002490 <HAL_GPIO_Init+0x14c>
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	e002      	b.n	8002496 <HAL_GPIO_Init+0x152>
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	3b08      	subs	r3, #8
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	210f      	movs	r1, #15
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	401a      	ands	r2, r3
 80024a8:	6a39      	ldr	r1, [r7, #32]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	431a      	orrs	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80b1 	beq.w	8002626 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024c4:	4b4d      	ldr	r3, [pc, #308]	; (80025fc <HAL_GPIO_Init+0x2b8>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4a4c      	ldr	r2, [pc, #304]	; (80025fc <HAL_GPIO_Init+0x2b8>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6193      	str	r3, [r2, #24]
 80024d0:	4b4a      	ldr	r3, [pc, #296]	; (80025fc <HAL_GPIO_Init+0x2b8>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024dc:	4a48      	ldr	r2, [pc, #288]	; (8002600 <HAL_GPIO_Init+0x2bc>)
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	220f      	movs	r2, #15
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a40      	ldr	r2, [pc, #256]	; (8002604 <HAL_GPIO_Init+0x2c0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_GPIO_Init+0x1ec>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3f      	ldr	r2, [pc, #252]	; (8002608 <HAL_GPIO_Init+0x2c4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00d      	beq.n	800252c <HAL_GPIO_Init+0x1e8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3e      	ldr	r2, [pc, #248]	; (800260c <HAL_GPIO_Init+0x2c8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <HAL_GPIO_Init+0x1e4>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a3d      	ldr	r2, [pc, #244]	; (8002610 <HAL_GPIO_Init+0x2cc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_GPIO_Init+0x1e0>
 8002520:	2303      	movs	r3, #3
 8002522:	e006      	b.n	8002532 <HAL_GPIO_Init+0x1ee>
 8002524:	2304      	movs	r3, #4
 8002526:	e004      	b.n	8002532 <HAL_GPIO_Init+0x1ee>
 8002528:	2302      	movs	r3, #2
 800252a:	e002      	b.n	8002532 <HAL_GPIO_Init+0x1ee>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_GPIO_Init+0x1ee>
 8002530:	2300      	movs	r3, #0
 8002532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002534:	f002 0203 	and.w	r2, r2, #3
 8002538:	0092      	lsls	r2, r2, #2
 800253a:	4093      	lsls	r3, r2
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002542:	492f      	ldr	r1, [pc, #188]	; (8002600 <HAL_GPIO_Init+0x2bc>)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	089b      	lsrs	r3, r3, #2
 8002548:	3302      	adds	r3, #2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	492c      	ldr	r1, [pc, #176]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800256a:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	43db      	mvns	r3, r3
 8002572:	4928      	ldr	r1, [pc, #160]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 8002574:	4013      	ands	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	4922      	ldr	r1, [pc, #136]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	60cb      	str	r3, [r1, #12]
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	43db      	mvns	r3, r3
 800259a:	491e      	ldr	r1, [pc, #120]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 800259c:	4013      	ands	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4918      	ldr	r1, [pc, #96]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4914      	ldr	r1, [pc, #80]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d021      	beq.n	8002618 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	490e      	ldr	r1, [pc, #56]	; (8002614 <HAL_GPIO_Init+0x2d0>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
 80025e0:	e021      	b.n	8002626 <HAL_GPIO_Init+0x2e2>
 80025e2:	bf00      	nop
 80025e4:	10320000 	.word	0x10320000
 80025e8:	10310000 	.word	0x10310000
 80025ec:	10220000 	.word	0x10220000
 80025f0:	10210000 	.word	0x10210000
 80025f4:	10120000 	.word	0x10120000
 80025f8:	10110000 	.word	0x10110000
 80025fc:	40021000 	.word	0x40021000
 8002600:	40010000 	.word	0x40010000
 8002604:	40010800 	.word	0x40010800
 8002608:	40010c00 	.word	0x40010c00
 800260c:	40011000 	.word	0x40011000
 8002610:	40011400 	.word	0x40011400
 8002614:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_GPIO_Init+0x304>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	43db      	mvns	r3, r3
 8002620:	4909      	ldr	r1, [pc, #36]	; (8002648 <HAL_GPIO_Init+0x304>)
 8002622:	4013      	ands	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	3301      	adds	r3, #1
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	fa22 f303 	lsr.w	r3, r2, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	f47f ae8e 	bne.w	8002358 <HAL_GPIO_Init+0x14>
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	372c      	adds	r7, #44	; 0x2c
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	40010400 	.word	0x40010400

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe ff6a 	bl	8001574 <HAL_GPIO_EXTI_Callback>
  }
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40010400 	.word	0x40010400

080026ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e12b      	b.n	8002916 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff fb08 	bl	8001ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	; 0x24
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800270e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002710:	f001 fbfa 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 8002714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a81      	ldr	r2, [pc, #516]	; (8002920 <HAL_I2C_Init+0x274>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d807      	bhi.n	8002730 <HAL_I2C_Init+0x84>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a80      	ldr	r2, [pc, #512]	; (8002924 <HAL_I2C_Init+0x278>)
 8002724:	4293      	cmp	r3, r2
 8002726:	bf94      	ite	ls
 8002728:	2301      	movls	r3, #1
 800272a:	2300      	movhi	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e006      	b.n	800273e <HAL_I2C_Init+0x92>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a7d      	ldr	r2, [pc, #500]	; (8002928 <HAL_I2C_Init+0x27c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0e7      	b.n	8002916 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a78      	ldr	r2, [pc, #480]	; (800292c <HAL_I2C_Init+0x280>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0c9b      	lsrs	r3, r3, #18
 8002750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a6a      	ldr	r2, [pc, #424]	; (8002920 <HAL_I2C_Init+0x274>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d802      	bhi.n	8002780 <HAL_I2C_Init+0xd4>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	3301      	adds	r3, #1
 800277e:	e009      	b.n	8002794 <HAL_I2C_Init+0xe8>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	4a69      	ldr	r2, [pc, #420]	; (8002930 <HAL_I2C_Init+0x284>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	3301      	adds	r3, #1
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	430b      	orrs	r3, r1
 800279a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	495c      	ldr	r1, [pc, #368]	; (8002920 <HAL_I2C_Init+0x274>)
 80027b0:	428b      	cmp	r3, r1
 80027b2:	d819      	bhi.n	80027e8 <HAL_I2C_Init+0x13c>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e59      	subs	r1, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c2:	1c59      	adds	r1, r3, #1
 80027c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027c8:	400b      	ands	r3, r1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_I2C_Init+0x138>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1e59      	subs	r1, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e2:	e051      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 80027e4:	2304      	movs	r3, #4
 80027e6:	e04f      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <HAL_I2C_Init+0x168>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1e58      	subs	r0, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	440b      	add	r3, r1
 80027fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	e012      	b.n	800283a <HAL_I2C_Init+0x18e>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1e58      	subs	r0, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	0099      	lsls	r1, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	fbb0 f3f3 	udiv	r3, r0, r3
 800282a:	3301      	adds	r3, #1
 800282c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Init+0x196>
 800283e:	2301      	movs	r3, #1
 8002840:	e022      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10e      	bne.n	8002868 <HAL_I2C_Init+0x1bc>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1e58      	subs	r0, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	440b      	add	r3, r1
 8002858:	fbb0 f3f3 	udiv	r3, r0, r3
 800285c:	3301      	adds	r3, #1
 800285e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002866:	e00f      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	0099      	lsls	r1, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	fbb0 f3f3 	udiv	r3, r0, r3
 800287e:	3301      	adds	r3, #1
 8002880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	6809      	ldr	r1, [r1, #0]
 800288c:	4313      	orrs	r3, r2
 800288e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6911      	ldr	r1, [r2, #16]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68d2      	ldr	r2, [r2, #12]
 80028c2:	4311      	orrs	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	000186a0 	.word	0x000186a0
 8002924:	001e847f 	.word	0x001e847f
 8002928:	003d08ff 	.word	0x003d08ff
 800292c:	431bde83 	.word	0x431bde83
 8002930:	10624dd3 	.word	0x10624dd3

08002934 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	460b      	mov	r3, r1
 8002948:	813b      	strh	r3, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800294e:	f7ff fbbd 	bl	80020cc <HAL_GetTick>
 8002952:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	f040 80d9 	bne.w	8002b14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2319      	movs	r3, #25
 8002968:	2201      	movs	r2, #1
 800296a:	496d      	ldr	r1, [pc, #436]	; (8002b20 <HAL_I2C_Mem_Write+0x1ec>)
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fccd 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
 800297a:	e0cc      	b.n	8002b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_I2C_Mem_Write+0x56>
 8002986:	2302      	movs	r3, #2
 8002988:	e0c5      	b.n	8002b16 <HAL_I2C_Mem_Write+0x1e2>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d007      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2221      	movs	r2, #33	; 0x21
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2240      	movs	r2, #64	; 0x40
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a4d      	ldr	r2, [pc, #308]	; (8002b24 <HAL_I2C_Mem_Write+0x1f0>)
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029f2:	88f8      	ldrh	r0, [r7, #6]
 80029f4:	893a      	ldrh	r2, [r7, #8]
 80029f6:	8979      	ldrh	r1, [r7, #10]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	4603      	mov	r3, r0
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fb04 	bl	8003010 <I2C_RequestMemoryWrite>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d052      	beq.n	8002ab4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e081      	b.n	8002b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fd92 	bl	8003540 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00d      	beq.n	8002a3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d107      	bne.n	8002a3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e06b      	b.n	8002b16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	781a      	ldrb	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_I2C_Mem_Write+0x180>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d017      	beq.n	8002ab4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1aa      	bne.n	8002a12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fd85 	bl	80035d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d107      	bne.n	8002ae4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e016      	b.n	8002b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e000      	b.n	8002b16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
  }
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	00100002 	.word	0x00100002
 8002b24:	ffff0000 	.word	0xffff0000

08002b28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	; 0x30
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	4608      	mov	r0, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	817b      	strh	r3, [r7, #10]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	813b      	strh	r3, [r7, #8]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b46:	f7ff fac1 	bl	80020cc <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	f040 8250 	bne.w	8002ffa <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	2319      	movs	r3, #25
 8002b60:	2201      	movs	r2, #1
 8002b62:	4982      	ldr	r1, [pc, #520]	; (8002d6c <HAL_I2C_Mem_Read+0x244>)
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fbd1 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
 8002b72:	e243      	b.n	8002ffc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_I2C_Mem_Read+0x5a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e23c      	b.n	8002ffc <HAL_I2C_Mem_Read+0x4d4>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d007      	beq.n	8002ba8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2222      	movs	r2, #34	; 0x22
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2240      	movs	r2, #64	; 0x40
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a62      	ldr	r2, [pc, #392]	; (8002d70 <HAL_I2C_Mem_Read+0x248>)
 8002be8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bea:	88f8      	ldrh	r0, [r7, #6]
 8002bec:	893a      	ldrh	r2, [r7, #8]
 8002bee:	8979      	ldrh	r1, [r7, #10]
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fa9e 	bl	800313c <I2C_RequestMemoryRead>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e1f8      	b.n	8002ffc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d113      	bne.n	8002c3a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e1cc      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d11e      	bne.n	8002c80 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c50:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c52:	b672      	cpsid	i
}
 8002c54:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c7c:	b662      	cpsie	i
}
 8002c7e:	e035      	b.n	8002cec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d11e      	bne.n	8002cc6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c98:	b672      	cpsid	i
}
 8002c9a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002cc2:	b662      	cpsie	i
}
 8002cc4:	e012      	b.n	8002cec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cd4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002cec:	e172      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	f200 811f 	bhi.w	8002f36 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d123      	bne.n	8002d48 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fcab 	bl	8003660 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e173      	b.n	8002ffc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d46:	e145      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d152      	bne.n	8002df6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	2200      	movs	r2, #0
 8002d58:	4906      	ldr	r1, [pc, #24]	; (8002d74 <HAL_I2C_Mem_Read+0x24c>)
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fad6 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e148      	b.n	8002ffc <HAL_I2C_Mem_Read+0x4d4>
 8002d6a:	bf00      	nop
 8002d6c:	00100002 	.word	0x00100002
 8002d70:	ffff0000 	.word	0xffff0000
 8002d74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d78:	b672      	cpsid	i
}
 8002d7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002dbe:	b662      	cpsie	i
}
 8002dc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002df4:	e0ee      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	4981      	ldr	r1, [pc, #516]	; (8003004 <HAL_I2C_Mem_Read+0x4dc>)
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fa83 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0f5      	b.n	8002ffc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e20:	b672      	cpsid	i
}
 8002e22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e56:	4b6c      	ldr	r3, [pc, #432]	; (8003008 <HAL_I2C_Mem_Read+0x4e0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	08db      	lsrs	r3, r3, #3
 8002e5c:	4a6b      	ldr	r2, [pc, #428]	; (800300c <HAL_I2C_Mem_Read+0x4e4>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	0a1a      	lsrs	r2, r3, #8
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00da      	lsls	r2, r3, #3
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d118      	bne.n	8002eae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e9e:	b662      	cpsie	i
}
 8002ea0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0a6      	b.n	8002ffc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d1d9      	bne.n	8002e70 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002efe:	b662      	cpsie	i
}
 8002f00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f34:	e04e      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fb90 	bl	8003660 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e058      	b.n	8002ffc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d124      	bne.n	8002fd4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d107      	bne.n	8002fa2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f47f ae88 	bne.w	8002cee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
  }
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3728      	adds	r7, #40	; 0x28
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	00010004 	.word	0x00010004
 8003008:	20000004 	.word	0x20000004
 800300c:	14f8b589 	.word	0x14f8b589

08003010 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	4608      	mov	r0, r1
 800301a:	4611      	mov	r1, r2
 800301c:	461a      	mov	r2, r3
 800301e:	4603      	mov	r3, r0
 8003020:	817b      	strh	r3, [r7, #10]
 8003022:	460b      	mov	r3, r1
 8003024:	813b      	strh	r3, [r7, #8]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003038:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	2200      	movs	r2, #0
 8003042:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f960 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003060:	d103      	bne.n	800306a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e05f      	b.n	800312e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800306e:	897b      	ldrh	r3, [r7, #10]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800307c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	6a3a      	ldr	r2, [r7, #32]
 8003082:	492d      	ldr	r1, [pc, #180]	; (8003138 <I2C_RequestMemoryWrite+0x128>)
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f9bb 	bl	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e04c      	b.n	800312e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	6a39      	ldr	r1, [r7, #32]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fa46 	bl	8003540 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d107      	bne.n	80030d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e02b      	b.n	800312e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030dc:	893b      	ldrh	r3, [r7, #8]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	611a      	str	r2, [r3, #16]
 80030e6:	e021      	b.n	800312c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030e8:	893b      	ldrh	r3, [r7, #8]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	6a39      	ldr	r1, [r7, #32]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fa20 	bl	8003540 <I2C_WaitOnTXEFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	2b04      	cmp	r3, #4
 800310c:	d107      	bne.n	800311e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e005      	b.n	800312e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003122:	893b      	ldrh	r3, [r7, #8]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	00010002 	.word	0x00010002

0800313c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	4608      	mov	r0, r1
 8003146:	4611      	mov	r1, r2
 8003148:	461a      	mov	r2, r3
 800314a:	4603      	mov	r3, r0
 800314c:	817b      	strh	r3, [r7, #10]
 800314e:	460b      	mov	r3, r1
 8003150:	813b      	strh	r3, [r7, #8]
 8003152:	4613      	mov	r3, r2
 8003154:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003164:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003174:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	2200      	movs	r2, #0
 800317e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f8c2 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319c:	d103      	bne.n	80031a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0aa      	b.n	8003300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	6a3a      	ldr	r2, [r7, #32]
 80031be:	4952      	ldr	r1, [pc, #328]	; (8003308 <I2C_RequestMemoryRead+0x1cc>)
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f91d 	bl	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e097      	b.n	8003300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	6a39      	ldr	r1, [r7, #32]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f9a8 	bl	8003540 <I2C_WaitOnTXEFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00d      	beq.n	8003212 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d107      	bne.n	800320e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e076      	b.n	8003300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d105      	bne.n	8003224 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003218:	893b      	ldrh	r3, [r7, #8]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	611a      	str	r2, [r3, #16]
 8003222:	e021      	b.n	8003268 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003224:	893b      	ldrh	r3, [r7, #8]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	b29b      	uxth	r3, r3
 800322a:	b2da      	uxtb	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003234:	6a39      	ldr	r1, [r7, #32]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f982 	bl	8003540 <I2C_WaitOnTXEFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00d      	beq.n	800325e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	2b04      	cmp	r3, #4
 8003248:	d107      	bne.n	800325a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003258:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e050      	b.n	8003300 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800325e:	893b      	ldrh	r3, [r7, #8]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326a:	6a39      	ldr	r1, [r7, #32]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f967 	bl	8003540 <I2C_WaitOnTXEFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00d      	beq.n	8003294 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	2b04      	cmp	r3, #4
 800327e:	d107      	bne.n	8003290 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e035      	b.n	8003300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f82b 	bl	800330c <I2C_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ca:	d103      	bne.n	80032d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e013      	b.n	8003300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032d8:	897b      	ldrh	r3, [r7, #10]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	6a3a      	ldr	r2, [r7, #32]
 80032ec:	4906      	ldr	r1, [pc, #24]	; (8003308 <I2C_RequestMemoryRead+0x1cc>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f886 	bl	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	00010002 	.word	0x00010002

0800330c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800331c:	e048      	b.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d044      	beq.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003326:	f7fe fed1 	bl	80020cc <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d302      	bcc.n	800333c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d139      	bne.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	0c1b      	lsrs	r3, r3, #16
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d10d      	bne.n	8003362 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	43da      	mvns	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4013      	ands	r3, r2
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	e00c      	b.n	800337c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	43da      	mvns	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	4013      	ands	r3, r2
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf0c      	ite	eq
 8003374:	2301      	moveq	r3, #1
 8003376:	2300      	movne	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	429a      	cmp	r2, r3
 8003380:	d116      	bne.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e023      	b.n	80033f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	0c1b      	lsrs	r3, r3, #16
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d10d      	bne.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	43da      	mvns	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	e00c      	b.n	80033f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	43da      	mvns	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	4013      	ands	r3, r2
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d093      	beq.n	800331e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800340e:	e071      	b.n	80034f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341e:	d123      	bne.n	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003438:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	f043 0204 	orr.w	r2, r3, #4
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e067      	b.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d041      	beq.n	80034f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003470:	f7fe fe2c 	bl	80020cc <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	d302      	bcc.n	8003486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d136      	bne.n	80034f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	0c1b      	lsrs	r3, r3, #16
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d10c      	bne.n	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	43da      	mvns	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4013      	ands	r3, r2
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	e00b      	b.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	43da      	mvns	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4013      	ands	r3, r2
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d016      	beq.n	80034f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e021      	b.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	0c1b      	lsrs	r3, r3, #16
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d10c      	bne.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	43da      	mvns	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e00b      	b.n	8003530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	43da      	mvns	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4013      	ands	r3, r2
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	bf14      	ite	ne
 800352a:	2301      	movne	r3, #1
 800352c:	2300      	moveq	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	f47f af6d 	bne.w	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800354c:	e034      	b.n	80035b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f8e3 	bl	800371a <I2C_IsAcknowledgeFailed>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e034      	b.n	80035c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d028      	beq.n	80035b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7fe fdb1 	bl	80020cc <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d11d      	bne.n	80035b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b80      	cmp	r3, #128	; 0x80
 8003588:	d016      	beq.n	80035b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e007      	b.n	80035c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c2:	2b80      	cmp	r3, #128	; 0x80
 80035c4:	d1c3      	bne.n	800354e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035dc:	e034      	b.n	8003648 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f89b 	bl	800371a <I2C_IsAcknowledgeFailed>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e034      	b.n	8003658 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d028      	beq.n	8003648 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f6:	f7fe fd69 	bl	80020cc <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	429a      	cmp	r2, r3
 8003604:	d302      	bcc.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d11d      	bne.n	8003648 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b04      	cmp	r3, #4
 8003618:	d016      	beq.n	8003648 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f043 0220 	orr.w	r2, r3, #32
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e007      	b.n	8003658 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b04      	cmp	r3, #4
 8003654:	d1c3      	bne.n	80035de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800366c:	e049      	b.n	8003702 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b10      	cmp	r3, #16
 800367a:	d119      	bne.n	80036b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0210 	mvn.w	r2, #16
 8003684:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e030      	b.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b0:	f7fe fd0c 	bl	80020cc <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d302      	bcc.n	80036c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11d      	bne.n	8003702 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	d016      	beq.n	8003702 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f043 0220 	orr.w	r2, r3, #32
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e007      	b.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d1ae      	bne.n	800366e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003730:	d11b      	bne.n	800376a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800373a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f043 0204 	orr.w	r2, r3, #4
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
	...

08003778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e26c      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8087 	beq.w	80038a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003798:	4b92      	ldr	r3, [pc, #584]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d00c      	beq.n	80037be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037a4:	4b8f      	ldr	r3, [pc, #572]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d112      	bne.n	80037d6 <HAL_RCC_OscConfig+0x5e>
 80037b0:	4b8c      	ldr	r3, [pc, #560]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037bc:	d10b      	bne.n	80037d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037be:	4b89      	ldr	r3, [pc, #548]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d06c      	beq.n	80038a4 <HAL_RCC_OscConfig+0x12c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d168      	bne.n	80038a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e246      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x76>
 80037e0:	4b80      	ldr	r3, [pc, #512]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a7f      	ldr	r2, [pc, #508]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	e02e      	b.n	800384c <HAL_RCC_OscConfig+0xd4>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0x98>
 80037f6:	4b7b      	ldr	r3, [pc, #492]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a7a      	ldr	r2, [pc, #488]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4b78      	ldr	r3, [pc, #480]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a77      	ldr	r2, [pc, #476]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 8003808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e01d      	b.n	800384c <HAL_RCC_OscConfig+0xd4>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003818:	d10c      	bne.n	8003834 <HAL_RCC_OscConfig+0xbc>
 800381a:	4b72      	ldr	r3, [pc, #456]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a71      	ldr	r2, [pc, #452]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 8003820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b6f      	ldr	r3, [pc, #444]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6e      	ldr	r2, [pc, #440]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e00b      	b.n	800384c <HAL_RCC_OscConfig+0xd4>
 8003834:	4b6b      	ldr	r3, [pc, #428]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6a      	ldr	r2, [pc, #424]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 800383a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b68      	ldr	r3, [pc, #416]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a67      	ldr	r2, [pc, #412]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 8003846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d013      	beq.n	800387c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fe fc3a 	bl	80020cc <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800385c:	f7fe fc36 	bl	80020cc <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	; 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e1fa      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b5d      	ldr	r3, [pc, #372]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0xe4>
 800387a:	e014      	b.n	80038a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fe fc26 	bl	80020cc <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003884:	f7fe fc22 	bl	80020cc <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e1e6      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003896:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x10c>
 80038a2:	e000      	b.n	80038a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d063      	beq.n	800397a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038b2:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038be:	4b49      	ldr	r3, [pc, #292]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d11c      	bne.n	8003904 <HAL_RCC_OscConfig+0x18c>
 80038ca:	4b46      	ldr	r3, [pc, #280]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d116      	bne.n	8003904 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d6:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_RCC_OscConfig+0x176>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e1ba      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	4b3d      	ldr	r3, [pc, #244]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4939      	ldr	r1, [pc, #228]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	e03a      	b.n	800397a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d020      	beq.n	800394e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe fbdb 	bl	80020cc <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391a:	f7fe fbd7 	bl	80020cc <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e19b      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392c:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003938:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4927      	ldr	r1, [pc, #156]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
 800394c:	e015      	b.n	800397a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394e:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <HAL_RCC_OscConfig+0x270>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe fbba 	bl	80020cc <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395c:	f7fe fbb6 	bl	80020cc <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e17a      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396e:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d03a      	beq.n	80039fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d019      	beq.n	80039c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398e:	4b17      	ldr	r3, [pc, #92]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 8003990:	2201      	movs	r2, #1
 8003992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003994:	f7fe fb9a 	bl	80020cc <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399c:	f7fe fb96 	bl	80020cc <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e15a      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039ba:	2001      	movs	r0, #1
 80039bc:	f000 fab8 	bl	8003f30 <RCC_Delay>
 80039c0:	e01c      	b.n	80039fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_RCC_OscConfig+0x274>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c8:	f7fe fb80 	bl	80020cc <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ce:	e00f      	b.n	80039f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d0:	f7fe fb7c 	bl	80020cc <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d908      	bls.n	80039f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e140      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
 80039e2:	bf00      	nop
 80039e4:	40021000 	.word	0x40021000
 80039e8:	42420000 	.word	0x42420000
 80039ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f0:	4b9e      	ldr	r3, [pc, #632]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e9      	bne.n	80039d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80a6 	beq.w	8003b56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0e:	4b97      	ldr	r3, [pc, #604]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10d      	bne.n	8003a36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	4b94      	ldr	r3, [pc, #592]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	4a93      	ldr	r2, [pc, #588]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	61d3      	str	r3, [r2, #28]
 8003a26:	4b91      	ldr	r3, [pc, #580]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a32:	2301      	movs	r3, #1
 8003a34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a36:	4b8e      	ldr	r3, [pc, #568]	; (8003c70 <HAL_RCC_OscConfig+0x4f8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d118      	bne.n	8003a74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a42:	4b8b      	ldr	r3, [pc, #556]	; (8003c70 <HAL_RCC_OscConfig+0x4f8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a8a      	ldr	r2, [pc, #552]	; (8003c70 <HAL_RCC_OscConfig+0x4f8>)
 8003a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4e:	f7fe fb3d 	bl	80020cc <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a56:	f7fe fb39 	bl	80020cc <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b64      	cmp	r3, #100	; 0x64
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0fd      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a68:	4b81      	ldr	r3, [pc, #516]	; (8003c70 <HAL_RCC_OscConfig+0x4f8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d106      	bne.n	8003a8a <HAL_RCC_OscConfig+0x312>
 8003a7c:	4b7b      	ldr	r3, [pc, #492]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4a7a      	ldr	r2, [pc, #488]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6213      	str	r3, [r2, #32]
 8003a88:	e02d      	b.n	8003ae6 <HAL_RCC_OscConfig+0x36e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10c      	bne.n	8003aac <HAL_RCC_OscConfig+0x334>
 8003a92:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	4a75      	ldr	r2, [pc, #468]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	6213      	str	r3, [r2, #32]
 8003a9e:	4b73      	ldr	r3, [pc, #460]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4a72      	ldr	r2, [pc, #456]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003aa4:	f023 0304 	bic.w	r3, r3, #4
 8003aa8:	6213      	str	r3, [r2, #32]
 8003aaa:	e01c      	b.n	8003ae6 <HAL_RCC_OscConfig+0x36e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	d10c      	bne.n	8003ace <HAL_RCC_OscConfig+0x356>
 8003ab4:	4b6d      	ldr	r3, [pc, #436]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4a6c      	ldr	r2, [pc, #432]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003aba:	f043 0304 	orr.w	r3, r3, #4
 8003abe:	6213      	str	r3, [r2, #32]
 8003ac0:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4a69      	ldr	r2, [pc, #420]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6213      	str	r3, [r2, #32]
 8003acc:	e00b      	b.n	8003ae6 <HAL_RCC_OscConfig+0x36e>
 8003ace:	4b67      	ldr	r3, [pc, #412]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4a66      	ldr	r2, [pc, #408]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003ad4:	f023 0301 	bic.w	r3, r3, #1
 8003ad8:	6213      	str	r3, [r2, #32]
 8003ada:	4b64      	ldr	r3, [pc, #400]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	4a63      	ldr	r2, [pc, #396]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003ae0:	f023 0304 	bic.w	r3, r3, #4
 8003ae4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d015      	beq.n	8003b1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aee:	f7fe faed 	bl	80020cc <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af6:	f7fe fae9 	bl	80020cc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0ab      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0c:	4b57      	ldr	r3, [pc, #348]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ee      	beq.n	8003af6 <HAL_RCC_OscConfig+0x37e>
 8003b18:	e014      	b.n	8003b44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1a:	f7fe fad7 	bl	80020cc <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b20:	e00a      	b.n	8003b38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b22:	f7fe fad3 	bl	80020cc <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e095      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b38:	4b4c      	ldr	r3, [pc, #304]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ee      	bne.n	8003b22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d105      	bne.n	8003b56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4a:	4b48      	ldr	r3, [pc, #288]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4a47      	ldr	r2, [pc, #284]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 8081 	beq.w	8003c62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b60:	4b42      	ldr	r3, [pc, #264]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d061      	beq.n	8003c30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d146      	bne.n	8003c02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b74:	4b3f      	ldr	r3, [pc, #252]	; (8003c74 <HAL_RCC_OscConfig+0x4fc>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7a:	f7fe faa7 	bl	80020cc <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fe faa3 	bl	80020cc <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e067      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f0      	bne.n	8003b82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba8:	d108      	bne.n	8003bbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003baa:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	492d      	ldr	r1, [pc, #180]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a19      	ldr	r1, [r3, #32]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	4927      	ldr	r1, [pc, #156]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <HAL_RCC_OscConfig+0x4fc>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bda:	f7fe fa77 	bl	80020cc <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be2:	f7fe fa73 	bl	80020cc <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e037      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x46a>
 8003c00:	e02f      	b.n	8003c62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <HAL_RCC_OscConfig+0x4fc>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c08:	f7fe fa60 	bl	80020cc <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c10:	f7fe fa5c 	bl	80020cc <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e020      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x498>
 8003c2e:	e018      	b.n	8003c62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e013      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_OscConfig+0x4f4>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d001      	beq.n	8003c62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40007000 	.word	0x40007000
 8003c74:	42420060 	.word	0x42420060

08003c78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0d0      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b6a      	ldr	r3, [pc, #424]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d910      	bls.n	8003cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b67      	ldr	r3, [pc, #412]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 0207 	bic.w	r2, r3, #7
 8003ca2:	4965      	ldr	r1, [pc, #404]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b63      	ldr	r3, [pc, #396]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0b8      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d020      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd4:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4a58      	ldr	r2, [pc, #352]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cec:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a52      	ldr	r2, [pc, #328]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	494d      	ldr	r1, [pc, #308]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d040      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d115      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e07f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d36:	4b41      	ldr	r3, [pc, #260]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e073      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d46:	4b3d      	ldr	r3, [pc, #244]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e06b      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d56:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f023 0203 	bic.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4936      	ldr	r1, [pc, #216]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d68:	f7fe f9b0 	bl	80020cc <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d70:	f7fe f9ac 	bl	80020cc <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e053      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 020c 	and.w	r2, r3, #12
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1eb      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d98:	4b27      	ldr	r3, [pc, #156]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d210      	bcs.n	8003dc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 0207 	bic.w	r2, r3, #7
 8003dae:	4922      	ldr	r1, [pc, #136]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e032      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd4:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4916      	ldr	r1, [pc, #88]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	490e      	ldr	r1, [pc, #56]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e06:	f000 f821 	bl	8003e4c <HAL_RCC_GetSysClockFreq>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	490a      	ldr	r1, [pc, #40]	; (8003e40 <HAL_RCC_ClockConfig+0x1c8>)
 8003e18:	5ccb      	ldrb	r3, [r1, r3]
 8003e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1cc>)
 8003e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x1d0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe f90e 	bl	8002048 <HAL_InitTick>

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40022000 	.word	0x40022000
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	08007a28 	.word	0x08007a28
 8003e44:	20000004 	.word	0x20000004
 8003e48:	20000008 	.word	0x20000008

08003e4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e66:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d002      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x30>
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d003      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0x36>
 8003e7a:	e027      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e7e:	613b      	str	r3, [r7, #16]
      break;
 8003e80:	e027      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	0c9b      	lsrs	r3, r3, #18
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e8c:	5cd3      	ldrb	r3, [r2, r3]
 8003e8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d010      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e9a:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	0c5b      	lsrs	r3, r3, #17
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	4a11      	ldr	r2, [pc, #68]	; (8003eec <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ea6:	5cd3      	ldrb	r3, [r2, r3]
 8003ea8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a0d      	ldr	r2, [pc, #52]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eae:	fb02 f203 	mul.w	r2, r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	e004      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	613b      	str	r3, [r7, #16]
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ece:	613b      	str	r3, [r7, #16]
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	693b      	ldr	r3, [r7, #16]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	007a1200 	.word	0x007a1200
 8003ee8:	08007a40 	.word	0x08007a40
 8003eec:	08007a50 	.word	0x08007a50
 8003ef0:	003d0900 	.word	0x003d0900

08003ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef8:	4b02      	ldr	r3, [pc, #8]	; (8003f04 <HAL_RCC_GetHCLKFreq+0x10>)
 8003efa:	681b      	ldr	r3, [r3, #0]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	20000004 	.word	0x20000004

08003f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f0c:	f7ff fff2 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	4903      	ldr	r1, [pc, #12]	; (8003f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1e:	5ccb      	ldrb	r3, [r1, r3]
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	08007a38 	.word	0x08007a38

08003f30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f38:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <RCC_Delay+0x34>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <RCC_Delay+0x38>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	0a5b      	lsrs	r3, r3, #9
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f4c:	bf00      	nop
  }
  while (Delay --);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1e5a      	subs	r2, r3, #1
 8003f52:	60fa      	str	r2, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f9      	bne.n	8003f4c <RCC_Delay+0x1c>
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	20000004 	.word	0x20000004
 8003f68:	10624dd3 	.word	0x10624dd3

08003f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e076      	b.n	800406c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8e:	d009      	beq.n	8003fa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	61da      	str	r2, [r3, #28]
 8003f96:	e005      	b.n	8003fa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd fed0 	bl	8001d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	ea42 0103 	orr.w	r1, r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	0c1a      	lsrs	r2, r3, #16
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f002 0204 	and.w	r2, r2, #4
 800404a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800405a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004084:	f7fe f822 	bl	80020cc <HAL_GetTick>
 8004088:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d001      	beq.n	800409e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800409a:	2302      	movs	r3, #2
 800409c:	e12a      	b.n	80042f4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <HAL_SPI_Transmit+0x36>
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e122      	b.n	80042f4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_SPI_Transmit+0x48>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e11b      	b.n	80042f4 <HAL_SPI_Transmit+0x280>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2203      	movs	r2, #3
 80040c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	88fa      	ldrh	r2, [r7, #6]
 80040e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410a:	d10f      	bne.n	800412c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800412a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b40      	cmp	r3, #64	; 0x40
 8004138:	d007      	beq.n	800414a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004152:	d152      	bne.n	80041fa <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_SPI_Transmit+0xee>
 800415c:	8b7b      	ldrh	r3, [r7, #26]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d145      	bne.n	80041ee <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	881a      	ldrh	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	1c9a      	adds	r2, r3, #2
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004186:	e032      	b.n	80041ee <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d112      	bne.n	80041bc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	881a      	ldrh	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	1c9a      	adds	r2, r3, #2
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80041ba:	e018      	b.n	80041ee <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041bc:	f7fd ff86 	bl	80020cc <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d803      	bhi.n	80041d4 <HAL_SPI_Transmit+0x160>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d102      	bne.n	80041da <HAL_SPI_Transmit+0x166>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e082      	b.n	80042f4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1c7      	bne.n	8004188 <HAL_SPI_Transmit+0x114>
 80041f8:	e053      	b.n	80042a2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_SPI_Transmit+0x194>
 8004202:	8b7b      	ldrh	r3, [r7, #26]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d147      	bne.n	8004298 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	7812      	ldrb	r2, [r2, #0]
 8004214:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800422e:	e033      	b.n	8004298 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d113      	bne.n	8004266 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	86da      	strh	r2, [r3, #54]	; 0x36
 8004264:	e018      	b.n	8004298 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004266:	f7fd ff31 	bl	80020cc <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d803      	bhi.n	800427e <HAL_SPI_Transmit+0x20a>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d102      	bne.n	8004284 <HAL_SPI_Transmit+0x210>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d109      	bne.n	8004298 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e02d      	b.n	80042f4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1c6      	bne.n	8004230 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	6839      	ldr	r1, [r7, #0]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f8b0 	bl	800440c <SPI_EndRxTxTransaction>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80042f2:	2300      	movs	r3, #0
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800430c:	f7fd fede 	bl	80020cc <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	4413      	add	r3, r2
 800431a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800431c:	f7fd fed6 	bl	80020cc <HAL_GetTick>
 8004320:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004322:	4b39      	ldr	r3, [pc, #228]	; (8004408 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	015b      	lsls	r3, r3, #5
 8004328:	0d1b      	lsrs	r3, r3, #20
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	fb02 f303 	mul.w	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004332:	e054      	b.n	80043de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d050      	beq.n	80043de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800433c:	f7fd fec6 	bl	80020cc <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	429a      	cmp	r2, r3
 800434a:	d902      	bls.n	8004352 <SPI_WaitFlagStateUntilTimeout+0x56>
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d13d      	bne.n	80043ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004360:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800436a:	d111      	bne.n	8004390 <SPI_WaitFlagStateUntilTimeout+0x94>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004374:	d004      	beq.n	8004380 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437e:	d107      	bne.n	8004390 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800438e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004398:	d10f      	bne.n	80043ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e017      	b.n	80043fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	3b01      	subs	r3, #1
 80043dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4013      	ands	r3, r2
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d19b      	bne.n	8004334 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000004 	.word	0x20000004

0800440c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2201      	movs	r2, #1
 8004420:	2102      	movs	r1, #2
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7ff ff6a 	bl	80042fc <SPI_WaitFlagStateUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	f043 0220 	orr.w	r2, r3, #32
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e013      	b.n	8004466 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2200      	movs	r2, #0
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f7ff ff57 	bl	80042fc <SPI_WaitFlagStateUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	f043 0220 	orr.w	r2, r3, #32
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e000      	b.n	8004466 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <__errno>:
 8004470:	4b01      	ldr	r3, [pc, #4]	; (8004478 <__errno+0x8>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000010 	.word	0x20000010

0800447c <__libc_init_array>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	2600      	movs	r6, #0
 8004480:	4d0c      	ldr	r5, [pc, #48]	; (80044b4 <__libc_init_array+0x38>)
 8004482:	4c0d      	ldr	r4, [pc, #52]	; (80044b8 <__libc_init_array+0x3c>)
 8004484:	1b64      	subs	r4, r4, r5
 8004486:	10a4      	asrs	r4, r4, #2
 8004488:	42a6      	cmp	r6, r4
 800448a:	d109      	bne.n	80044a0 <__libc_init_array+0x24>
 800448c:	f002 fece 	bl	800722c <_init>
 8004490:	2600      	movs	r6, #0
 8004492:	4d0a      	ldr	r5, [pc, #40]	; (80044bc <__libc_init_array+0x40>)
 8004494:	4c0a      	ldr	r4, [pc, #40]	; (80044c0 <__libc_init_array+0x44>)
 8004496:	1b64      	subs	r4, r4, r5
 8004498:	10a4      	asrs	r4, r4, #2
 800449a:	42a6      	cmp	r6, r4
 800449c:	d105      	bne.n	80044aa <__libc_init_array+0x2e>
 800449e:	bd70      	pop	{r4, r5, r6, pc}
 80044a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a4:	4798      	blx	r3
 80044a6:	3601      	adds	r6, #1
 80044a8:	e7ee      	b.n	8004488 <__libc_init_array+0xc>
 80044aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ae:	4798      	blx	r3
 80044b0:	3601      	adds	r6, #1
 80044b2:	e7f2      	b.n	800449a <__libc_init_array+0x1e>
 80044b4:	08007e34 	.word	0x08007e34
 80044b8:	08007e34 	.word	0x08007e34
 80044bc:	08007e34 	.word	0x08007e34
 80044c0:	08007e38 	.word	0x08007e38

080044c4 <memset>:
 80044c4:	4603      	mov	r3, r0
 80044c6:	4402      	add	r2, r0
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d100      	bne.n	80044ce <memset+0xa>
 80044cc:	4770      	bx	lr
 80044ce:	f803 1b01 	strb.w	r1, [r3], #1
 80044d2:	e7f9      	b.n	80044c8 <memset+0x4>

080044d4 <__cvt>:
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044da:	461f      	mov	r7, r3
 80044dc:	bfbb      	ittet	lt
 80044de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80044e2:	461f      	movlt	r7, r3
 80044e4:	2300      	movge	r3, #0
 80044e6:	232d      	movlt	r3, #45	; 0x2d
 80044e8:	b088      	sub	sp, #32
 80044ea:	4614      	mov	r4, r2
 80044ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80044f0:	7013      	strb	r3, [r2, #0]
 80044f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80044f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80044f8:	f023 0820 	bic.w	r8, r3, #32
 80044fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004500:	d005      	beq.n	800450e <__cvt+0x3a>
 8004502:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004506:	d100      	bne.n	800450a <__cvt+0x36>
 8004508:	3501      	adds	r5, #1
 800450a:	2302      	movs	r3, #2
 800450c:	e000      	b.n	8004510 <__cvt+0x3c>
 800450e:	2303      	movs	r3, #3
 8004510:	aa07      	add	r2, sp, #28
 8004512:	9204      	str	r2, [sp, #16]
 8004514:	aa06      	add	r2, sp, #24
 8004516:	e9cd a202 	strd	sl, r2, [sp, #8]
 800451a:	e9cd 3500 	strd	r3, r5, [sp]
 800451e:	4622      	mov	r2, r4
 8004520:	463b      	mov	r3, r7
 8004522:	f000 fcf9 	bl	8004f18 <_dtoa_r>
 8004526:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800452a:	4606      	mov	r6, r0
 800452c:	d102      	bne.n	8004534 <__cvt+0x60>
 800452e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004530:	07db      	lsls	r3, r3, #31
 8004532:	d522      	bpl.n	800457a <__cvt+0xa6>
 8004534:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004538:	eb06 0905 	add.w	r9, r6, r5
 800453c:	d110      	bne.n	8004560 <__cvt+0x8c>
 800453e:	7833      	ldrb	r3, [r6, #0]
 8004540:	2b30      	cmp	r3, #48	; 0x30
 8004542:	d10a      	bne.n	800455a <__cvt+0x86>
 8004544:	2200      	movs	r2, #0
 8004546:	2300      	movs	r3, #0
 8004548:	4620      	mov	r0, r4
 800454a:	4639      	mov	r1, r7
 800454c:	f7fc fa2c 	bl	80009a8 <__aeabi_dcmpeq>
 8004550:	b918      	cbnz	r0, 800455a <__cvt+0x86>
 8004552:	f1c5 0501 	rsb	r5, r5, #1
 8004556:	f8ca 5000 	str.w	r5, [sl]
 800455a:	f8da 3000 	ldr.w	r3, [sl]
 800455e:	4499      	add	r9, r3
 8004560:	2200      	movs	r2, #0
 8004562:	2300      	movs	r3, #0
 8004564:	4620      	mov	r0, r4
 8004566:	4639      	mov	r1, r7
 8004568:	f7fc fa1e 	bl	80009a8 <__aeabi_dcmpeq>
 800456c:	b108      	cbz	r0, 8004572 <__cvt+0x9e>
 800456e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004572:	2230      	movs	r2, #48	; 0x30
 8004574:	9b07      	ldr	r3, [sp, #28]
 8004576:	454b      	cmp	r3, r9
 8004578:	d307      	bcc.n	800458a <__cvt+0xb6>
 800457a:	4630      	mov	r0, r6
 800457c:	9b07      	ldr	r3, [sp, #28]
 800457e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004580:	1b9b      	subs	r3, r3, r6
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	b008      	add	sp, #32
 8004586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458a:	1c59      	adds	r1, r3, #1
 800458c:	9107      	str	r1, [sp, #28]
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e7f0      	b.n	8004574 <__cvt+0xa0>

08004592 <__exponent>:
 8004592:	4603      	mov	r3, r0
 8004594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004596:	2900      	cmp	r1, #0
 8004598:	f803 2b02 	strb.w	r2, [r3], #2
 800459c:	bfb6      	itet	lt
 800459e:	222d      	movlt	r2, #45	; 0x2d
 80045a0:	222b      	movge	r2, #43	; 0x2b
 80045a2:	4249      	neglt	r1, r1
 80045a4:	2909      	cmp	r1, #9
 80045a6:	7042      	strb	r2, [r0, #1]
 80045a8:	dd2b      	ble.n	8004602 <__exponent+0x70>
 80045aa:	f10d 0407 	add.w	r4, sp, #7
 80045ae:	46a4      	mov	ip, r4
 80045b0:	270a      	movs	r7, #10
 80045b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80045b6:	460a      	mov	r2, r1
 80045b8:	46a6      	mov	lr, r4
 80045ba:	fb07 1516 	mls	r5, r7, r6, r1
 80045be:	2a63      	cmp	r2, #99	; 0x63
 80045c0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80045c4:	4631      	mov	r1, r6
 80045c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80045ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045ce:	dcf0      	bgt.n	80045b2 <__exponent+0x20>
 80045d0:	3130      	adds	r1, #48	; 0x30
 80045d2:	f1ae 0502 	sub.w	r5, lr, #2
 80045d6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045da:	4629      	mov	r1, r5
 80045dc:	1c44      	adds	r4, r0, #1
 80045de:	4561      	cmp	r1, ip
 80045e0:	d30a      	bcc.n	80045f8 <__exponent+0x66>
 80045e2:	f10d 0209 	add.w	r2, sp, #9
 80045e6:	eba2 020e 	sub.w	r2, r2, lr
 80045ea:	4565      	cmp	r5, ip
 80045ec:	bf88      	it	hi
 80045ee:	2200      	movhi	r2, #0
 80045f0:	4413      	add	r3, r2
 80045f2:	1a18      	subs	r0, r3, r0
 80045f4:	b003      	add	sp, #12
 80045f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045fc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004600:	e7ed      	b.n	80045de <__exponent+0x4c>
 8004602:	2330      	movs	r3, #48	; 0x30
 8004604:	3130      	adds	r1, #48	; 0x30
 8004606:	7083      	strb	r3, [r0, #2]
 8004608:	70c1      	strb	r1, [r0, #3]
 800460a:	1d03      	adds	r3, r0, #4
 800460c:	e7f1      	b.n	80045f2 <__exponent+0x60>
	...

08004610 <_printf_float>:
 8004610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004614:	b091      	sub	sp, #68	; 0x44
 8004616:	460c      	mov	r4, r1
 8004618:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800461c:	4616      	mov	r6, r2
 800461e:	461f      	mov	r7, r3
 8004620:	4605      	mov	r5, r0
 8004622:	f001 fa67 	bl	8005af4 <_localeconv_r>
 8004626:	6803      	ldr	r3, [r0, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	9309      	str	r3, [sp, #36]	; 0x24
 800462c:	f7fb fd90 	bl	8000150 <strlen>
 8004630:	2300      	movs	r3, #0
 8004632:	930e      	str	r3, [sp, #56]	; 0x38
 8004634:	f8d8 3000 	ldr.w	r3, [r8]
 8004638:	900a      	str	r0, [sp, #40]	; 0x28
 800463a:	3307      	adds	r3, #7
 800463c:	f023 0307 	bic.w	r3, r3, #7
 8004640:	f103 0208 	add.w	r2, r3, #8
 8004644:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004648:	f8d4 b000 	ldr.w	fp, [r4]
 800464c:	f8c8 2000 	str.w	r2, [r8]
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004658:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800465c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004660:	930b      	str	r3, [sp, #44]	; 0x2c
 8004662:	f04f 32ff 	mov.w	r2, #4294967295
 8004666:	4640      	mov	r0, r8
 8004668:	4b9c      	ldr	r3, [pc, #624]	; (80048dc <_printf_float+0x2cc>)
 800466a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800466c:	f7fc f9ce 	bl	8000a0c <__aeabi_dcmpun>
 8004670:	bb70      	cbnz	r0, 80046d0 <_printf_float+0xc0>
 8004672:	f04f 32ff 	mov.w	r2, #4294967295
 8004676:	4640      	mov	r0, r8
 8004678:	4b98      	ldr	r3, [pc, #608]	; (80048dc <_printf_float+0x2cc>)
 800467a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800467c:	f7fc f9a8 	bl	80009d0 <__aeabi_dcmple>
 8004680:	bb30      	cbnz	r0, 80046d0 <_printf_float+0xc0>
 8004682:	2200      	movs	r2, #0
 8004684:	2300      	movs	r3, #0
 8004686:	4640      	mov	r0, r8
 8004688:	4651      	mov	r1, sl
 800468a:	f7fc f997 	bl	80009bc <__aeabi_dcmplt>
 800468e:	b110      	cbz	r0, 8004696 <_printf_float+0x86>
 8004690:	232d      	movs	r3, #45	; 0x2d
 8004692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004696:	4b92      	ldr	r3, [pc, #584]	; (80048e0 <_printf_float+0x2d0>)
 8004698:	4892      	ldr	r0, [pc, #584]	; (80048e4 <_printf_float+0x2d4>)
 800469a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800469e:	bf94      	ite	ls
 80046a0:	4698      	movls	r8, r3
 80046a2:	4680      	movhi	r8, r0
 80046a4:	2303      	movs	r3, #3
 80046a6:	f04f 0a00 	mov.w	sl, #0
 80046aa:	6123      	str	r3, [r4, #16]
 80046ac:	f02b 0304 	bic.w	r3, fp, #4
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	4633      	mov	r3, r6
 80046b4:	4621      	mov	r1, r4
 80046b6:	4628      	mov	r0, r5
 80046b8:	9700      	str	r7, [sp, #0]
 80046ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80046bc:	f000 f9d4 	bl	8004a68 <_printf_common>
 80046c0:	3001      	adds	r0, #1
 80046c2:	f040 8090 	bne.w	80047e6 <_printf_float+0x1d6>
 80046c6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ca:	b011      	add	sp, #68	; 0x44
 80046cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d0:	4642      	mov	r2, r8
 80046d2:	4653      	mov	r3, sl
 80046d4:	4640      	mov	r0, r8
 80046d6:	4651      	mov	r1, sl
 80046d8:	f7fc f998 	bl	8000a0c <__aeabi_dcmpun>
 80046dc:	b148      	cbz	r0, 80046f2 <_printf_float+0xe2>
 80046de:	f1ba 0f00 	cmp.w	sl, #0
 80046e2:	bfb8      	it	lt
 80046e4:	232d      	movlt	r3, #45	; 0x2d
 80046e6:	4880      	ldr	r0, [pc, #512]	; (80048e8 <_printf_float+0x2d8>)
 80046e8:	bfb8      	it	lt
 80046ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046ee:	4b7f      	ldr	r3, [pc, #508]	; (80048ec <_printf_float+0x2dc>)
 80046f0:	e7d3      	b.n	800469a <_printf_float+0x8a>
 80046f2:	6863      	ldr	r3, [r4, #4]
 80046f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	d142      	bne.n	8004782 <_printf_float+0x172>
 80046fc:	2306      	movs	r3, #6
 80046fe:	6063      	str	r3, [r4, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	9206      	str	r2, [sp, #24]
 8004704:	aa0e      	add	r2, sp, #56	; 0x38
 8004706:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800470a:	aa0d      	add	r2, sp, #52	; 0x34
 800470c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004710:	9203      	str	r2, [sp, #12]
 8004712:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004716:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	6863      	ldr	r3, [r4, #4]
 800471e:	4642      	mov	r2, r8
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	4628      	mov	r0, r5
 8004724:	4653      	mov	r3, sl
 8004726:	910b      	str	r1, [sp, #44]	; 0x2c
 8004728:	f7ff fed4 	bl	80044d4 <__cvt>
 800472c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800472e:	4680      	mov	r8, r0
 8004730:	2947      	cmp	r1, #71	; 0x47
 8004732:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004734:	d108      	bne.n	8004748 <_printf_float+0x138>
 8004736:	1cc8      	adds	r0, r1, #3
 8004738:	db02      	blt.n	8004740 <_printf_float+0x130>
 800473a:	6863      	ldr	r3, [r4, #4]
 800473c:	4299      	cmp	r1, r3
 800473e:	dd40      	ble.n	80047c2 <_printf_float+0x1b2>
 8004740:	f1a9 0902 	sub.w	r9, r9, #2
 8004744:	fa5f f989 	uxtb.w	r9, r9
 8004748:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800474c:	d81f      	bhi.n	800478e <_printf_float+0x17e>
 800474e:	464a      	mov	r2, r9
 8004750:	3901      	subs	r1, #1
 8004752:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004756:	910d      	str	r1, [sp, #52]	; 0x34
 8004758:	f7ff ff1b 	bl	8004592 <__exponent>
 800475c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800475e:	4682      	mov	sl, r0
 8004760:	1813      	adds	r3, r2, r0
 8004762:	2a01      	cmp	r2, #1
 8004764:	6123      	str	r3, [r4, #16]
 8004766:	dc02      	bgt.n	800476e <_printf_float+0x15e>
 8004768:	6822      	ldr	r2, [r4, #0]
 800476a:	07d2      	lsls	r2, r2, #31
 800476c:	d501      	bpl.n	8004772 <_printf_float+0x162>
 800476e:	3301      	adds	r3, #1
 8004770:	6123      	str	r3, [r4, #16]
 8004772:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004776:	2b00      	cmp	r3, #0
 8004778:	d09b      	beq.n	80046b2 <_printf_float+0xa2>
 800477a:	232d      	movs	r3, #45	; 0x2d
 800477c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004780:	e797      	b.n	80046b2 <_printf_float+0xa2>
 8004782:	2947      	cmp	r1, #71	; 0x47
 8004784:	d1bc      	bne.n	8004700 <_printf_float+0xf0>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1ba      	bne.n	8004700 <_printf_float+0xf0>
 800478a:	2301      	movs	r3, #1
 800478c:	e7b7      	b.n	80046fe <_printf_float+0xee>
 800478e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004792:	d118      	bne.n	80047c6 <_printf_float+0x1b6>
 8004794:	2900      	cmp	r1, #0
 8004796:	6863      	ldr	r3, [r4, #4]
 8004798:	dd0b      	ble.n	80047b2 <_printf_float+0x1a2>
 800479a:	6121      	str	r1, [r4, #16]
 800479c:	b913      	cbnz	r3, 80047a4 <_printf_float+0x194>
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	07d0      	lsls	r0, r2, #31
 80047a2:	d502      	bpl.n	80047aa <_printf_float+0x19a>
 80047a4:	3301      	adds	r3, #1
 80047a6:	440b      	add	r3, r1
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	f04f 0a00 	mov.w	sl, #0
 80047ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80047b0:	e7df      	b.n	8004772 <_printf_float+0x162>
 80047b2:	b913      	cbnz	r3, 80047ba <_printf_float+0x1aa>
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	07d2      	lsls	r2, r2, #31
 80047b8:	d501      	bpl.n	80047be <_printf_float+0x1ae>
 80047ba:	3302      	adds	r3, #2
 80047bc:	e7f4      	b.n	80047a8 <_printf_float+0x198>
 80047be:	2301      	movs	r3, #1
 80047c0:	e7f2      	b.n	80047a8 <_printf_float+0x198>
 80047c2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80047c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047c8:	4299      	cmp	r1, r3
 80047ca:	db05      	blt.n	80047d8 <_printf_float+0x1c8>
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	6121      	str	r1, [r4, #16]
 80047d0:	07d8      	lsls	r0, r3, #31
 80047d2:	d5ea      	bpl.n	80047aa <_printf_float+0x19a>
 80047d4:	1c4b      	adds	r3, r1, #1
 80047d6:	e7e7      	b.n	80047a8 <_printf_float+0x198>
 80047d8:	2900      	cmp	r1, #0
 80047da:	bfcc      	ite	gt
 80047dc:	2201      	movgt	r2, #1
 80047de:	f1c1 0202 	rsble	r2, r1, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	e7e0      	b.n	80047a8 <_printf_float+0x198>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	055a      	lsls	r2, r3, #21
 80047ea:	d407      	bmi.n	80047fc <_printf_float+0x1ec>
 80047ec:	6923      	ldr	r3, [r4, #16]
 80047ee:	4642      	mov	r2, r8
 80047f0:	4631      	mov	r1, r6
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b8      	blx	r7
 80047f6:	3001      	adds	r0, #1
 80047f8:	d12b      	bne.n	8004852 <_printf_float+0x242>
 80047fa:	e764      	b.n	80046c6 <_printf_float+0xb6>
 80047fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004800:	f240 80dd 	bls.w	80049be <_printf_float+0x3ae>
 8004804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004808:	2200      	movs	r2, #0
 800480a:	2300      	movs	r3, #0
 800480c:	f7fc f8cc 	bl	80009a8 <__aeabi_dcmpeq>
 8004810:	2800      	cmp	r0, #0
 8004812:	d033      	beq.n	800487c <_printf_float+0x26c>
 8004814:	2301      	movs	r3, #1
 8004816:	4631      	mov	r1, r6
 8004818:	4628      	mov	r0, r5
 800481a:	4a35      	ldr	r2, [pc, #212]	; (80048f0 <_printf_float+0x2e0>)
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	f43f af51 	beq.w	80046c6 <_printf_float+0xb6>
 8004824:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004828:	429a      	cmp	r2, r3
 800482a:	db02      	blt.n	8004832 <_printf_float+0x222>
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	07d8      	lsls	r0, r3, #31
 8004830:	d50f      	bpl.n	8004852 <_printf_float+0x242>
 8004832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004836:	4631      	mov	r1, r6
 8004838:	4628      	mov	r0, r5
 800483a:	47b8      	blx	r7
 800483c:	3001      	adds	r0, #1
 800483e:	f43f af42 	beq.w	80046c6 <_printf_float+0xb6>
 8004842:	f04f 0800 	mov.w	r8, #0
 8004846:	f104 091a 	add.w	r9, r4, #26
 800484a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800484c:	3b01      	subs	r3, #1
 800484e:	4543      	cmp	r3, r8
 8004850:	dc09      	bgt.n	8004866 <_printf_float+0x256>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	079b      	lsls	r3, r3, #30
 8004856:	f100 8102 	bmi.w	8004a5e <_printf_float+0x44e>
 800485a:	68e0      	ldr	r0, [r4, #12]
 800485c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800485e:	4298      	cmp	r0, r3
 8004860:	bfb8      	it	lt
 8004862:	4618      	movlt	r0, r3
 8004864:	e731      	b.n	80046ca <_printf_float+0xba>
 8004866:	2301      	movs	r3, #1
 8004868:	464a      	mov	r2, r9
 800486a:	4631      	mov	r1, r6
 800486c:	4628      	mov	r0, r5
 800486e:	47b8      	blx	r7
 8004870:	3001      	adds	r0, #1
 8004872:	f43f af28 	beq.w	80046c6 <_printf_float+0xb6>
 8004876:	f108 0801 	add.w	r8, r8, #1
 800487a:	e7e6      	b.n	800484a <_printf_float+0x23a>
 800487c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800487e:	2b00      	cmp	r3, #0
 8004880:	dc38      	bgt.n	80048f4 <_printf_float+0x2e4>
 8004882:	2301      	movs	r3, #1
 8004884:	4631      	mov	r1, r6
 8004886:	4628      	mov	r0, r5
 8004888:	4a19      	ldr	r2, [pc, #100]	; (80048f0 <_printf_float+0x2e0>)
 800488a:	47b8      	blx	r7
 800488c:	3001      	adds	r0, #1
 800488e:	f43f af1a 	beq.w	80046c6 <_printf_float+0xb6>
 8004892:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004896:	4313      	orrs	r3, r2
 8004898:	d102      	bne.n	80048a0 <_printf_float+0x290>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	07d9      	lsls	r1, r3, #31
 800489e:	d5d8      	bpl.n	8004852 <_printf_float+0x242>
 80048a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048a4:	4631      	mov	r1, r6
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b8      	blx	r7
 80048aa:	3001      	adds	r0, #1
 80048ac:	f43f af0b 	beq.w	80046c6 <_printf_float+0xb6>
 80048b0:	f04f 0900 	mov.w	r9, #0
 80048b4:	f104 0a1a 	add.w	sl, r4, #26
 80048b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048ba:	425b      	negs	r3, r3
 80048bc:	454b      	cmp	r3, r9
 80048be:	dc01      	bgt.n	80048c4 <_printf_float+0x2b4>
 80048c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048c2:	e794      	b.n	80047ee <_printf_float+0x1de>
 80048c4:	2301      	movs	r3, #1
 80048c6:	4652      	mov	r2, sl
 80048c8:	4631      	mov	r1, r6
 80048ca:	4628      	mov	r0, r5
 80048cc:	47b8      	blx	r7
 80048ce:	3001      	adds	r0, #1
 80048d0:	f43f aef9 	beq.w	80046c6 <_printf_float+0xb6>
 80048d4:	f109 0901 	add.w	r9, r9, #1
 80048d8:	e7ee      	b.n	80048b8 <_printf_float+0x2a8>
 80048da:	bf00      	nop
 80048dc:	7fefffff 	.word	0x7fefffff
 80048e0:	08007a58 	.word	0x08007a58
 80048e4:	08007a5c 	.word	0x08007a5c
 80048e8:	08007a64 	.word	0x08007a64
 80048ec:	08007a60 	.word	0x08007a60
 80048f0:	08007a68 	.word	0x08007a68
 80048f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048f8:	429a      	cmp	r2, r3
 80048fa:	bfa8      	it	ge
 80048fc:	461a      	movge	r2, r3
 80048fe:	2a00      	cmp	r2, #0
 8004900:	4691      	mov	r9, r2
 8004902:	dc37      	bgt.n	8004974 <_printf_float+0x364>
 8004904:	f04f 0b00 	mov.w	fp, #0
 8004908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800490c:	f104 021a 	add.w	r2, r4, #26
 8004910:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004914:	ebaa 0309 	sub.w	r3, sl, r9
 8004918:	455b      	cmp	r3, fp
 800491a:	dc33      	bgt.n	8004984 <_printf_float+0x374>
 800491c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004920:	429a      	cmp	r2, r3
 8004922:	db3b      	blt.n	800499c <_printf_float+0x38c>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	07da      	lsls	r2, r3, #31
 8004928:	d438      	bmi.n	800499c <_printf_float+0x38c>
 800492a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800492c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800492e:	eba2 030a 	sub.w	r3, r2, sl
 8004932:	eba2 0901 	sub.w	r9, r2, r1
 8004936:	4599      	cmp	r9, r3
 8004938:	bfa8      	it	ge
 800493a:	4699      	movge	r9, r3
 800493c:	f1b9 0f00 	cmp.w	r9, #0
 8004940:	dc34      	bgt.n	80049ac <_printf_float+0x39c>
 8004942:	f04f 0800 	mov.w	r8, #0
 8004946:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800494a:	f104 0a1a 	add.w	sl, r4, #26
 800494e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	eba3 0309 	sub.w	r3, r3, r9
 8004958:	4543      	cmp	r3, r8
 800495a:	f77f af7a 	ble.w	8004852 <_printf_float+0x242>
 800495e:	2301      	movs	r3, #1
 8004960:	4652      	mov	r2, sl
 8004962:	4631      	mov	r1, r6
 8004964:	4628      	mov	r0, r5
 8004966:	47b8      	blx	r7
 8004968:	3001      	adds	r0, #1
 800496a:	f43f aeac 	beq.w	80046c6 <_printf_float+0xb6>
 800496e:	f108 0801 	add.w	r8, r8, #1
 8004972:	e7ec      	b.n	800494e <_printf_float+0x33e>
 8004974:	4613      	mov	r3, r2
 8004976:	4631      	mov	r1, r6
 8004978:	4642      	mov	r2, r8
 800497a:	4628      	mov	r0, r5
 800497c:	47b8      	blx	r7
 800497e:	3001      	adds	r0, #1
 8004980:	d1c0      	bne.n	8004904 <_printf_float+0x2f4>
 8004982:	e6a0      	b.n	80046c6 <_printf_float+0xb6>
 8004984:	2301      	movs	r3, #1
 8004986:	4631      	mov	r1, r6
 8004988:	4628      	mov	r0, r5
 800498a:	920b      	str	r2, [sp, #44]	; 0x2c
 800498c:	47b8      	blx	r7
 800498e:	3001      	adds	r0, #1
 8004990:	f43f ae99 	beq.w	80046c6 <_printf_float+0xb6>
 8004994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004996:	f10b 0b01 	add.w	fp, fp, #1
 800499a:	e7b9      	b.n	8004910 <_printf_float+0x300>
 800499c:	4631      	mov	r1, r6
 800499e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049a2:	4628      	mov	r0, r5
 80049a4:	47b8      	blx	r7
 80049a6:	3001      	adds	r0, #1
 80049a8:	d1bf      	bne.n	800492a <_printf_float+0x31a>
 80049aa:	e68c      	b.n	80046c6 <_printf_float+0xb6>
 80049ac:	464b      	mov	r3, r9
 80049ae:	4631      	mov	r1, r6
 80049b0:	4628      	mov	r0, r5
 80049b2:	eb08 020a 	add.w	r2, r8, sl
 80049b6:	47b8      	blx	r7
 80049b8:	3001      	adds	r0, #1
 80049ba:	d1c2      	bne.n	8004942 <_printf_float+0x332>
 80049bc:	e683      	b.n	80046c6 <_printf_float+0xb6>
 80049be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049c0:	2a01      	cmp	r2, #1
 80049c2:	dc01      	bgt.n	80049c8 <_printf_float+0x3b8>
 80049c4:	07db      	lsls	r3, r3, #31
 80049c6:	d537      	bpl.n	8004a38 <_printf_float+0x428>
 80049c8:	2301      	movs	r3, #1
 80049ca:	4642      	mov	r2, r8
 80049cc:	4631      	mov	r1, r6
 80049ce:	4628      	mov	r0, r5
 80049d0:	47b8      	blx	r7
 80049d2:	3001      	adds	r0, #1
 80049d4:	f43f ae77 	beq.w	80046c6 <_printf_float+0xb6>
 80049d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049dc:	4631      	mov	r1, r6
 80049de:	4628      	mov	r0, r5
 80049e0:	47b8      	blx	r7
 80049e2:	3001      	adds	r0, #1
 80049e4:	f43f ae6f 	beq.w	80046c6 <_printf_float+0xb6>
 80049e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049ec:	2200      	movs	r2, #0
 80049ee:	2300      	movs	r3, #0
 80049f0:	f7fb ffda 	bl	80009a8 <__aeabi_dcmpeq>
 80049f4:	b9d8      	cbnz	r0, 8004a2e <_printf_float+0x41e>
 80049f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049f8:	f108 0201 	add.w	r2, r8, #1
 80049fc:	3b01      	subs	r3, #1
 80049fe:	4631      	mov	r1, r6
 8004a00:	4628      	mov	r0, r5
 8004a02:	47b8      	blx	r7
 8004a04:	3001      	adds	r0, #1
 8004a06:	d10e      	bne.n	8004a26 <_printf_float+0x416>
 8004a08:	e65d      	b.n	80046c6 <_printf_float+0xb6>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	464a      	mov	r2, r9
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b8      	blx	r7
 8004a14:	3001      	adds	r0, #1
 8004a16:	f43f ae56 	beq.w	80046c6 <_printf_float+0xb6>
 8004a1a:	f108 0801 	add.w	r8, r8, #1
 8004a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a20:	3b01      	subs	r3, #1
 8004a22:	4543      	cmp	r3, r8
 8004a24:	dcf1      	bgt.n	8004a0a <_printf_float+0x3fa>
 8004a26:	4653      	mov	r3, sl
 8004a28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a2c:	e6e0      	b.n	80047f0 <_printf_float+0x1e0>
 8004a2e:	f04f 0800 	mov.w	r8, #0
 8004a32:	f104 091a 	add.w	r9, r4, #26
 8004a36:	e7f2      	b.n	8004a1e <_printf_float+0x40e>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	4642      	mov	r2, r8
 8004a3c:	e7df      	b.n	80049fe <_printf_float+0x3ee>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	464a      	mov	r2, r9
 8004a42:	4631      	mov	r1, r6
 8004a44:	4628      	mov	r0, r5
 8004a46:	47b8      	blx	r7
 8004a48:	3001      	adds	r0, #1
 8004a4a:	f43f ae3c 	beq.w	80046c6 <_printf_float+0xb6>
 8004a4e:	f108 0801 	add.w	r8, r8, #1
 8004a52:	68e3      	ldr	r3, [r4, #12]
 8004a54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a56:	1a5b      	subs	r3, r3, r1
 8004a58:	4543      	cmp	r3, r8
 8004a5a:	dcf0      	bgt.n	8004a3e <_printf_float+0x42e>
 8004a5c:	e6fd      	b.n	800485a <_printf_float+0x24a>
 8004a5e:	f04f 0800 	mov.w	r8, #0
 8004a62:	f104 0919 	add.w	r9, r4, #25
 8004a66:	e7f4      	b.n	8004a52 <_printf_float+0x442>

08004a68 <_printf_common>:
 8004a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	4616      	mov	r6, r2
 8004a6e:	4699      	mov	r9, r3
 8004a70:	688a      	ldr	r2, [r1, #8]
 8004a72:	690b      	ldr	r3, [r1, #16]
 8004a74:	4607      	mov	r7, r0
 8004a76:	4293      	cmp	r3, r2
 8004a78:	bfb8      	it	lt
 8004a7a:	4613      	movlt	r3, r2
 8004a7c:	6033      	str	r3, [r6, #0]
 8004a7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a82:	460c      	mov	r4, r1
 8004a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a88:	b10a      	cbz	r2, 8004a8e <_printf_common+0x26>
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	6033      	str	r3, [r6, #0]
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	0699      	lsls	r1, r3, #26
 8004a92:	bf42      	ittt	mi
 8004a94:	6833      	ldrmi	r3, [r6, #0]
 8004a96:	3302      	addmi	r3, #2
 8004a98:	6033      	strmi	r3, [r6, #0]
 8004a9a:	6825      	ldr	r5, [r4, #0]
 8004a9c:	f015 0506 	ands.w	r5, r5, #6
 8004aa0:	d106      	bne.n	8004ab0 <_printf_common+0x48>
 8004aa2:	f104 0a19 	add.w	sl, r4, #25
 8004aa6:	68e3      	ldr	r3, [r4, #12]
 8004aa8:	6832      	ldr	r2, [r6, #0]
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	42ab      	cmp	r3, r5
 8004aae:	dc28      	bgt.n	8004b02 <_printf_common+0x9a>
 8004ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ab4:	1e13      	subs	r3, r2, #0
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	bf18      	it	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	0692      	lsls	r2, r2, #26
 8004abe:	d42d      	bmi.n	8004b1c <_printf_common+0xb4>
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac8:	47c0      	blx	r8
 8004aca:	3001      	adds	r0, #1
 8004acc:	d020      	beq.n	8004b10 <_printf_common+0xa8>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	68e5      	ldr	r5, [r4, #12]
 8004ad2:	f003 0306 	and.w	r3, r3, #6
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	bf18      	it	ne
 8004ada:	2500      	movne	r5, #0
 8004adc:	6832      	ldr	r2, [r6, #0]
 8004ade:	f04f 0600 	mov.w	r6, #0
 8004ae2:	68a3      	ldr	r3, [r4, #8]
 8004ae4:	bf08      	it	eq
 8004ae6:	1aad      	subeq	r5, r5, r2
 8004ae8:	6922      	ldr	r2, [r4, #16]
 8004aea:	bf08      	it	eq
 8004aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004af0:	4293      	cmp	r3, r2
 8004af2:	bfc4      	itt	gt
 8004af4:	1a9b      	subgt	r3, r3, r2
 8004af6:	18ed      	addgt	r5, r5, r3
 8004af8:	341a      	adds	r4, #26
 8004afa:	42b5      	cmp	r5, r6
 8004afc:	d11a      	bne.n	8004b34 <_printf_common+0xcc>
 8004afe:	2000      	movs	r0, #0
 8004b00:	e008      	b.n	8004b14 <_printf_common+0xac>
 8004b02:	2301      	movs	r3, #1
 8004b04:	4652      	mov	r2, sl
 8004b06:	4649      	mov	r1, r9
 8004b08:	4638      	mov	r0, r7
 8004b0a:	47c0      	blx	r8
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d103      	bne.n	8004b18 <_printf_common+0xb0>
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b18:	3501      	adds	r5, #1
 8004b1a:	e7c4      	b.n	8004aa6 <_printf_common+0x3e>
 8004b1c:	2030      	movs	r0, #48	; 0x30
 8004b1e:	18e1      	adds	r1, r4, r3
 8004b20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b2a:	4422      	add	r2, r4
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b32:	e7c5      	b.n	8004ac0 <_printf_common+0x58>
 8004b34:	2301      	movs	r3, #1
 8004b36:	4622      	mov	r2, r4
 8004b38:	4649      	mov	r1, r9
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	47c0      	blx	r8
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d0e6      	beq.n	8004b10 <_printf_common+0xa8>
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7d9      	b.n	8004afa <_printf_common+0x92>
	...

08004b48 <_printf_i>:
 8004b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	7e27      	ldrb	r7, [r4, #24]
 8004b50:	4691      	mov	r9, r2
 8004b52:	2f78      	cmp	r7, #120	; 0x78
 8004b54:	4680      	mov	r8, r0
 8004b56:	469a      	mov	sl, r3
 8004b58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b5e:	d807      	bhi.n	8004b70 <_printf_i+0x28>
 8004b60:	2f62      	cmp	r7, #98	; 0x62
 8004b62:	d80a      	bhi.n	8004b7a <_printf_i+0x32>
 8004b64:	2f00      	cmp	r7, #0
 8004b66:	f000 80d9 	beq.w	8004d1c <_printf_i+0x1d4>
 8004b6a:	2f58      	cmp	r7, #88	; 0x58
 8004b6c:	f000 80a4 	beq.w	8004cb8 <_printf_i+0x170>
 8004b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b78:	e03a      	b.n	8004bf0 <_printf_i+0xa8>
 8004b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b7e:	2b15      	cmp	r3, #21
 8004b80:	d8f6      	bhi.n	8004b70 <_printf_i+0x28>
 8004b82:	a001      	add	r0, pc, #4	; (adr r0, 8004b88 <_printf_i+0x40>)
 8004b84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b88:	08004be1 	.word	0x08004be1
 8004b8c:	08004bf5 	.word	0x08004bf5
 8004b90:	08004b71 	.word	0x08004b71
 8004b94:	08004b71 	.word	0x08004b71
 8004b98:	08004b71 	.word	0x08004b71
 8004b9c:	08004b71 	.word	0x08004b71
 8004ba0:	08004bf5 	.word	0x08004bf5
 8004ba4:	08004b71 	.word	0x08004b71
 8004ba8:	08004b71 	.word	0x08004b71
 8004bac:	08004b71 	.word	0x08004b71
 8004bb0:	08004b71 	.word	0x08004b71
 8004bb4:	08004d03 	.word	0x08004d03
 8004bb8:	08004c25 	.word	0x08004c25
 8004bbc:	08004ce5 	.word	0x08004ce5
 8004bc0:	08004b71 	.word	0x08004b71
 8004bc4:	08004b71 	.word	0x08004b71
 8004bc8:	08004d25 	.word	0x08004d25
 8004bcc:	08004b71 	.word	0x08004b71
 8004bd0:	08004c25 	.word	0x08004c25
 8004bd4:	08004b71 	.word	0x08004b71
 8004bd8:	08004b71 	.word	0x08004b71
 8004bdc:	08004ced 	.word	0x08004ced
 8004be0:	680b      	ldr	r3, [r1, #0]
 8004be2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	600a      	str	r2, [r1, #0]
 8004bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0a4      	b.n	8004d3e <_printf_i+0x1f6>
 8004bf4:	6825      	ldr	r5, [r4, #0]
 8004bf6:	6808      	ldr	r0, [r1, #0]
 8004bf8:	062e      	lsls	r6, r5, #24
 8004bfa:	f100 0304 	add.w	r3, r0, #4
 8004bfe:	d50a      	bpl.n	8004c16 <_printf_i+0xce>
 8004c00:	6805      	ldr	r5, [r0, #0]
 8004c02:	600b      	str	r3, [r1, #0]
 8004c04:	2d00      	cmp	r5, #0
 8004c06:	da03      	bge.n	8004c10 <_printf_i+0xc8>
 8004c08:	232d      	movs	r3, #45	; 0x2d
 8004c0a:	426d      	negs	r5, r5
 8004c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c10:	230a      	movs	r3, #10
 8004c12:	485e      	ldr	r0, [pc, #376]	; (8004d8c <_printf_i+0x244>)
 8004c14:	e019      	b.n	8004c4a <_printf_i+0x102>
 8004c16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c1a:	6805      	ldr	r5, [r0, #0]
 8004c1c:	600b      	str	r3, [r1, #0]
 8004c1e:	bf18      	it	ne
 8004c20:	b22d      	sxthne	r5, r5
 8004c22:	e7ef      	b.n	8004c04 <_printf_i+0xbc>
 8004c24:	680b      	ldr	r3, [r1, #0]
 8004c26:	6825      	ldr	r5, [r4, #0]
 8004c28:	1d18      	adds	r0, r3, #4
 8004c2a:	6008      	str	r0, [r1, #0]
 8004c2c:	0628      	lsls	r0, r5, #24
 8004c2e:	d501      	bpl.n	8004c34 <_printf_i+0xec>
 8004c30:	681d      	ldr	r5, [r3, #0]
 8004c32:	e002      	b.n	8004c3a <_printf_i+0xf2>
 8004c34:	0669      	lsls	r1, r5, #25
 8004c36:	d5fb      	bpl.n	8004c30 <_printf_i+0xe8>
 8004c38:	881d      	ldrh	r5, [r3, #0]
 8004c3a:	2f6f      	cmp	r7, #111	; 0x6f
 8004c3c:	bf0c      	ite	eq
 8004c3e:	2308      	moveq	r3, #8
 8004c40:	230a      	movne	r3, #10
 8004c42:	4852      	ldr	r0, [pc, #328]	; (8004d8c <_printf_i+0x244>)
 8004c44:	2100      	movs	r1, #0
 8004c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c4a:	6866      	ldr	r6, [r4, #4]
 8004c4c:	2e00      	cmp	r6, #0
 8004c4e:	bfa8      	it	ge
 8004c50:	6821      	ldrge	r1, [r4, #0]
 8004c52:	60a6      	str	r6, [r4, #8]
 8004c54:	bfa4      	itt	ge
 8004c56:	f021 0104 	bicge.w	r1, r1, #4
 8004c5a:	6021      	strge	r1, [r4, #0]
 8004c5c:	b90d      	cbnz	r5, 8004c62 <_printf_i+0x11a>
 8004c5e:	2e00      	cmp	r6, #0
 8004c60:	d04d      	beq.n	8004cfe <_printf_i+0x1b6>
 8004c62:	4616      	mov	r6, r2
 8004c64:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c68:	fb03 5711 	mls	r7, r3, r1, r5
 8004c6c:	5dc7      	ldrb	r7, [r0, r7]
 8004c6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c72:	462f      	mov	r7, r5
 8004c74:	42bb      	cmp	r3, r7
 8004c76:	460d      	mov	r5, r1
 8004c78:	d9f4      	bls.n	8004c64 <_printf_i+0x11c>
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d10b      	bne.n	8004c96 <_printf_i+0x14e>
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	07df      	lsls	r7, r3, #31
 8004c82:	d508      	bpl.n	8004c96 <_printf_i+0x14e>
 8004c84:	6923      	ldr	r3, [r4, #16]
 8004c86:	6861      	ldr	r1, [r4, #4]
 8004c88:	4299      	cmp	r1, r3
 8004c8a:	bfde      	ittt	le
 8004c8c:	2330      	movle	r3, #48	; 0x30
 8004c8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c96:	1b92      	subs	r2, r2, r6
 8004c98:	6122      	str	r2, [r4, #16]
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	4640      	mov	r0, r8
 8004ca0:	f8cd a000 	str.w	sl, [sp]
 8004ca4:	aa03      	add	r2, sp, #12
 8004ca6:	f7ff fedf 	bl	8004a68 <_printf_common>
 8004caa:	3001      	adds	r0, #1
 8004cac:	d14c      	bne.n	8004d48 <_printf_i+0x200>
 8004cae:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb2:	b004      	add	sp, #16
 8004cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb8:	4834      	ldr	r0, [pc, #208]	; (8004d8c <_printf_i+0x244>)
 8004cba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cbe:	680e      	ldr	r6, [r1, #0]
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cc6:	061f      	lsls	r7, r3, #24
 8004cc8:	600e      	str	r6, [r1, #0]
 8004cca:	d514      	bpl.n	8004cf6 <_printf_i+0x1ae>
 8004ccc:	07d9      	lsls	r1, r3, #31
 8004cce:	bf44      	itt	mi
 8004cd0:	f043 0320 	orrmi.w	r3, r3, #32
 8004cd4:	6023      	strmi	r3, [r4, #0]
 8004cd6:	b91d      	cbnz	r5, 8004ce0 <_printf_i+0x198>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	f023 0320 	bic.w	r3, r3, #32
 8004cde:	6023      	str	r3, [r4, #0]
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	e7af      	b.n	8004c44 <_printf_i+0xfc>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	f043 0320 	orr.w	r3, r3, #32
 8004cea:	6023      	str	r3, [r4, #0]
 8004cec:	2378      	movs	r3, #120	; 0x78
 8004cee:	4828      	ldr	r0, [pc, #160]	; (8004d90 <_printf_i+0x248>)
 8004cf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cf4:	e7e3      	b.n	8004cbe <_printf_i+0x176>
 8004cf6:	065e      	lsls	r6, r3, #25
 8004cf8:	bf48      	it	mi
 8004cfa:	b2ad      	uxthmi	r5, r5
 8004cfc:	e7e6      	b.n	8004ccc <_printf_i+0x184>
 8004cfe:	4616      	mov	r6, r2
 8004d00:	e7bb      	b.n	8004c7a <_printf_i+0x132>
 8004d02:	680b      	ldr	r3, [r1, #0]
 8004d04:	6826      	ldr	r6, [r4, #0]
 8004d06:	1d1d      	adds	r5, r3, #4
 8004d08:	6960      	ldr	r0, [r4, #20]
 8004d0a:	600d      	str	r5, [r1, #0]
 8004d0c:	0635      	lsls	r5, r6, #24
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	d501      	bpl.n	8004d16 <_printf_i+0x1ce>
 8004d12:	6018      	str	r0, [r3, #0]
 8004d14:	e002      	b.n	8004d1c <_printf_i+0x1d4>
 8004d16:	0671      	lsls	r1, r6, #25
 8004d18:	d5fb      	bpl.n	8004d12 <_printf_i+0x1ca>
 8004d1a:	8018      	strh	r0, [r3, #0]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	4616      	mov	r6, r2
 8004d20:	6123      	str	r3, [r4, #16]
 8004d22:	e7ba      	b.n	8004c9a <_printf_i+0x152>
 8004d24:	680b      	ldr	r3, [r1, #0]
 8004d26:	1d1a      	adds	r2, r3, #4
 8004d28:	600a      	str	r2, [r1, #0]
 8004d2a:	681e      	ldr	r6, [r3, #0]
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4630      	mov	r0, r6
 8004d30:	6862      	ldr	r2, [r4, #4]
 8004d32:	f000 feeb 	bl	8005b0c <memchr>
 8004d36:	b108      	cbz	r0, 8004d3c <_printf_i+0x1f4>
 8004d38:	1b80      	subs	r0, r0, r6
 8004d3a:	6060      	str	r0, [r4, #4]
 8004d3c:	6863      	ldr	r3, [r4, #4]
 8004d3e:	6123      	str	r3, [r4, #16]
 8004d40:	2300      	movs	r3, #0
 8004d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d46:	e7a8      	b.n	8004c9a <_printf_i+0x152>
 8004d48:	4632      	mov	r2, r6
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	4640      	mov	r0, r8
 8004d4e:	6923      	ldr	r3, [r4, #16]
 8004d50:	47d0      	blx	sl
 8004d52:	3001      	adds	r0, #1
 8004d54:	d0ab      	beq.n	8004cae <_printf_i+0x166>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	079b      	lsls	r3, r3, #30
 8004d5a:	d413      	bmi.n	8004d84 <_printf_i+0x23c>
 8004d5c:	68e0      	ldr	r0, [r4, #12]
 8004d5e:	9b03      	ldr	r3, [sp, #12]
 8004d60:	4298      	cmp	r0, r3
 8004d62:	bfb8      	it	lt
 8004d64:	4618      	movlt	r0, r3
 8004d66:	e7a4      	b.n	8004cb2 <_printf_i+0x16a>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	4632      	mov	r2, r6
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	4640      	mov	r0, r8
 8004d70:	47d0      	blx	sl
 8004d72:	3001      	adds	r0, #1
 8004d74:	d09b      	beq.n	8004cae <_printf_i+0x166>
 8004d76:	3501      	adds	r5, #1
 8004d78:	68e3      	ldr	r3, [r4, #12]
 8004d7a:	9903      	ldr	r1, [sp, #12]
 8004d7c:	1a5b      	subs	r3, r3, r1
 8004d7e:	42ab      	cmp	r3, r5
 8004d80:	dcf2      	bgt.n	8004d68 <_printf_i+0x220>
 8004d82:	e7eb      	b.n	8004d5c <_printf_i+0x214>
 8004d84:	2500      	movs	r5, #0
 8004d86:	f104 0619 	add.w	r6, r4, #25
 8004d8a:	e7f5      	b.n	8004d78 <_printf_i+0x230>
 8004d8c:	08007a6a 	.word	0x08007a6a
 8004d90:	08007a7b 	.word	0x08007a7b

08004d94 <sniprintf>:
 8004d94:	b40c      	push	{r2, r3}
 8004d96:	b530      	push	{r4, r5, lr}
 8004d98:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <sniprintf+0x64>)
 8004d9a:	1e0c      	subs	r4, r1, #0
 8004d9c:	681d      	ldr	r5, [r3, #0]
 8004d9e:	b09d      	sub	sp, #116	; 0x74
 8004da0:	da08      	bge.n	8004db4 <sniprintf+0x20>
 8004da2:	238b      	movs	r3, #139	; 0x8b
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	602b      	str	r3, [r5, #0]
 8004daa:	b01d      	add	sp, #116	; 0x74
 8004dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004db0:	b002      	add	sp, #8
 8004db2:	4770      	bx	lr
 8004db4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004db8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004dbc:	bf0c      	ite	eq
 8004dbe:	4623      	moveq	r3, r4
 8004dc0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004dc4:	9304      	str	r3, [sp, #16]
 8004dc6:	9307      	str	r3, [sp, #28]
 8004dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dcc:	9002      	str	r0, [sp, #8]
 8004dce:	9006      	str	r0, [sp, #24]
 8004dd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	ab21      	add	r3, sp, #132	; 0x84
 8004dd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004dda:	a902      	add	r1, sp, #8
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	f001 fb43 	bl	8006468 <_svfiprintf_r>
 8004de2:	1c43      	adds	r3, r0, #1
 8004de4:	bfbc      	itt	lt
 8004de6:	238b      	movlt	r3, #139	; 0x8b
 8004de8:	602b      	strlt	r3, [r5, #0]
 8004dea:	2c00      	cmp	r4, #0
 8004dec:	d0dd      	beq.n	8004daa <sniprintf+0x16>
 8004dee:	2200      	movs	r2, #0
 8004df0:	9b02      	ldr	r3, [sp, #8]
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	e7d9      	b.n	8004daa <sniprintf+0x16>
 8004df6:	bf00      	nop
 8004df8:	20000010 	.word	0x20000010

08004dfc <quorem>:
 8004dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e00:	6903      	ldr	r3, [r0, #16]
 8004e02:	690c      	ldr	r4, [r1, #16]
 8004e04:	4607      	mov	r7, r0
 8004e06:	42a3      	cmp	r3, r4
 8004e08:	f2c0 8083 	blt.w	8004f12 <quorem+0x116>
 8004e0c:	3c01      	subs	r4, #1
 8004e0e:	f100 0514 	add.w	r5, r0, #20
 8004e12:	f101 0814 	add.w	r8, r1, #20
 8004e16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e24:	3301      	adds	r3, #1
 8004e26:	429a      	cmp	r2, r3
 8004e28:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e34:	d332      	bcc.n	8004e9c <quorem+0xa0>
 8004e36:	f04f 0e00 	mov.w	lr, #0
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	46ac      	mov	ip, r5
 8004e3e:	46f2      	mov	sl, lr
 8004e40:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e44:	b293      	uxth	r3, r2
 8004e46:	fb06 e303 	mla	r3, r6, r3, lr
 8004e4a:	0c12      	lsrs	r2, r2, #16
 8004e4c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004e50:	fb06 e202 	mla	r2, r6, r2, lr
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	ebaa 0303 	sub.w	r3, sl, r3
 8004e5a:	f8dc a000 	ldr.w	sl, [ip]
 8004e5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e62:	fa1f fa8a 	uxth.w	sl, sl
 8004e66:	4453      	add	r3, sl
 8004e68:	fa1f fa82 	uxth.w	sl, r2
 8004e6c:	f8dc 2000 	ldr.w	r2, [ip]
 8004e70:	4581      	cmp	r9, r0
 8004e72:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004e76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e80:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e84:	f84c 3b04 	str.w	r3, [ip], #4
 8004e88:	d2da      	bcs.n	8004e40 <quorem+0x44>
 8004e8a:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e8e:	b92b      	cbnz	r3, 8004e9c <quorem+0xa0>
 8004e90:	9b01      	ldr	r3, [sp, #4]
 8004e92:	3b04      	subs	r3, #4
 8004e94:	429d      	cmp	r5, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	d32f      	bcc.n	8004efa <quorem+0xfe>
 8004e9a:	613c      	str	r4, [r7, #16]
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	f001 f8cb 	bl	8006038 <__mcmp>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	db25      	blt.n	8004ef2 <quorem+0xf6>
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f04f 0c00 	mov.w	ip, #0
 8004eac:	3601      	adds	r6, #1
 8004eae:	f858 1b04 	ldr.w	r1, [r8], #4
 8004eb2:	f8d0 e000 	ldr.w	lr, [r0]
 8004eb6:	b28b      	uxth	r3, r1
 8004eb8:	ebac 0303 	sub.w	r3, ip, r3
 8004ebc:	fa1f f28e 	uxth.w	r2, lr
 8004ec0:	4413      	add	r3, r2
 8004ec2:	0c0a      	lsrs	r2, r1, #16
 8004ec4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ed2:	45c1      	cmp	r9, r8
 8004ed4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ed8:	f840 3b04 	str.w	r3, [r0], #4
 8004edc:	d2e7      	bcs.n	8004eae <quorem+0xb2>
 8004ede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ee6:	b922      	cbnz	r2, 8004ef2 <quorem+0xf6>
 8004ee8:	3b04      	subs	r3, #4
 8004eea:	429d      	cmp	r5, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	d30a      	bcc.n	8004f06 <quorem+0x10a>
 8004ef0:	613c      	str	r4, [r7, #16]
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	b003      	add	sp, #12
 8004ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	3b04      	subs	r3, #4
 8004efe:	2a00      	cmp	r2, #0
 8004f00:	d1cb      	bne.n	8004e9a <quorem+0x9e>
 8004f02:	3c01      	subs	r4, #1
 8004f04:	e7c6      	b.n	8004e94 <quorem+0x98>
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	3b04      	subs	r3, #4
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <quorem+0xf4>
 8004f0e:	3c01      	subs	r4, #1
 8004f10:	e7eb      	b.n	8004eea <quorem+0xee>
 8004f12:	2000      	movs	r0, #0
 8004f14:	e7ee      	b.n	8004ef4 <quorem+0xf8>
	...

08004f18 <_dtoa_r>:
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	461f      	mov	r7, r3
 8004f20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004f22:	b099      	sub	sp, #100	; 0x64
 8004f24:	4605      	mov	r5, r0
 8004f26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004f2e:	b974      	cbnz	r4, 8004f4e <_dtoa_r+0x36>
 8004f30:	2010      	movs	r0, #16
 8004f32:	f000 fde3 	bl	8005afc <malloc>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6268      	str	r0, [r5, #36]	; 0x24
 8004f3a:	b920      	cbnz	r0, 8004f46 <_dtoa_r+0x2e>
 8004f3c:	21ea      	movs	r1, #234	; 0xea
 8004f3e:	4bae      	ldr	r3, [pc, #696]	; (80051f8 <_dtoa_r+0x2e0>)
 8004f40:	48ae      	ldr	r0, [pc, #696]	; (80051fc <_dtoa_r+0x2e4>)
 8004f42:	f001 fba1 	bl	8006688 <__assert_func>
 8004f46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f4a:	6004      	str	r4, [r0, #0]
 8004f4c:	60c4      	str	r4, [r0, #12]
 8004f4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	b151      	cbz	r1, 8004f6a <_dtoa_r+0x52>
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	2301      	movs	r3, #1
 8004f58:	4093      	lsls	r3, r2
 8004f5a:	604a      	str	r2, [r1, #4]
 8004f5c:	608b      	str	r3, [r1, #8]
 8004f5e:	4628      	mov	r0, r5
 8004f60:	f000 fe30 	bl	8005bc4 <_Bfree>
 8004f64:	2200      	movs	r2, #0
 8004f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	1e3b      	subs	r3, r7, #0
 8004f6c:	bfaf      	iteee	ge
 8004f6e:	2300      	movge	r3, #0
 8004f70:	2201      	movlt	r2, #1
 8004f72:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f76:	9305      	strlt	r3, [sp, #20]
 8004f78:	bfa8      	it	ge
 8004f7a:	f8c8 3000 	strge.w	r3, [r8]
 8004f7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004f82:	4b9f      	ldr	r3, [pc, #636]	; (8005200 <_dtoa_r+0x2e8>)
 8004f84:	bfb8      	it	lt
 8004f86:	f8c8 2000 	strlt.w	r2, [r8]
 8004f8a:	ea33 0309 	bics.w	r3, r3, r9
 8004f8e:	d119      	bne.n	8004fc4 <_dtoa_r+0xac>
 8004f90:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f9c:	4333      	orrs	r3, r6
 8004f9e:	f000 8580 	beq.w	8005aa2 <_dtoa_r+0xb8a>
 8004fa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004fa4:	b953      	cbnz	r3, 8004fbc <_dtoa_r+0xa4>
 8004fa6:	4b97      	ldr	r3, [pc, #604]	; (8005204 <_dtoa_r+0x2ec>)
 8004fa8:	e022      	b.n	8004ff0 <_dtoa_r+0xd8>
 8004faa:	4b97      	ldr	r3, [pc, #604]	; (8005208 <_dtoa_r+0x2f0>)
 8004fac:	9308      	str	r3, [sp, #32]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	9808      	ldr	r0, [sp, #32]
 8004fb6:	b019      	add	sp, #100	; 0x64
 8004fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fbc:	4b91      	ldr	r3, [pc, #580]	; (8005204 <_dtoa_r+0x2ec>)
 8004fbe:	9308      	str	r3, [sp, #32]
 8004fc0:	3303      	adds	r3, #3
 8004fc2:	e7f5      	b.n	8004fb0 <_dtoa_r+0x98>
 8004fc4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004fc8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004fcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f7fb fce8 	bl	80009a8 <__aeabi_dcmpeq>
 8004fd8:	4680      	mov	r8, r0
 8004fda:	b158      	cbz	r0, 8004ff4 <_dtoa_r+0xdc>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8559 	beq.w	8005a9c <_dtoa_r+0xb84>
 8004fea:	4888      	ldr	r0, [pc, #544]	; (800520c <_dtoa_r+0x2f4>)
 8004fec:	6018      	str	r0, [r3, #0]
 8004fee:	1e43      	subs	r3, r0, #1
 8004ff0:	9308      	str	r3, [sp, #32]
 8004ff2:	e7df      	b.n	8004fb4 <_dtoa_r+0x9c>
 8004ff4:	ab16      	add	r3, sp, #88	; 0x58
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	ab17      	add	r3, sp, #92	; 0x5c
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005002:	f001 f8c5 	bl	8006190 <__d2b>
 8005006:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800500a:	4682      	mov	sl, r0
 800500c:	2c00      	cmp	r4, #0
 800500e:	d07e      	beq.n	800510e <_dtoa_r+0x1f6>
 8005010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005016:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800501a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800501e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005022:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005026:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800502a:	2200      	movs	r2, #0
 800502c:	4b78      	ldr	r3, [pc, #480]	; (8005210 <_dtoa_r+0x2f8>)
 800502e:	f7fb f89b 	bl	8000168 <__aeabi_dsub>
 8005032:	a36b      	add	r3, pc, #428	; (adr r3, 80051e0 <_dtoa_r+0x2c8>)
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f7fb fa4e 	bl	80004d8 <__aeabi_dmul>
 800503c:	a36a      	add	r3, pc, #424	; (adr r3, 80051e8 <_dtoa_r+0x2d0>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f7fb f893 	bl	800016c <__adddf3>
 8005046:	4606      	mov	r6, r0
 8005048:	4620      	mov	r0, r4
 800504a:	460f      	mov	r7, r1
 800504c:	f7fb f9da 	bl	8000404 <__aeabi_i2d>
 8005050:	a367      	add	r3, pc, #412	; (adr r3, 80051f0 <_dtoa_r+0x2d8>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f7fb fa3f 	bl	80004d8 <__aeabi_dmul>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4630      	mov	r0, r6
 8005060:	4639      	mov	r1, r7
 8005062:	f7fb f883 	bl	800016c <__adddf3>
 8005066:	4606      	mov	r6, r0
 8005068:	460f      	mov	r7, r1
 800506a:	f7fb fce5 	bl	8000a38 <__aeabi_d2iz>
 800506e:	2200      	movs	r2, #0
 8005070:	4681      	mov	r9, r0
 8005072:	2300      	movs	r3, #0
 8005074:	4630      	mov	r0, r6
 8005076:	4639      	mov	r1, r7
 8005078:	f7fb fca0 	bl	80009bc <__aeabi_dcmplt>
 800507c:	b148      	cbz	r0, 8005092 <_dtoa_r+0x17a>
 800507e:	4648      	mov	r0, r9
 8005080:	f7fb f9c0 	bl	8000404 <__aeabi_i2d>
 8005084:	4632      	mov	r2, r6
 8005086:	463b      	mov	r3, r7
 8005088:	f7fb fc8e 	bl	80009a8 <__aeabi_dcmpeq>
 800508c:	b908      	cbnz	r0, 8005092 <_dtoa_r+0x17a>
 800508e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005092:	f1b9 0f16 	cmp.w	r9, #22
 8005096:	d857      	bhi.n	8005148 <_dtoa_r+0x230>
 8005098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800509c:	4b5d      	ldr	r3, [pc, #372]	; (8005214 <_dtoa_r+0x2fc>)
 800509e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f7fb fc89 	bl	80009bc <__aeabi_dcmplt>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d04e      	beq.n	800514c <_dtoa_r+0x234>
 80050ae:	2300      	movs	r3, #0
 80050b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80050b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80050b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80050b8:	1b1c      	subs	r4, r3, r4
 80050ba:	1e63      	subs	r3, r4, #1
 80050bc:	9309      	str	r3, [sp, #36]	; 0x24
 80050be:	bf49      	itett	mi
 80050c0:	f1c4 0301 	rsbmi	r3, r4, #1
 80050c4:	2300      	movpl	r3, #0
 80050c6:	9306      	strmi	r3, [sp, #24]
 80050c8:	2300      	movmi	r3, #0
 80050ca:	bf54      	ite	pl
 80050cc:	9306      	strpl	r3, [sp, #24]
 80050ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80050d0:	f1b9 0f00 	cmp.w	r9, #0
 80050d4:	db3c      	blt.n	8005150 <_dtoa_r+0x238>
 80050d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80050dc:	444b      	add	r3, r9
 80050de:	9309      	str	r3, [sp, #36]	; 0x24
 80050e0:	2300      	movs	r3, #0
 80050e2:	930a      	str	r3, [sp, #40]	; 0x28
 80050e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050e6:	2b09      	cmp	r3, #9
 80050e8:	d86c      	bhi.n	80051c4 <_dtoa_r+0x2ac>
 80050ea:	2b05      	cmp	r3, #5
 80050ec:	bfc4      	itt	gt
 80050ee:	3b04      	subgt	r3, #4
 80050f0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80050f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050f4:	bfc8      	it	gt
 80050f6:	2400      	movgt	r4, #0
 80050f8:	f1a3 0302 	sub.w	r3, r3, #2
 80050fc:	bfd8      	it	le
 80050fe:	2401      	movle	r4, #1
 8005100:	2b03      	cmp	r3, #3
 8005102:	f200 808b 	bhi.w	800521c <_dtoa_r+0x304>
 8005106:	e8df f003 	tbb	[pc, r3]
 800510a:	4f2d      	.short	0x4f2d
 800510c:	5b4d      	.short	0x5b4d
 800510e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005112:	441c      	add	r4, r3
 8005114:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005118:	2b20      	cmp	r3, #32
 800511a:	bfc3      	ittte	gt
 800511c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005120:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005124:	fa09 f303 	lslgt.w	r3, r9, r3
 8005128:	f1c3 0320 	rsble	r3, r3, #32
 800512c:	bfc6      	itte	gt
 800512e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005132:	4318      	orrgt	r0, r3
 8005134:	fa06 f003 	lslle.w	r0, r6, r3
 8005138:	f7fb f954 	bl	80003e4 <__aeabi_ui2d>
 800513c:	2301      	movs	r3, #1
 800513e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005142:	3c01      	subs	r4, #1
 8005144:	9313      	str	r3, [sp, #76]	; 0x4c
 8005146:	e770      	b.n	800502a <_dtoa_r+0x112>
 8005148:	2301      	movs	r3, #1
 800514a:	e7b3      	b.n	80050b4 <_dtoa_r+0x19c>
 800514c:	900f      	str	r0, [sp, #60]	; 0x3c
 800514e:	e7b2      	b.n	80050b6 <_dtoa_r+0x19e>
 8005150:	9b06      	ldr	r3, [sp, #24]
 8005152:	eba3 0309 	sub.w	r3, r3, r9
 8005156:	9306      	str	r3, [sp, #24]
 8005158:	f1c9 0300 	rsb	r3, r9, #0
 800515c:	930a      	str	r3, [sp, #40]	; 0x28
 800515e:	2300      	movs	r3, #0
 8005160:	930e      	str	r3, [sp, #56]	; 0x38
 8005162:	e7bf      	b.n	80050e4 <_dtoa_r+0x1cc>
 8005164:	2300      	movs	r3, #0
 8005166:	930b      	str	r3, [sp, #44]	; 0x2c
 8005168:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800516a:	2b00      	cmp	r3, #0
 800516c:	dc59      	bgt.n	8005222 <_dtoa_r+0x30a>
 800516e:	f04f 0b01 	mov.w	fp, #1
 8005172:	465b      	mov	r3, fp
 8005174:	f8cd b008 	str.w	fp, [sp, #8]
 8005178:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800517c:	2200      	movs	r2, #0
 800517e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005180:	6042      	str	r2, [r0, #4]
 8005182:	2204      	movs	r2, #4
 8005184:	f102 0614 	add.w	r6, r2, #20
 8005188:	429e      	cmp	r6, r3
 800518a:	6841      	ldr	r1, [r0, #4]
 800518c:	d94f      	bls.n	800522e <_dtoa_r+0x316>
 800518e:	4628      	mov	r0, r5
 8005190:	f000 fcd8 	bl	8005b44 <_Balloc>
 8005194:	9008      	str	r0, [sp, #32]
 8005196:	2800      	cmp	r0, #0
 8005198:	d14d      	bne.n	8005236 <_dtoa_r+0x31e>
 800519a:	4602      	mov	r2, r0
 800519c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80051a0:	4b1d      	ldr	r3, [pc, #116]	; (8005218 <_dtoa_r+0x300>)
 80051a2:	e6cd      	b.n	8004f40 <_dtoa_r+0x28>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e7de      	b.n	8005166 <_dtoa_r+0x24e>
 80051a8:	2300      	movs	r3, #0
 80051aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80051ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051ae:	eb09 0b03 	add.w	fp, r9, r3
 80051b2:	f10b 0301 	add.w	r3, fp, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	9302      	str	r3, [sp, #8]
 80051ba:	bfb8      	it	lt
 80051bc:	2301      	movlt	r3, #1
 80051be:	e7dd      	b.n	800517c <_dtoa_r+0x264>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e7f2      	b.n	80051aa <_dtoa_r+0x292>
 80051c4:	2401      	movs	r4, #1
 80051c6:	2300      	movs	r3, #0
 80051c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80051ca:	9322      	str	r3, [sp, #136]	; 0x88
 80051cc:	f04f 3bff 	mov.w	fp, #4294967295
 80051d0:	2200      	movs	r2, #0
 80051d2:	2312      	movs	r3, #18
 80051d4:	f8cd b008 	str.w	fp, [sp, #8]
 80051d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80051da:	e7cf      	b.n	800517c <_dtoa_r+0x264>
 80051dc:	f3af 8000 	nop.w
 80051e0:	636f4361 	.word	0x636f4361
 80051e4:	3fd287a7 	.word	0x3fd287a7
 80051e8:	8b60c8b3 	.word	0x8b60c8b3
 80051ec:	3fc68a28 	.word	0x3fc68a28
 80051f0:	509f79fb 	.word	0x509f79fb
 80051f4:	3fd34413 	.word	0x3fd34413
 80051f8:	08007a99 	.word	0x08007a99
 80051fc:	08007ab0 	.word	0x08007ab0
 8005200:	7ff00000 	.word	0x7ff00000
 8005204:	08007a95 	.word	0x08007a95
 8005208:	08007a8c 	.word	0x08007a8c
 800520c:	08007a69 	.word	0x08007a69
 8005210:	3ff80000 	.word	0x3ff80000
 8005214:	08007ba8 	.word	0x08007ba8
 8005218:	08007b0f 	.word	0x08007b0f
 800521c:	2301      	movs	r3, #1
 800521e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005220:	e7d4      	b.n	80051cc <_dtoa_r+0x2b4>
 8005222:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005226:	465b      	mov	r3, fp
 8005228:	f8cd b008 	str.w	fp, [sp, #8]
 800522c:	e7a6      	b.n	800517c <_dtoa_r+0x264>
 800522e:	3101      	adds	r1, #1
 8005230:	6041      	str	r1, [r0, #4]
 8005232:	0052      	lsls	r2, r2, #1
 8005234:	e7a6      	b.n	8005184 <_dtoa_r+0x26c>
 8005236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005238:	9a08      	ldr	r2, [sp, #32]
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	9b02      	ldr	r3, [sp, #8]
 800523e:	2b0e      	cmp	r3, #14
 8005240:	f200 80a8 	bhi.w	8005394 <_dtoa_r+0x47c>
 8005244:	2c00      	cmp	r4, #0
 8005246:	f000 80a5 	beq.w	8005394 <_dtoa_r+0x47c>
 800524a:	f1b9 0f00 	cmp.w	r9, #0
 800524e:	dd34      	ble.n	80052ba <_dtoa_r+0x3a2>
 8005250:	4a9a      	ldr	r2, [pc, #616]	; (80054bc <_dtoa_r+0x5a4>)
 8005252:	f009 030f 	and.w	r3, r9, #15
 8005256:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800525a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800525e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005262:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005266:	ea4f 1429 	mov.w	r4, r9, asr #4
 800526a:	d016      	beq.n	800529a <_dtoa_r+0x382>
 800526c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005270:	4b93      	ldr	r3, [pc, #588]	; (80054c0 <_dtoa_r+0x5a8>)
 8005272:	2703      	movs	r7, #3
 8005274:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005278:	f7fb fa58 	bl	800072c <__aeabi_ddiv>
 800527c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005280:	f004 040f 	and.w	r4, r4, #15
 8005284:	4e8e      	ldr	r6, [pc, #568]	; (80054c0 <_dtoa_r+0x5a8>)
 8005286:	b954      	cbnz	r4, 800529e <_dtoa_r+0x386>
 8005288:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800528c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005290:	f7fb fa4c 	bl	800072c <__aeabi_ddiv>
 8005294:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005298:	e029      	b.n	80052ee <_dtoa_r+0x3d6>
 800529a:	2702      	movs	r7, #2
 800529c:	e7f2      	b.n	8005284 <_dtoa_r+0x36c>
 800529e:	07e1      	lsls	r1, r4, #31
 80052a0:	d508      	bpl.n	80052b4 <_dtoa_r+0x39c>
 80052a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052aa:	f7fb f915 	bl	80004d8 <__aeabi_dmul>
 80052ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052b2:	3701      	adds	r7, #1
 80052b4:	1064      	asrs	r4, r4, #1
 80052b6:	3608      	adds	r6, #8
 80052b8:	e7e5      	b.n	8005286 <_dtoa_r+0x36e>
 80052ba:	f000 80a5 	beq.w	8005408 <_dtoa_r+0x4f0>
 80052be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052c2:	f1c9 0400 	rsb	r4, r9, #0
 80052c6:	4b7d      	ldr	r3, [pc, #500]	; (80054bc <_dtoa_r+0x5a4>)
 80052c8:	f004 020f 	and.w	r2, r4, #15
 80052cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f7fb f900 	bl	80004d8 <__aeabi_dmul>
 80052d8:	2702      	movs	r7, #2
 80052da:	2300      	movs	r3, #0
 80052dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052e0:	4e77      	ldr	r6, [pc, #476]	; (80054c0 <_dtoa_r+0x5a8>)
 80052e2:	1124      	asrs	r4, r4, #4
 80052e4:	2c00      	cmp	r4, #0
 80052e6:	f040 8084 	bne.w	80053f2 <_dtoa_r+0x4da>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1d2      	bne.n	8005294 <_dtoa_r+0x37c>
 80052ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 808b 	beq.w	800540c <_dtoa_r+0x4f4>
 80052f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80052fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80052fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005302:	2200      	movs	r2, #0
 8005304:	4b6f      	ldr	r3, [pc, #444]	; (80054c4 <_dtoa_r+0x5ac>)
 8005306:	f7fb fb59 	bl	80009bc <__aeabi_dcmplt>
 800530a:	2800      	cmp	r0, #0
 800530c:	d07e      	beq.n	800540c <_dtoa_r+0x4f4>
 800530e:	9b02      	ldr	r3, [sp, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d07b      	beq.n	800540c <_dtoa_r+0x4f4>
 8005314:	f1bb 0f00 	cmp.w	fp, #0
 8005318:	dd38      	ble.n	800538c <_dtoa_r+0x474>
 800531a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800531e:	2200      	movs	r2, #0
 8005320:	4b69      	ldr	r3, [pc, #420]	; (80054c8 <_dtoa_r+0x5b0>)
 8005322:	f7fb f8d9 	bl	80004d8 <__aeabi_dmul>
 8005326:	465c      	mov	r4, fp
 8005328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800532c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005330:	3701      	adds	r7, #1
 8005332:	4638      	mov	r0, r7
 8005334:	f7fb f866 	bl	8000404 <__aeabi_i2d>
 8005338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800533c:	f7fb f8cc 	bl	80004d8 <__aeabi_dmul>
 8005340:	2200      	movs	r2, #0
 8005342:	4b62      	ldr	r3, [pc, #392]	; (80054cc <_dtoa_r+0x5b4>)
 8005344:	f7fa ff12 	bl	800016c <__adddf3>
 8005348:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800534c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005350:	9611      	str	r6, [sp, #68]	; 0x44
 8005352:	2c00      	cmp	r4, #0
 8005354:	d15d      	bne.n	8005412 <_dtoa_r+0x4fa>
 8005356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800535a:	2200      	movs	r2, #0
 800535c:	4b5c      	ldr	r3, [pc, #368]	; (80054d0 <_dtoa_r+0x5b8>)
 800535e:	f7fa ff03 	bl	8000168 <__aeabi_dsub>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800536a:	4633      	mov	r3, r6
 800536c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800536e:	f7fb fb43 	bl	80009f8 <__aeabi_dcmpgt>
 8005372:	2800      	cmp	r0, #0
 8005374:	f040 829e 	bne.w	80058b4 <_dtoa_r+0x99c>
 8005378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800537c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800537e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005382:	f7fb fb1b 	bl	80009bc <__aeabi_dcmplt>
 8005386:	2800      	cmp	r0, #0
 8005388:	f040 8292 	bne.w	80058b0 <_dtoa_r+0x998>
 800538c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005390:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005396:	2b00      	cmp	r3, #0
 8005398:	f2c0 8153 	blt.w	8005642 <_dtoa_r+0x72a>
 800539c:	f1b9 0f0e 	cmp.w	r9, #14
 80053a0:	f300 814f 	bgt.w	8005642 <_dtoa_r+0x72a>
 80053a4:	4b45      	ldr	r3, [pc, #276]	; (80054bc <_dtoa_r+0x5a4>)
 80053a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80053aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80053b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f280 80db 	bge.w	8005570 <_dtoa_r+0x658>
 80053ba:	9b02      	ldr	r3, [sp, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f300 80d7 	bgt.w	8005570 <_dtoa_r+0x658>
 80053c2:	f040 8274 	bne.w	80058ae <_dtoa_r+0x996>
 80053c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053ca:	2200      	movs	r2, #0
 80053cc:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <_dtoa_r+0x5b8>)
 80053ce:	f7fb f883 	bl	80004d8 <__aeabi_dmul>
 80053d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053d6:	f7fb fb05 	bl	80009e4 <__aeabi_dcmpge>
 80053da:	9c02      	ldr	r4, [sp, #8]
 80053dc:	4626      	mov	r6, r4
 80053de:	2800      	cmp	r0, #0
 80053e0:	f040 824a 	bne.w	8005878 <_dtoa_r+0x960>
 80053e4:	2331      	movs	r3, #49	; 0x31
 80053e6:	9f08      	ldr	r7, [sp, #32]
 80053e8:	f109 0901 	add.w	r9, r9, #1
 80053ec:	f807 3b01 	strb.w	r3, [r7], #1
 80053f0:	e246      	b.n	8005880 <_dtoa_r+0x968>
 80053f2:	07e2      	lsls	r2, r4, #31
 80053f4:	d505      	bpl.n	8005402 <_dtoa_r+0x4ea>
 80053f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80053fa:	f7fb f86d 	bl	80004d8 <__aeabi_dmul>
 80053fe:	2301      	movs	r3, #1
 8005400:	3701      	adds	r7, #1
 8005402:	1064      	asrs	r4, r4, #1
 8005404:	3608      	adds	r6, #8
 8005406:	e76d      	b.n	80052e4 <_dtoa_r+0x3cc>
 8005408:	2702      	movs	r7, #2
 800540a:	e770      	b.n	80052ee <_dtoa_r+0x3d6>
 800540c:	46c8      	mov	r8, r9
 800540e:	9c02      	ldr	r4, [sp, #8]
 8005410:	e78f      	b.n	8005332 <_dtoa_r+0x41a>
 8005412:	9908      	ldr	r1, [sp, #32]
 8005414:	4b29      	ldr	r3, [pc, #164]	; (80054bc <_dtoa_r+0x5a4>)
 8005416:	4421      	add	r1, r4
 8005418:	9112      	str	r1, [sp, #72]	; 0x48
 800541a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800541c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005420:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005424:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005428:	2900      	cmp	r1, #0
 800542a:	d055      	beq.n	80054d8 <_dtoa_r+0x5c0>
 800542c:	2000      	movs	r0, #0
 800542e:	4929      	ldr	r1, [pc, #164]	; (80054d4 <_dtoa_r+0x5bc>)
 8005430:	f7fb f97c 	bl	800072c <__aeabi_ddiv>
 8005434:	463b      	mov	r3, r7
 8005436:	4632      	mov	r2, r6
 8005438:	f7fa fe96 	bl	8000168 <__aeabi_dsub>
 800543c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005440:	9f08      	ldr	r7, [sp, #32]
 8005442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005446:	f7fb faf7 	bl	8000a38 <__aeabi_d2iz>
 800544a:	4604      	mov	r4, r0
 800544c:	f7fa ffda 	bl	8000404 <__aeabi_i2d>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005458:	f7fa fe86 	bl	8000168 <__aeabi_dsub>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	3430      	adds	r4, #48	; 0x30
 8005462:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005466:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800546a:	f807 4b01 	strb.w	r4, [r7], #1
 800546e:	f7fb faa5 	bl	80009bc <__aeabi_dcmplt>
 8005472:	2800      	cmp	r0, #0
 8005474:	d174      	bne.n	8005560 <_dtoa_r+0x648>
 8005476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800547a:	2000      	movs	r0, #0
 800547c:	4911      	ldr	r1, [pc, #68]	; (80054c4 <_dtoa_r+0x5ac>)
 800547e:	f7fa fe73 	bl	8000168 <__aeabi_dsub>
 8005482:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005486:	f7fb fa99 	bl	80009bc <__aeabi_dcmplt>
 800548a:	2800      	cmp	r0, #0
 800548c:	f040 80b6 	bne.w	80055fc <_dtoa_r+0x6e4>
 8005490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005492:	429f      	cmp	r7, r3
 8005494:	f43f af7a 	beq.w	800538c <_dtoa_r+0x474>
 8005498:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800549c:	2200      	movs	r2, #0
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <_dtoa_r+0x5b0>)
 80054a0:	f7fb f81a 	bl	80004d8 <__aeabi_dmul>
 80054a4:	2200      	movs	r2, #0
 80054a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ae:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <_dtoa_r+0x5b0>)
 80054b0:	f7fb f812 	bl	80004d8 <__aeabi_dmul>
 80054b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054b8:	e7c3      	b.n	8005442 <_dtoa_r+0x52a>
 80054ba:	bf00      	nop
 80054bc:	08007ba8 	.word	0x08007ba8
 80054c0:	08007b80 	.word	0x08007b80
 80054c4:	3ff00000 	.word	0x3ff00000
 80054c8:	40240000 	.word	0x40240000
 80054cc:	401c0000 	.word	0x401c0000
 80054d0:	40140000 	.word	0x40140000
 80054d4:	3fe00000 	.word	0x3fe00000
 80054d8:	4630      	mov	r0, r6
 80054da:	4639      	mov	r1, r7
 80054dc:	f7fa fffc 	bl	80004d8 <__aeabi_dmul>
 80054e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054e6:	9c08      	ldr	r4, [sp, #32]
 80054e8:	9314      	str	r3, [sp, #80]	; 0x50
 80054ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ee:	f7fb faa3 	bl	8000a38 <__aeabi_d2iz>
 80054f2:	9015      	str	r0, [sp, #84]	; 0x54
 80054f4:	f7fa ff86 	bl	8000404 <__aeabi_i2d>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005500:	f7fa fe32 	bl	8000168 <__aeabi_dsub>
 8005504:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005506:	4606      	mov	r6, r0
 8005508:	3330      	adds	r3, #48	; 0x30
 800550a:	f804 3b01 	strb.w	r3, [r4], #1
 800550e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005510:	460f      	mov	r7, r1
 8005512:	429c      	cmp	r4, r3
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	d124      	bne.n	8005564 <_dtoa_r+0x64c>
 800551a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800551e:	4bb3      	ldr	r3, [pc, #716]	; (80057ec <_dtoa_r+0x8d4>)
 8005520:	f7fa fe24 	bl	800016c <__adddf3>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4630      	mov	r0, r6
 800552a:	4639      	mov	r1, r7
 800552c:	f7fb fa64 	bl	80009f8 <__aeabi_dcmpgt>
 8005530:	2800      	cmp	r0, #0
 8005532:	d162      	bne.n	80055fa <_dtoa_r+0x6e2>
 8005534:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005538:	2000      	movs	r0, #0
 800553a:	49ac      	ldr	r1, [pc, #688]	; (80057ec <_dtoa_r+0x8d4>)
 800553c:	f7fa fe14 	bl	8000168 <__aeabi_dsub>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4630      	mov	r0, r6
 8005546:	4639      	mov	r1, r7
 8005548:	f7fb fa38 	bl	80009bc <__aeabi_dcmplt>
 800554c:	2800      	cmp	r0, #0
 800554e:	f43f af1d 	beq.w	800538c <_dtoa_r+0x474>
 8005552:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005554:	1e7b      	subs	r3, r7, #1
 8005556:	9314      	str	r3, [sp, #80]	; 0x50
 8005558:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800555c:	2b30      	cmp	r3, #48	; 0x30
 800555e:	d0f8      	beq.n	8005552 <_dtoa_r+0x63a>
 8005560:	46c1      	mov	r9, r8
 8005562:	e03a      	b.n	80055da <_dtoa_r+0x6c2>
 8005564:	4ba2      	ldr	r3, [pc, #648]	; (80057f0 <_dtoa_r+0x8d8>)
 8005566:	f7fa ffb7 	bl	80004d8 <__aeabi_dmul>
 800556a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800556e:	e7bc      	b.n	80054ea <_dtoa_r+0x5d2>
 8005570:	9f08      	ldr	r7, [sp, #32]
 8005572:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800557a:	f7fb f8d7 	bl	800072c <__aeabi_ddiv>
 800557e:	f7fb fa5b 	bl	8000a38 <__aeabi_d2iz>
 8005582:	4604      	mov	r4, r0
 8005584:	f7fa ff3e 	bl	8000404 <__aeabi_i2d>
 8005588:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800558c:	f7fa ffa4 	bl	80004d8 <__aeabi_dmul>
 8005590:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005594:	460b      	mov	r3, r1
 8005596:	4602      	mov	r2, r0
 8005598:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800559c:	f7fa fde4 	bl	8000168 <__aeabi_dsub>
 80055a0:	f807 6b01 	strb.w	r6, [r7], #1
 80055a4:	9e08      	ldr	r6, [sp, #32]
 80055a6:	9b02      	ldr	r3, [sp, #8]
 80055a8:	1bbe      	subs	r6, r7, r6
 80055aa:	42b3      	cmp	r3, r6
 80055ac:	d13a      	bne.n	8005624 <_dtoa_r+0x70c>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	f7fa fddb 	bl	800016c <__adddf3>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055c2:	f7fb fa19 	bl	80009f8 <__aeabi_dcmpgt>
 80055c6:	bb58      	cbnz	r0, 8005620 <_dtoa_r+0x708>
 80055c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055d0:	f7fb f9ea 	bl	80009a8 <__aeabi_dcmpeq>
 80055d4:	b108      	cbz	r0, 80055da <_dtoa_r+0x6c2>
 80055d6:	07e1      	lsls	r1, r4, #31
 80055d8:	d422      	bmi.n	8005620 <_dtoa_r+0x708>
 80055da:	4628      	mov	r0, r5
 80055dc:	4651      	mov	r1, sl
 80055de:	f000 faf1 	bl	8005bc4 <_Bfree>
 80055e2:	2300      	movs	r3, #0
 80055e4:	703b      	strb	r3, [r7, #0]
 80055e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80055e8:	f109 0001 	add.w	r0, r9, #1
 80055ec:	6018      	str	r0, [r3, #0]
 80055ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f43f acdf 	beq.w	8004fb4 <_dtoa_r+0x9c>
 80055f6:	601f      	str	r7, [r3, #0]
 80055f8:	e4dc      	b.n	8004fb4 <_dtoa_r+0x9c>
 80055fa:	4627      	mov	r7, r4
 80055fc:	463b      	mov	r3, r7
 80055fe:	461f      	mov	r7, r3
 8005600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005604:	2a39      	cmp	r2, #57	; 0x39
 8005606:	d107      	bne.n	8005618 <_dtoa_r+0x700>
 8005608:	9a08      	ldr	r2, [sp, #32]
 800560a:	429a      	cmp	r2, r3
 800560c:	d1f7      	bne.n	80055fe <_dtoa_r+0x6e6>
 800560e:	2230      	movs	r2, #48	; 0x30
 8005610:	9908      	ldr	r1, [sp, #32]
 8005612:	f108 0801 	add.w	r8, r8, #1
 8005616:	700a      	strb	r2, [r1, #0]
 8005618:	781a      	ldrb	r2, [r3, #0]
 800561a:	3201      	adds	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	e79f      	b.n	8005560 <_dtoa_r+0x648>
 8005620:	46c8      	mov	r8, r9
 8005622:	e7eb      	b.n	80055fc <_dtoa_r+0x6e4>
 8005624:	2200      	movs	r2, #0
 8005626:	4b72      	ldr	r3, [pc, #456]	; (80057f0 <_dtoa_r+0x8d8>)
 8005628:	f7fa ff56 	bl	80004d8 <__aeabi_dmul>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005634:	2200      	movs	r2, #0
 8005636:	2300      	movs	r3, #0
 8005638:	f7fb f9b6 	bl	80009a8 <__aeabi_dcmpeq>
 800563c:	2800      	cmp	r0, #0
 800563e:	d098      	beq.n	8005572 <_dtoa_r+0x65a>
 8005640:	e7cb      	b.n	80055da <_dtoa_r+0x6c2>
 8005642:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005644:	2a00      	cmp	r2, #0
 8005646:	f000 80cd 	beq.w	80057e4 <_dtoa_r+0x8cc>
 800564a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800564c:	2a01      	cmp	r2, #1
 800564e:	f300 80af 	bgt.w	80057b0 <_dtoa_r+0x898>
 8005652:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005654:	2a00      	cmp	r2, #0
 8005656:	f000 80a7 	beq.w	80057a8 <_dtoa_r+0x890>
 800565a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800565e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005660:	9f06      	ldr	r7, [sp, #24]
 8005662:	9a06      	ldr	r2, [sp, #24]
 8005664:	2101      	movs	r1, #1
 8005666:	441a      	add	r2, r3
 8005668:	9206      	str	r2, [sp, #24]
 800566a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800566c:	4628      	mov	r0, r5
 800566e:	441a      	add	r2, r3
 8005670:	9209      	str	r2, [sp, #36]	; 0x24
 8005672:	f000 fb61 	bl	8005d38 <__i2b>
 8005676:	4606      	mov	r6, r0
 8005678:	2f00      	cmp	r7, #0
 800567a:	dd0c      	ble.n	8005696 <_dtoa_r+0x77e>
 800567c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567e:	2b00      	cmp	r3, #0
 8005680:	dd09      	ble.n	8005696 <_dtoa_r+0x77e>
 8005682:	42bb      	cmp	r3, r7
 8005684:	bfa8      	it	ge
 8005686:	463b      	movge	r3, r7
 8005688:	9a06      	ldr	r2, [sp, #24]
 800568a:	1aff      	subs	r7, r7, r3
 800568c:	1ad2      	subs	r2, r2, r3
 800568e:	9206      	str	r2, [sp, #24]
 8005690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	9309      	str	r3, [sp, #36]	; 0x24
 8005696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005698:	b1f3      	cbz	r3, 80056d8 <_dtoa_r+0x7c0>
 800569a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80a9 	beq.w	80057f4 <_dtoa_r+0x8dc>
 80056a2:	2c00      	cmp	r4, #0
 80056a4:	dd10      	ble.n	80056c8 <_dtoa_r+0x7b0>
 80056a6:	4631      	mov	r1, r6
 80056a8:	4622      	mov	r2, r4
 80056aa:	4628      	mov	r0, r5
 80056ac:	f000 fbfe 	bl	8005eac <__pow5mult>
 80056b0:	4652      	mov	r2, sl
 80056b2:	4601      	mov	r1, r0
 80056b4:	4606      	mov	r6, r0
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 fb54 	bl	8005d64 <__multiply>
 80056bc:	4680      	mov	r8, r0
 80056be:	4651      	mov	r1, sl
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 fa7f 	bl	8005bc4 <_Bfree>
 80056c6:	46c2      	mov	sl, r8
 80056c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ca:	1b1a      	subs	r2, r3, r4
 80056cc:	d004      	beq.n	80056d8 <_dtoa_r+0x7c0>
 80056ce:	4651      	mov	r1, sl
 80056d0:	4628      	mov	r0, r5
 80056d2:	f000 fbeb 	bl	8005eac <__pow5mult>
 80056d6:	4682      	mov	sl, r0
 80056d8:	2101      	movs	r1, #1
 80056da:	4628      	mov	r0, r5
 80056dc:	f000 fb2c 	bl	8005d38 <__i2b>
 80056e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056e2:	4604      	mov	r4, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f340 8087 	ble.w	80057f8 <_dtoa_r+0x8e0>
 80056ea:	461a      	mov	r2, r3
 80056ec:	4601      	mov	r1, r0
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 fbdc 	bl	8005eac <__pow5mult>
 80056f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056f6:	4604      	mov	r4, r0
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	f340 8080 	ble.w	80057fe <_dtoa_r+0x8e6>
 80056fe:	f04f 0800 	mov.w	r8, #0
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005708:	6918      	ldr	r0, [r3, #16]
 800570a:	f000 fac7 	bl	8005c9c <__hi0bits>
 800570e:	f1c0 0020 	rsb	r0, r0, #32
 8005712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005714:	4418      	add	r0, r3
 8005716:	f010 001f 	ands.w	r0, r0, #31
 800571a:	f000 8092 	beq.w	8005842 <_dtoa_r+0x92a>
 800571e:	f1c0 0320 	rsb	r3, r0, #32
 8005722:	2b04      	cmp	r3, #4
 8005724:	f340 808a 	ble.w	800583c <_dtoa_r+0x924>
 8005728:	f1c0 001c 	rsb	r0, r0, #28
 800572c:	9b06      	ldr	r3, [sp, #24]
 800572e:	4407      	add	r7, r0
 8005730:	4403      	add	r3, r0
 8005732:	9306      	str	r3, [sp, #24]
 8005734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005736:	4403      	add	r3, r0
 8005738:	9309      	str	r3, [sp, #36]	; 0x24
 800573a:	9b06      	ldr	r3, [sp, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	dd05      	ble.n	800574c <_dtoa_r+0x834>
 8005740:	4651      	mov	r1, sl
 8005742:	461a      	mov	r2, r3
 8005744:	4628      	mov	r0, r5
 8005746:	f000 fc0b 	bl	8005f60 <__lshift>
 800574a:	4682      	mov	sl, r0
 800574c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800574e:	2b00      	cmp	r3, #0
 8005750:	dd05      	ble.n	800575e <_dtoa_r+0x846>
 8005752:	4621      	mov	r1, r4
 8005754:	461a      	mov	r2, r3
 8005756:	4628      	mov	r0, r5
 8005758:	f000 fc02 	bl	8005f60 <__lshift>
 800575c:	4604      	mov	r4, r0
 800575e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d070      	beq.n	8005846 <_dtoa_r+0x92e>
 8005764:	4621      	mov	r1, r4
 8005766:	4650      	mov	r0, sl
 8005768:	f000 fc66 	bl	8006038 <__mcmp>
 800576c:	2800      	cmp	r0, #0
 800576e:	da6a      	bge.n	8005846 <_dtoa_r+0x92e>
 8005770:	2300      	movs	r3, #0
 8005772:	4651      	mov	r1, sl
 8005774:	220a      	movs	r2, #10
 8005776:	4628      	mov	r0, r5
 8005778:	f000 fa46 	bl	8005c08 <__multadd>
 800577c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800577e:	4682      	mov	sl, r0
 8005780:	f109 39ff 	add.w	r9, r9, #4294967295
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8193 	beq.w	8005ab0 <_dtoa_r+0xb98>
 800578a:	4631      	mov	r1, r6
 800578c:	2300      	movs	r3, #0
 800578e:	220a      	movs	r2, #10
 8005790:	4628      	mov	r0, r5
 8005792:	f000 fa39 	bl	8005c08 <__multadd>
 8005796:	f1bb 0f00 	cmp.w	fp, #0
 800579a:	4606      	mov	r6, r0
 800579c:	f300 8093 	bgt.w	80058c6 <_dtoa_r+0x9ae>
 80057a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	dc57      	bgt.n	8005856 <_dtoa_r+0x93e>
 80057a6:	e08e      	b.n	80058c6 <_dtoa_r+0x9ae>
 80057a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80057aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057ae:	e756      	b.n	800565e <_dtoa_r+0x746>
 80057b0:	9b02      	ldr	r3, [sp, #8]
 80057b2:	1e5c      	subs	r4, r3, #1
 80057b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b6:	42a3      	cmp	r3, r4
 80057b8:	bfb7      	itett	lt
 80057ba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80057bc:	1b1c      	subge	r4, r3, r4
 80057be:	1ae2      	sublt	r2, r4, r3
 80057c0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80057c2:	bfbe      	ittt	lt
 80057c4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80057c6:	189b      	addlt	r3, r3, r2
 80057c8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80057ca:	9b02      	ldr	r3, [sp, #8]
 80057cc:	bfb8      	it	lt
 80057ce:	2400      	movlt	r4, #0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bfbb      	ittet	lt
 80057d4:	9b06      	ldrlt	r3, [sp, #24]
 80057d6:	9a02      	ldrlt	r2, [sp, #8]
 80057d8:	9f06      	ldrge	r7, [sp, #24]
 80057da:	1a9f      	sublt	r7, r3, r2
 80057dc:	bfac      	ite	ge
 80057de:	9b02      	ldrge	r3, [sp, #8]
 80057e0:	2300      	movlt	r3, #0
 80057e2:	e73e      	b.n	8005662 <_dtoa_r+0x74a>
 80057e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80057e6:	9f06      	ldr	r7, [sp, #24]
 80057e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80057ea:	e745      	b.n	8005678 <_dtoa_r+0x760>
 80057ec:	3fe00000 	.word	0x3fe00000
 80057f0:	40240000 	.word	0x40240000
 80057f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057f6:	e76a      	b.n	80056ce <_dtoa_r+0x7b6>
 80057f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	dc19      	bgt.n	8005832 <_dtoa_r+0x91a>
 80057fe:	9b04      	ldr	r3, [sp, #16]
 8005800:	b9bb      	cbnz	r3, 8005832 <_dtoa_r+0x91a>
 8005802:	9b05      	ldr	r3, [sp, #20]
 8005804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005808:	b99b      	cbnz	r3, 8005832 <_dtoa_r+0x91a>
 800580a:	9b05      	ldr	r3, [sp, #20]
 800580c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005810:	0d1b      	lsrs	r3, r3, #20
 8005812:	051b      	lsls	r3, r3, #20
 8005814:	b183      	cbz	r3, 8005838 <_dtoa_r+0x920>
 8005816:	f04f 0801 	mov.w	r8, #1
 800581a:	9b06      	ldr	r3, [sp, #24]
 800581c:	3301      	adds	r3, #1
 800581e:	9306      	str	r3, [sp, #24]
 8005820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005822:	3301      	adds	r3, #1
 8005824:	9309      	str	r3, [sp, #36]	; 0x24
 8005826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005828:	2b00      	cmp	r3, #0
 800582a:	f47f af6a 	bne.w	8005702 <_dtoa_r+0x7ea>
 800582e:	2001      	movs	r0, #1
 8005830:	e76f      	b.n	8005712 <_dtoa_r+0x7fa>
 8005832:	f04f 0800 	mov.w	r8, #0
 8005836:	e7f6      	b.n	8005826 <_dtoa_r+0x90e>
 8005838:	4698      	mov	r8, r3
 800583a:	e7f4      	b.n	8005826 <_dtoa_r+0x90e>
 800583c:	f43f af7d 	beq.w	800573a <_dtoa_r+0x822>
 8005840:	4618      	mov	r0, r3
 8005842:	301c      	adds	r0, #28
 8005844:	e772      	b.n	800572c <_dtoa_r+0x814>
 8005846:	9b02      	ldr	r3, [sp, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	dc36      	bgt.n	80058ba <_dtoa_r+0x9a2>
 800584c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800584e:	2b02      	cmp	r3, #2
 8005850:	dd33      	ble.n	80058ba <_dtoa_r+0x9a2>
 8005852:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005856:	f1bb 0f00 	cmp.w	fp, #0
 800585a:	d10d      	bne.n	8005878 <_dtoa_r+0x960>
 800585c:	4621      	mov	r1, r4
 800585e:	465b      	mov	r3, fp
 8005860:	2205      	movs	r2, #5
 8005862:	4628      	mov	r0, r5
 8005864:	f000 f9d0 	bl	8005c08 <__multadd>
 8005868:	4601      	mov	r1, r0
 800586a:	4604      	mov	r4, r0
 800586c:	4650      	mov	r0, sl
 800586e:	f000 fbe3 	bl	8006038 <__mcmp>
 8005872:	2800      	cmp	r0, #0
 8005874:	f73f adb6 	bgt.w	80053e4 <_dtoa_r+0x4cc>
 8005878:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800587a:	9f08      	ldr	r7, [sp, #32]
 800587c:	ea6f 0903 	mvn.w	r9, r3
 8005880:	f04f 0800 	mov.w	r8, #0
 8005884:	4621      	mov	r1, r4
 8005886:	4628      	mov	r0, r5
 8005888:	f000 f99c 	bl	8005bc4 <_Bfree>
 800588c:	2e00      	cmp	r6, #0
 800588e:	f43f aea4 	beq.w	80055da <_dtoa_r+0x6c2>
 8005892:	f1b8 0f00 	cmp.w	r8, #0
 8005896:	d005      	beq.n	80058a4 <_dtoa_r+0x98c>
 8005898:	45b0      	cmp	r8, r6
 800589a:	d003      	beq.n	80058a4 <_dtoa_r+0x98c>
 800589c:	4641      	mov	r1, r8
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f990 	bl	8005bc4 <_Bfree>
 80058a4:	4631      	mov	r1, r6
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 f98c 	bl	8005bc4 <_Bfree>
 80058ac:	e695      	b.n	80055da <_dtoa_r+0x6c2>
 80058ae:	2400      	movs	r4, #0
 80058b0:	4626      	mov	r6, r4
 80058b2:	e7e1      	b.n	8005878 <_dtoa_r+0x960>
 80058b4:	46c1      	mov	r9, r8
 80058b6:	4626      	mov	r6, r4
 80058b8:	e594      	b.n	80053e4 <_dtoa_r+0x4cc>
 80058ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058bc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80fc 	beq.w	8005abe <_dtoa_r+0xba6>
 80058c6:	2f00      	cmp	r7, #0
 80058c8:	dd05      	ble.n	80058d6 <_dtoa_r+0x9be>
 80058ca:	4631      	mov	r1, r6
 80058cc:	463a      	mov	r2, r7
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 fb46 	bl	8005f60 <__lshift>
 80058d4:	4606      	mov	r6, r0
 80058d6:	f1b8 0f00 	cmp.w	r8, #0
 80058da:	d05c      	beq.n	8005996 <_dtoa_r+0xa7e>
 80058dc:	4628      	mov	r0, r5
 80058de:	6871      	ldr	r1, [r6, #4]
 80058e0:	f000 f930 	bl	8005b44 <_Balloc>
 80058e4:	4607      	mov	r7, r0
 80058e6:	b928      	cbnz	r0, 80058f4 <_dtoa_r+0x9dc>
 80058e8:	4602      	mov	r2, r0
 80058ea:	f240 21ea 	movw	r1, #746	; 0x2ea
 80058ee:	4b7e      	ldr	r3, [pc, #504]	; (8005ae8 <_dtoa_r+0xbd0>)
 80058f0:	f7ff bb26 	b.w	8004f40 <_dtoa_r+0x28>
 80058f4:	6932      	ldr	r2, [r6, #16]
 80058f6:	f106 010c 	add.w	r1, r6, #12
 80058fa:	3202      	adds	r2, #2
 80058fc:	0092      	lsls	r2, r2, #2
 80058fe:	300c      	adds	r0, #12
 8005900:	f000 f912 	bl	8005b28 <memcpy>
 8005904:	2201      	movs	r2, #1
 8005906:	4639      	mov	r1, r7
 8005908:	4628      	mov	r0, r5
 800590a:	f000 fb29 	bl	8005f60 <__lshift>
 800590e:	46b0      	mov	r8, r6
 8005910:	4606      	mov	r6, r0
 8005912:	9b08      	ldr	r3, [sp, #32]
 8005914:	3301      	adds	r3, #1
 8005916:	9302      	str	r3, [sp, #8]
 8005918:	9b08      	ldr	r3, [sp, #32]
 800591a:	445b      	add	r3, fp
 800591c:	930a      	str	r3, [sp, #40]	; 0x28
 800591e:	9b04      	ldr	r3, [sp, #16]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	9309      	str	r3, [sp, #36]	; 0x24
 8005926:	9b02      	ldr	r3, [sp, #8]
 8005928:	4621      	mov	r1, r4
 800592a:	4650      	mov	r0, sl
 800592c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005930:	f7ff fa64 	bl	8004dfc <quorem>
 8005934:	4603      	mov	r3, r0
 8005936:	4641      	mov	r1, r8
 8005938:	3330      	adds	r3, #48	; 0x30
 800593a:	9004      	str	r0, [sp, #16]
 800593c:	4650      	mov	r0, sl
 800593e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005940:	f000 fb7a 	bl	8006038 <__mcmp>
 8005944:	4632      	mov	r2, r6
 8005946:	9006      	str	r0, [sp, #24]
 8005948:	4621      	mov	r1, r4
 800594a:	4628      	mov	r0, r5
 800594c:	f000 fb90 	bl	8006070 <__mdiff>
 8005950:	68c2      	ldr	r2, [r0, #12]
 8005952:	4607      	mov	r7, r0
 8005954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005956:	bb02      	cbnz	r2, 800599a <_dtoa_r+0xa82>
 8005958:	4601      	mov	r1, r0
 800595a:	4650      	mov	r0, sl
 800595c:	f000 fb6c 	bl	8006038 <__mcmp>
 8005960:	4602      	mov	r2, r0
 8005962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005964:	4639      	mov	r1, r7
 8005966:	4628      	mov	r0, r5
 8005968:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800596c:	f000 f92a 	bl	8005bc4 <_Bfree>
 8005970:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005974:	9f02      	ldr	r7, [sp, #8]
 8005976:	ea43 0102 	orr.w	r1, r3, r2
 800597a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597c:	430b      	orrs	r3, r1
 800597e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005980:	d10d      	bne.n	800599e <_dtoa_r+0xa86>
 8005982:	2b39      	cmp	r3, #57	; 0x39
 8005984:	d027      	beq.n	80059d6 <_dtoa_r+0xabe>
 8005986:	9a06      	ldr	r2, [sp, #24]
 8005988:	2a00      	cmp	r2, #0
 800598a:	dd01      	ble.n	8005990 <_dtoa_r+0xa78>
 800598c:	9b04      	ldr	r3, [sp, #16]
 800598e:	3331      	adds	r3, #49	; 0x31
 8005990:	f88b 3000 	strb.w	r3, [fp]
 8005994:	e776      	b.n	8005884 <_dtoa_r+0x96c>
 8005996:	4630      	mov	r0, r6
 8005998:	e7b9      	b.n	800590e <_dtoa_r+0x9f6>
 800599a:	2201      	movs	r2, #1
 800599c:	e7e2      	b.n	8005964 <_dtoa_r+0xa4c>
 800599e:	9906      	ldr	r1, [sp, #24]
 80059a0:	2900      	cmp	r1, #0
 80059a2:	db04      	blt.n	80059ae <_dtoa_r+0xa96>
 80059a4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80059a6:	4301      	orrs	r1, r0
 80059a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059aa:	4301      	orrs	r1, r0
 80059ac:	d120      	bne.n	80059f0 <_dtoa_r+0xad8>
 80059ae:	2a00      	cmp	r2, #0
 80059b0:	ddee      	ble.n	8005990 <_dtoa_r+0xa78>
 80059b2:	4651      	mov	r1, sl
 80059b4:	2201      	movs	r2, #1
 80059b6:	4628      	mov	r0, r5
 80059b8:	9302      	str	r3, [sp, #8]
 80059ba:	f000 fad1 	bl	8005f60 <__lshift>
 80059be:	4621      	mov	r1, r4
 80059c0:	4682      	mov	sl, r0
 80059c2:	f000 fb39 	bl	8006038 <__mcmp>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	9b02      	ldr	r3, [sp, #8]
 80059ca:	dc02      	bgt.n	80059d2 <_dtoa_r+0xaba>
 80059cc:	d1e0      	bne.n	8005990 <_dtoa_r+0xa78>
 80059ce:	07da      	lsls	r2, r3, #31
 80059d0:	d5de      	bpl.n	8005990 <_dtoa_r+0xa78>
 80059d2:	2b39      	cmp	r3, #57	; 0x39
 80059d4:	d1da      	bne.n	800598c <_dtoa_r+0xa74>
 80059d6:	2339      	movs	r3, #57	; 0x39
 80059d8:	f88b 3000 	strb.w	r3, [fp]
 80059dc:	463b      	mov	r3, r7
 80059de:	461f      	mov	r7, r3
 80059e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	2a39      	cmp	r2, #57	; 0x39
 80059e8:	d050      	beq.n	8005a8c <_dtoa_r+0xb74>
 80059ea:	3201      	adds	r2, #1
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e749      	b.n	8005884 <_dtoa_r+0x96c>
 80059f0:	2a00      	cmp	r2, #0
 80059f2:	dd03      	ble.n	80059fc <_dtoa_r+0xae4>
 80059f4:	2b39      	cmp	r3, #57	; 0x39
 80059f6:	d0ee      	beq.n	80059d6 <_dtoa_r+0xabe>
 80059f8:	3301      	adds	r3, #1
 80059fa:	e7c9      	b.n	8005990 <_dtoa_r+0xa78>
 80059fc:	9a02      	ldr	r2, [sp, #8]
 80059fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a00:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a04:	428a      	cmp	r2, r1
 8005a06:	d02a      	beq.n	8005a5e <_dtoa_r+0xb46>
 8005a08:	4651      	mov	r1, sl
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	220a      	movs	r2, #10
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 f8fa 	bl	8005c08 <__multadd>
 8005a14:	45b0      	cmp	r8, r6
 8005a16:	4682      	mov	sl, r0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	f04f 020a 	mov.w	r2, #10
 8005a20:	4641      	mov	r1, r8
 8005a22:	4628      	mov	r0, r5
 8005a24:	d107      	bne.n	8005a36 <_dtoa_r+0xb1e>
 8005a26:	f000 f8ef 	bl	8005c08 <__multadd>
 8005a2a:	4680      	mov	r8, r0
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	9b02      	ldr	r3, [sp, #8]
 8005a30:	3301      	adds	r3, #1
 8005a32:	9302      	str	r3, [sp, #8]
 8005a34:	e777      	b.n	8005926 <_dtoa_r+0xa0e>
 8005a36:	f000 f8e7 	bl	8005c08 <__multadd>
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4680      	mov	r8, r0
 8005a3e:	2300      	movs	r3, #0
 8005a40:	220a      	movs	r2, #10
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 f8e0 	bl	8005c08 <__multadd>
 8005a48:	4606      	mov	r6, r0
 8005a4a:	e7f0      	b.n	8005a2e <_dtoa_r+0xb16>
 8005a4c:	f1bb 0f00 	cmp.w	fp, #0
 8005a50:	bfcc      	ite	gt
 8005a52:	465f      	movgt	r7, fp
 8005a54:	2701      	movle	r7, #1
 8005a56:	f04f 0800 	mov.w	r8, #0
 8005a5a:	9a08      	ldr	r2, [sp, #32]
 8005a5c:	4417      	add	r7, r2
 8005a5e:	4651      	mov	r1, sl
 8005a60:	2201      	movs	r2, #1
 8005a62:	4628      	mov	r0, r5
 8005a64:	9302      	str	r3, [sp, #8]
 8005a66:	f000 fa7b 	bl	8005f60 <__lshift>
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	4682      	mov	sl, r0
 8005a6e:	f000 fae3 	bl	8006038 <__mcmp>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	dcb2      	bgt.n	80059dc <_dtoa_r+0xac4>
 8005a76:	d102      	bne.n	8005a7e <_dtoa_r+0xb66>
 8005a78:	9b02      	ldr	r3, [sp, #8]
 8005a7a:	07db      	lsls	r3, r3, #31
 8005a7c:	d4ae      	bmi.n	80059dc <_dtoa_r+0xac4>
 8005a7e:	463b      	mov	r3, r7
 8005a80:	461f      	mov	r7, r3
 8005a82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a86:	2a30      	cmp	r2, #48	; 0x30
 8005a88:	d0fa      	beq.n	8005a80 <_dtoa_r+0xb68>
 8005a8a:	e6fb      	b.n	8005884 <_dtoa_r+0x96c>
 8005a8c:	9a08      	ldr	r2, [sp, #32]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d1a5      	bne.n	80059de <_dtoa_r+0xac6>
 8005a92:	2331      	movs	r3, #49	; 0x31
 8005a94:	f109 0901 	add.w	r9, r9, #1
 8005a98:	7013      	strb	r3, [r2, #0]
 8005a9a:	e6f3      	b.n	8005884 <_dtoa_r+0x96c>
 8005a9c:	4b13      	ldr	r3, [pc, #76]	; (8005aec <_dtoa_r+0xbd4>)
 8005a9e:	f7ff baa7 	b.w	8004ff0 <_dtoa_r+0xd8>
 8005aa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f47f aa80 	bne.w	8004faa <_dtoa_r+0x92>
 8005aaa:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <_dtoa_r+0xbd8>)
 8005aac:	f7ff baa0 	b.w	8004ff0 <_dtoa_r+0xd8>
 8005ab0:	f1bb 0f00 	cmp.w	fp, #0
 8005ab4:	dc03      	bgt.n	8005abe <_dtoa_r+0xba6>
 8005ab6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	f73f aecc 	bgt.w	8005856 <_dtoa_r+0x93e>
 8005abe:	9f08      	ldr	r7, [sp, #32]
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	4650      	mov	r0, sl
 8005ac4:	f7ff f99a 	bl	8004dfc <quorem>
 8005ac8:	9a08      	ldr	r2, [sp, #32]
 8005aca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ace:	f807 3b01 	strb.w	r3, [r7], #1
 8005ad2:	1aba      	subs	r2, r7, r2
 8005ad4:	4593      	cmp	fp, r2
 8005ad6:	ddb9      	ble.n	8005a4c <_dtoa_r+0xb34>
 8005ad8:	4651      	mov	r1, sl
 8005ada:	2300      	movs	r3, #0
 8005adc:	220a      	movs	r2, #10
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 f892 	bl	8005c08 <__multadd>
 8005ae4:	4682      	mov	sl, r0
 8005ae6:	e7eb      	b.n	8005ac0 <_dtoa_r+0xba8>
 8005ae8:	08007b0f 	.word	0x08007b0f
 8005aec:	08007a68 	.word	0x08007a68
 8005af0:	08007a8c 	.word	0x08007a8c

08005af4 <_localeconv_r>:
 8005af4:	4800      	ldr	r0, [pc, #0]	; (8005af8 <_localeconv_r+0x4>)
 8005af6:	4770      	bx	lr
 8005af8:	20000164 	.word	0x20000164

08005afc <malloc>:
 8005afc:	4b02      	ldr	r3, [pc, #8]	; (8005b08 <malloc+0xc>)
 8005afe:	4601      	mov	r1, r0
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	f000 bbfb 	b.w	80062fc <_malloc_r>
 8005b06:	bf00      	nop
 8005b08:	20000010 	.word	0x20000010

08005b0c <memchr>:
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	b510      	push	{r4, lr}
 8005b10:	b2c9      	uxtb	r1, r1
 8005b12:	4402      	add	r2, r0
 8005b14:	4293      	cmp	r3, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	d101      	bne.n	8005b1e <memchr+0x12>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e003      	b.n	8005b26 <memchr+0x1a>
 8005b1e:	7804      	ldrb	r4, [r0, #0]
 8005b20:	3301      	adds	r3, #1
 8005b22:	428c      	cmp	r4, r1
 8005b24:	d1f6      	bne.n	8005b14 <memchr+0x8>
 8005b26:	bd10      	pop	{r4, pc}

08005b28 <memcpy>:
 8005b28:	440a      	add	r2, r1
 8005b2a:	4291      	cmp	r1, r2
 8005b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b30:	d100      	bne.n	8005b34 <memcpy+0xc>
 8005b32:	4770      	bx	lr
 8005b34:	b510      	push	{r4, lr}
 8005b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b3a:	4291      	cmp	r1, r2
 8005b3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b40:	d1f9      	bne.n	8005b36 <memcpy+0xe>
 8005b42:	bd10      	pop	{r4, pc}

08005b44 <_Balloc>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b48:	4604      	mov	r4, r0
 8005b4a:	460d      	mov	r5, r1
 8005b4c:	b976      	cbnz	r6, 8005b6c <_Balloc+0x28>
 8005b4e:	2010      	movs	r0, #16
 8005b50:	f7ff ffd4 	bl	8005afc <malloc>
 8005b54:	4602      	mov	r2, r0
 8005b56:	6260      	str	r0, [r4, #36]	; 0x24
 8005b58:	b920      	cbnz	r0, 8005b64 <_Balloc+0x20>
 8005b5a:	2166      	movs	r1, #102	; 0x66
 8005b5c:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <_Balloc+0x78>)
 8005b5e:	4818      	ldr	r0, [pc, #96]	; (8005bc0 <_Balloc+0x7c>)
 8005b60:	f000 fd92 	bl	8006688 <__assert_func>
 8005b64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b68:	6006      	str	r6, [r0, #0]
 8005b6a:	60c6      	str	r6, [r0, #12]
 8005b6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b6e:	68f3      	ldr	r3, [r6, #12]
 8005b70:	b183      	cbz	r3, 8005b94 <_Balloc+0x50>
 8005b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b7a:	b9b8      	cbnz	r0, 8005bac <_Balloc+0x68>
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	fa01 f605 	lsl.w	r6, r1, r5
 8005b82:	1d72      	adds	r2, r6, #5
 8005b84:	4620      	mov	r0, r4
 8005b86:	0092      	lsls	r2, r2, #2
 8005b88:	f000 fb5e 	bl	8006248 <_calloc_r>
 8005b8c:	b160      	cbz	r0, 8005ba8 <_Balloc+0x64>
 8005b8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b92:	e00e      	b.n	8005bb2 <_Balloc+0x6e>
 8005b94:	2221      	movs	r2, #33	; 0x21
 8005b96:	2104      	movs	r1, #4
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f000 fb55 	bl	8006248 <_calloc_r>
 8005b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ba0:	60f0      	str	r0, [r6, #12]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e4      	bne.n	8005b72 <_Balloc+0x2e>
 8005ba8:	2000      	movs	r0, #0
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	6802      	ldr	r2, [r0, #0]
 8005bae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bb8:	e7f7      	b.n	8005baa <_Balloc+0x66>
 8005bba:	bf00      	nop
 8005bbc:	08007a99 	.word	0x08007a99
 8005bc0:	08007b20 	.word	0x08007b20

08005bc4 <_Bfree>:
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005bc8:	4605      	mov	r5, r0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	b976      	cbnz	r6, 8005bec <_Bfree+0x28>
 8005bce:	2010      	movs	r0, #16
 8005bd0:	f7ff ff94 	bl	8005afc <malloc>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	6268      	str	r0, [r5, #36]	; 0x24
 8005bd8:	b920      	cbnz	r0, 8005be4 <_Bfree+0x20>
 8005bda:	218a      	movs	r1, #138	; 0x8a
 8005bdc:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <_Bfree+0x3c>)
 8005bde:	4809      	ldr	r0, [pc, #36]	; (8005c04 <_Bfree+0x40>)
 8005be0:	f000 fd52 	bl	8006688 <__assert_func>
 8005be4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005be8:	6006      	str	r6, [r0, #0]
 8005bea:	60c6      	str	r6, [r0, #12]
 8005bec:	b13c      	cbz	r4, 8005bfe <_Bfree+0x3a>
 8005bee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bf0:	6862      	ldr	r2, [r4, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bf8:	6021      	str	r1, [r4, #0]
 8005bfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}
 8005c00:	08007a99 	.word	0x08007a99
 8005c04:	08007b20 	.word	0x08007b20

08005c08 <__multadd>:
 8005c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0c:	4698      	mov	r8, r3
 8005c0e:	460c      	mov	r4, r1
 8005c10:	2300      	movs	r3, #0
 8005c12:	690e      	ldr	r6, [r1, #16]
 8005c14:	4607      	mov	r7, r0
 8005c16:	f101 0014 	add.w	r0, r1, #20
 8005c1a:	6805      	ldr	r5, [r0, #0]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	b2a9      	uxth	r1, r5
 8005c20:	fb02 8101 	mla	r1, r2, r1, r8
 8005c24:	0c2d      	lsrs	r5, r5, #16
 8005c26:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005c2a:	fb02 c505 	mla	r5, r2, r5, ip
 8005c2e:	b289      	uxth	r1, r1
 8005c30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005c34:	429e      	cmp	r6, r3
 8005c36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005c3a:	f840 1b04 	str.w	r1, [r0], #4
 8005c3e:	dcec      	bgt.n	8005c1a <__multadd+0x12>
 8005c40:	f1b8 0f00 	cmp.w	r8, #0
 8005c44:	d022      	beq.n	8005c8c <__multadd+0x84>
 8005c46:	68a3      	ldr	r3, [r4, #8]
 8005c48:	42b3      	cmp	r3, r6
 8005c4a:	dc19      	bgt.n	8005c80 <__multadd+0x78>
 8005c4c:	6861      	ldr	r1, [r4, #4]
 8005c4e:	4638      	mov	r0, r7
 8005c50:	3101      	adds	r1, #1
 8005c52:	f7ff ff77 	bl	8005b44 <_Balloc>
 8005c56:	4605      	mov	r5, r0
 8005c58:	b928      	cbnz	r0, 8005c66 <__multadd+0x5e>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	21b5      	movs	r1, #181	; 0xb5
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <__multadd+0x8c>)
 8005c60:	480d      	ldr	r0, [pc, #52]	; (8005c98 <__multadd+0x90>)
 8005c62:	f000 fd11 	bl	8006688 <__assert_func>
 8005c66:	6922      	ldr	r2, [r4, #16]
 8005c68:	f104 010c 	add.w	r1, r4, #12
 8005c6c:	3202      	adds	r2, #2
 8005c6e:	0092      	lsls	r2, r2, #2
 8005c70:	300c      	adds	r0, #12
 8005c72:	f7ff ff59 	bl	8005b28 <memcpy>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f7ff ffa3 	bl	8005bc4 <_Bfree>
 8005c7e:	462c      	mov	r4, r5
 8005c80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005c84:	3601      	adds	r6, #1
 8005c86:	f8c3 8014 	str.w	r8, [r3, #20]
 8005c8a:	6126      	str	r6, [r4, #16]
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c92:	bf00      	nop
 8005c94:	08007b0f 	.word	0x08007b0f
 8005c98:	08007b20 	.word	0x08007b20

08005c9c <__hi0bits>:
 8005c9c:	0c02      	lsrs	r2, r0, #16
 8005c9e:	0412      	lsls	r2, r2, #16
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	b9ca      	cbnz	r2, 8005cd8 <__hi0bits+0x3c>
 8005ca4:	0403      	lsls	r3, r0, #16
 8005ca6:	2010      	movs	r0, #16
 8005ca8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005cac:	bf04      	itt	eq
 8005cae:	021b      	lsleq	r3, r3, #8
 8005cb0:	3008      	addeq	r0, #8
 8005cb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005cb6:	bf04      	itt	eq
 8005cb8:	011b      	lsleq	r3, r3, #4
 8005cba:	3004      	addeq	r0, #4
 8005cbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005cc0:	bf04      	itt	eq
 8005cc2:	009b      	lsleq	r3, r3, #2
 8005cc4:	3002      	addeq	r0, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	db05      	blt.n	8005cd6 <__hi0bits+0x3a>
 8005cca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005cce:	f100 0001 	add.w	r0, r0, #1
 8005cd2:	bf08      	it	eq
 8005cd4:	2020      	moveq	r0, #32
 8005cd6:	4770      	bx	lr
 8005cd8:	2000      	movs	r0, #0
 8005cda:	e7e5      	b.n	8005ca8 <__hi0bits+0xc>

08005cdc <__lo0bits>:
 8005cdc:	6803      	ldr	r3, [r0, #0]
 8005cde:	4602      	mov	r2, r0
 8005ce0:	f013 0007 	ands.w	r0, r3, #7
 8005ce4:	d00b      	beq.n	8005cfe <__lo0bits+0x22>
 8005ce6:	07d9      	lsls	r1, r3, #31
 8005ce8:	d422      	bmi.n	8005d30 <__lo0bits+0x54>
 8005cea:	0798      	lsls	r0, r3, #30
 8005cec:	bf49      	itett	mi
 8005cee:	085b      	lsrmi	r3, r3, #1
 8005cf0:	089b      	lsrpl	r3, r3, #2
 8005cf2:	2001      	movmi	r0, #1
 8005cf4:	6013      	strmi	r3, [r2, #0]
 8005cf6:	bf5c      	itt	pl
 8005cf8:	2002      	movpl	r0, #2
 8005cfa:	6013      	strpl	r3, [r2, #0]
 8005cfc:	4770      	bx	lr
 8005cfe:	b299      	uxth	r1, r3
 8005d00:	b909      	cbnz	r1, 8005d06 <__lo0bits+0x2a>
 8005d02:	2010      	movs	r0, #16
 8005d04:	0c1b      	lsrs	r3, r3, #16
 8005d06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005d0a:	bf04      	itt	eq
 8005d0c:	0a1b      	lsreq	r3, r3, #8
 8005d0e:	3008      	addeq	r0, #8
 8005d10:	0719      	lsls	r1, r3, #28
 8005d12:	bf04      	itt	eq
 8005d14:	091b      	lsreq	r3, r3, #4
 8005d16:	3004      	addeq	r0, #4
 8005d18:	0799      	lsls	r1, r3, #30
 8005d1a:	bf04      	itt	eq
 8005d1c:	089b      	lsreq	r3, r3, #2
 8005d1e:	3002      	addeq	r0, #2
 8005d20:	07d9      	lsls	r1, r3, #31
 8005d22:	d403      	bmi.n	8005d2c <__lo0bits+0x50>
 8005d24:	085b      	lsrs	r3, r3, #1
 8005d26:	f100 0001 	add.w	r0, r0, #1
 8005d2a:	d003      	beq.n	8005d34 <__lo0bits+0x58>
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	4770      	bx	lr
 8005d30:	2000      	movs	r0, #0
 8005d32:	4770      	bx	lr
 8005d34:	2020      	movs	r0, #32
 8005d36:	4770      	bx	lr

08005d38 <__i2b>:
 8005d38:	b510      	push	{r4, lr}
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	f7ff ff01 	bl	8005b44 <_Balloc>
 8005d42:	4602      	mov	r2, r0
 8005d44:	b928      	cbnz	r0, 8005d52 <__i2b+0x1a>
 8005d46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d4a:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <__i2b+0x24>)
 8005d4c:	4804      	ldr	r0, [pc, #16]	; (8005d60 <__i2b+0x28>)
 8005d4e:	f000 fc9b 	bl	8006688 <__assert_func>
 8005d52:	2301      	movs	r3, #1
 8005d54:	6144      	str	r4, [r0, #20]
 8005d56:	6103      	str	r3, [r0, #16]
 8005d58:	bd10      	pop	{r4, pc}
 8005d5a:	bf00      	nop
 8005d5c:	08007b0f 	.word	0x08007b0f
 8005d60:	08007b20 	.word	0x08007b20

08005d64 <__multiply>:
 8005d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d68:	4614      	mov	r4, r2
 8005d6a:	690a      	ldr	r2, [r1, #16]
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	460d      	mov	r5, r1
 8005d70:	429a      	cmp	r2, r3
 8005d72:	bfbe      	ittt	lt
 8005d74:	460b      	movlt	r3, r1
 8005d76:	4625      	movlt	r5, r4
 8005d78:	461c      	movlt	r4, r3
 8005d7a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005d7e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d82:	68ab      	ldr	r3, [r5, #8]
 8005d84:	6869      	ldr	r1, [r5, #4]
 8005d86:	eb0a 0709 	add.w	r7, sl, r9
 8005d8a:	42bb      	cmp	r3, r7
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	bfb8      	it	lt
 8005d90:	3101      	addlt	r1, #1
 8005d92:	f7ff fed7 	bl	8005b44 <_Balloc>
 8005d96:	b930      	cbnz	r0, 8005da6 <__multiply+0x42>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	f240 115d 	movw	r1, #349	; 0x15d
 8005d9e:	4b41      	ldr	r3, [pc, #260]	; (8005ea4 <__multiply+0x140>)
 8005da0:	4841      	ldr	r0, [pc, #260]	; (8005ea8 <__multiply+0x144>)
 8005da2:	f000 fc71 	bl	8006688 <__assert_func>
 8005da6:	f100 0614 	add.w	r6, r0, #20
 8005daa:	4633      	mov	r3, r6
 8005dac:	2200      	movs	r2, #0
 8005dae:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005db2:	4543      	cmp	r3, r8
 8005db4:	d31e      	bcc.n	8005df4 <__multiply+0x90>
 8005db6:	f105 0c14 	add.w	ip, r5, #20
 8005dba:	f104 0314 	add.w	r3, r4, #20
 8005dbe:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005dc2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005dc6:	9202      	str	r2, [sp, #8]
 8005dc8:	ebac 0205 	sub.w	r2, ip, r5
 8005dcc:	3a15      	subs	r2, #21
 8005dce:	f022 0203 	bic.w	r2, r2, #3
 8005dd2:	3204      	adds	r2, #4
 8005dd4:	f105 0115 	add.w	r1, r5, #21
 8005dd8:	458c      	cmp	ip, r1
 8005dda:	bf38      	it	cc
 8005ddc:	2204      	movcc	r2, #4
 8005dde:	9201      	str	r2, [sp, #4]
 8005de0:	9a02      	ldr	r2, [sp, #8]
 8005de2:	9303      	str	r3, [sp, #12]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d808      	bhi.n	8005dfa <__multiply+0x96>
 8005de8:	2f00      	cmp	r7, #0
 8005dea:	dc55      	bgt.n	8005e98 <__multiply+0x134>
 8005dec:	6107      	str	r7, [r0, #16]
 8005dee:	b005      	add	sp, #20
 8005df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df4:	f843 2b04 	str.w	r2, [r3], #4
 8005df8:	e7db      	b.n	8005db2 <__multiply+0x4e>
 8005dfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8005dfe:	f1ba 0f00 	cmp.w	sl, #0
 8005e02:	d020      	beq.n	8005e46 <__multiply+0xe2>
 8005e04:	46b1      	mov	r9, r6
 8005e06:	2200      	movs	r2, #0
 8005e08:	f105 0e14 	add.w	lr, r5, #20
 8005e0c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005e10:	f8d9 b000 	ldr.w	fp, [r9]
 8005e14:	b2a1      	uxth	r1, r4
 8005e16:	fa1f fb8b 	uxth.w	fp, fp
 8005e1a:	fb0a b101 	mla	r1, sl, r1, fp
 8005e1e:	4411      	add	r1, r2
 8005e20:	f8d9 2000 	ldr.w	r2, [r9]
 8005e24:	0c24      	lsrs	r4, r4, #16
 8005e26:	0c12      	lsrs	r2, r2, #16
 8005e28:	fb0a 2404 	mla	r4, sl, r4, r2
 8005e2c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005e30:	b289      	uxth	r1, r1
 8005e32:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005e36:	45f4      	cmp	ip, lr
 8005e38:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005e3c:	f849 1b04 	str.w	r1, [r9], #4
 8005e40:	d8e4      	bhi.n	8005e0c <__multiply+0xa8>
 8005e42:	9901      	ldr	r1, [sp, #4]
 8005e44:	5072      	str	r2, [r6, r1]
 8005e46:	9a03      	ldr	r2, [sp, #12]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e4e:	f1b9 0f00 	cmp.w	r9, #0
 8005e52:	d01f      	beq.n	8005e94 <__multiply+0x130>
 8005e54:	46b6      	mov	lr, r6
 8005e56:	f04f 0a00 	mov.w	sl, #0
 8005e5a:	6834      	ldr	r4, [r6, #0]
 8005e5c:	f105 0114 	add.w	r1, r5, #20
 8005e60:	880a      	ldrh	r2, [r1, #0]
 8005e62:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005e66:	b2a4      	uxth	r4, r4
 8005e68:	fb09 b202 	mla	r2, r9, r2, fp
 8005e6c:	4492      	add	sl, r2
 8005e6e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005e72:	f84e 4b04 	str.w	r4, [lr], #4
 8005e76:	f851 4b04 	ldr.w	r4, [r1], #4
 8005e7a:	f8be 2000 	ldrh.w	r2, [lr]
 8005e7e:	0c24      	lsrs	r4, r4, #16
 8005e80:	fb09 2404 	mla	r4, r9, r4, r2
 8005e84:	458c      	cmp	ip, r1
 8005e86:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005e8a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005e8e:	d8e7      	bhi.n	8005e60 <__multiply+0xfc>
 8005e90:	9a01      	ldr	r2, [sp, #4]
 8005e92:	50b4      	str	r4, [r6, r2]
 8005e94:	3604      	adds	r6, #4
 8005e96:	e7a3      	b.n	8005de0 <__multiply+0x7c>
 8005e98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1a5      	bne.n	8005dec <__multiply+0x88>
 8005ea0:	3f01      	subs	r7, #1
 8005ea2:	e7a1      	b.n	8005de8 <__multiply+0x84>
 8005ea4:	08007b0f 	.word	0x08007b0f
 8005ea8:	08007b20 	.word	0x08007b20

08005eac <__pow5mult>:
 8005eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb0:	4615      	mov	r5, r2
 8005eb2:	f012 0203 	ands.w	r2, r2, #3
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	460f      	mov	r7, r1
 8005eba:	d007      	beq.n	8005ecc <__pow5mult+0x20>
 8005ebc:	4c25      	ldr	r4, [pc, #148]	; (8005f54 <__pow5mult+0xa8>)
 8005ebe:	3a01      	subs	r2, #1
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ec6:	f7ff fe9f 	bl	8005c08 <__multadd>
 8005eca:	4607      	mov	r7, r0
 8005ecc:	10ad      	asrs	r5, r5, #2
 8005ece:	d03d      	beq.n	8005f4c <__pow5mult+0xa0>
 8005ed0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ed2:	b97c      	cbnz	r4, 8005ef4 <__pow5mult+0x48>
 8005ed4:	2010      	movs	r0, #16
 8005ed6:	f7ff fe11 	bl	8005afc <malloc>
 8005eda:	4602      	mov	r2, r0
 8005edc:	6270      	str	r0, [r6, #36]	; 0x24
 8005ede:	b928      	cbnz	r0, 8005eec <__pow5mult+0x40>
 8005ee0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ee4:	4b1c      	ldr	r3, [pc, #112]	; (8005f58 <__pow5mult+0xac>)
 8005ee6:	481d      	ldr	r0, [pc, #116]	; (8005f5c <__pow5mult+0xb0>)
 8005ee8:	f000 fbce 	bl	8006688 <__assert_func>
 8005eec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ef0:	6004      	str	r4, [r0, #0]
 8005ef2:	60c4      	str	r4, [r0, #12]
 8005ef4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ef8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005efc:	b94c      	cbnz	r4, 8005f12 <__pow5mult+0x66>
 8005efe:	f240 2171 	movw	r1, #625	; 0x271
 8005f02:	4630      	mov	r0, r6
 8005f04:	f7ff ff18 	bl	8005d38 <__i2b>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f10:	6003      	str	r3, [r0, #0]
 8005f12:	f04f 0900 	mov.w	r9, #0
 8005f16:	07eb      	lsls	r3, r5, #31
 8005f18:	d50a      	bpl.n	8005f30 <__pow5mult+0x84>
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f7ff ff20 	bl	8005d64 <__multiply>
 8005f24:	4680      	mov	r8, r0
 8005f26:	4639      	mov	r1, r7
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f7ff fe4b 	bl	8005bc4 <_Bfree>
 8005f2e:	4647      	mov	r7, r8
 8005f30:	106d      	asrs	r5, r5, #1
 8005f32:	d00b      	beq.n	8005f4c <__pow5mult+0xa0>
 8005f34:	6820      	ldr	r0, [r4, #0]
 8005f36:	b938      	cbnz	r0, 8005f48 <__pow5mult+0x9c>
 8005f38:	4622      	mov	r2, r4
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f7ff ff11 	bl	8005d64 <__multiply>
 8005f42:	6020      	str	r0, [r4, #0]
 8005f44:	f8c0 9000 	str.w	r9, [r0]
 8005f48:	4604      	mov	r4, r0
 8005f4a:	e7e4      	b.n	8005f16 <__pow5mult+0x6a>
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f52:	bf00      	nop
 8005f54:	08007c70 	.word	0x08007c70
 8005f58:	08007a99 	.word	0x08007a99
 8005f5c:	08007b20 	.word	0x08007b20

08005f60 <__lshift>:
 8005f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f64:	460c      	mov	r4, r1
 8005f66:	4607      	mov	r7, r0
 8005f68:	4691      	mov	r9, r2
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	6849      	ldr	r1, [r1, #4]
 8005f6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f72:	68a3      	ldr	r3, [r4, #8]
 8005f74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f78:	f108 0601 	add.w	r6, r8, #1
 8005f7c:	42b3      	cmp	r3, r6
 8005f7e:	db0b      	blt.n	8005f98 <__lshift+0x38>
 8005f80:	4638      	mov	r0, r7
 8005f82:	f7ff fddf 	bl	8005b44 <_Balloc>
 8005f86:	4605      	mov	r5, r0
 8005f88:	b948      	cbnz	r0, 8005f9e <__lshift+0x3e>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f90:	4b27      	ldr	r3, [pc, #156]	; (8006030 <__lshift+0xd0>)
 8005f92:	4828      	ldr	r0, [pc, #160]	; (8006034 <__lshift+0xd4>)
 8005f94:	f000 fb78 	bl	8006688 <__assert_func>
 8005f98:	3101      	adds	r1, #1
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	e7ee      	b.n	8005f7c <__lshift+0x1c>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f100 0114 	add.w	r1, r0, #20
 8005fa4:	f100 0210 	add.w	r2, r0, #16
 8005fa8:	4618      	mov	r0, r3
 8005faa:	4553      	cmp	r3, sl
 8005fac:	db33      	blt.n	8006016 <__lshift+0xb6>
 8005fae:	6920      	ldr	r0, [r4, #16]
 8005fb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fb4:	f104 0314 	add.w	r3, r4, #20
 8005fb8:	f019 091f 	ands.w	r9, r9, #31
 8005fbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005fc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005fc4:	d02b      	beq.n	800601e <__lshift+0xbe>
 8005fc6:	468a      	mov	sl, r1
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f1c9 0e20 	rsb	lr, r9, #32
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	fa00 f009 	lsl.w	r0, r0, r9
 8005fd4:	4302      	orrs	r2, r0
 8005fd6:	f84a 2b04 	str.w	r2, [sl], #4
 8005fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fde:	459c      	cmp	ip, r3
 8005fe0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005fe4:	d8f3      	bhi.n	8005fce <__lshift+0x6e>
 8005fe6:	ebac 0304 	sub.w	r3, ip, r4
 8005fea:	3b15      	subs	r3, #21
 8005fec:	f023 0303 	bic.w	r3, r3, #3
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	f104 0015 	add.w	r0, r4, #21
 8005ff6:	4584      	cmp	ip, r0
 8005ff8:	bf38      	it	cc
 8005ffa:	2304      	movcc	r3, #4
 8005ffc:	50ca      	str	r2, [r1, r3]
 8005ffe:	b10a      	cbz	r2, 8006004 <__lshift+0xa4>
 8006000:	f108 0602 	add.w	r6, r8, #2
 8006004:	3e01      	subs	r6, #1
 8006006:	4638      	mov	r0, r7
 8006008:	4621      	mov	r1, r4
 800600a:	612e      	str	r6, [r5, #16]
 800600c:	f7ff fdda 	bl	8005bc4 <_Bfree>
 8006010:	4628      	mov	r0, r5
 8006012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006016:	f842 0f04 	str.w	r0, [r2, #4]!
 800601a:	3301      	adds	r3, #1
 800601c:	e7c5      	b.n	8005faa <__lshift+0x4a>
 800601e:	3904      	subs	r1, #4
 8006020:	f853 2b04 	ldr.w	r2, [r3], #4
 8006024:	459c      	cmp	ip, r3
 8006026:	f841 2f04 	str.w	r2, [r1, #4]!
 800602a:	d8f9      	bhi.n	8006020 <__lshift+0xc0>
 800602c:	e7ea      	b.n	8006004 <__lshift+0xa4>
 800602e:	bf00      	nop
 8006030:	08007b0f 	.word	0x08007b0f
 8006034:	08007b20 	.word	0x08007b20

08006038 <__mcmp>:
 8006038:	4603      	mov	r3, r0
 800603a:	690a      	ldr	r2, [r1, #16]
 800603c:	6900      	ldr	r0, [r0, #16]
 800603e:	b530      	push	{r4, r5, lr}
 8006040:	1a80      	subs	r0, r0, r2
 8006042:	d10d      	bne.n	8006060 <__mcmp+0x28>
 8006044:	3314      	adds	r3, #20
 8006046:	3114      	adds	r1, #20
 8006048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800604c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006058:	4295      	cmp	r5, r2
 800605a:	d002      	beq.n	8006062 <__mcmp+0x2a>
 800605c:	d304      	bcc.n	8006068 <__mcmp+0x30>
 800605e:	2001      	movs	r0, #1
 8006060:	bd30      	pop	{r4, r5, pc}
 8006062:	42a3      	cmp	r3, r4
 8006064:	d3f4      	bcc.n	8006050 <__mcmp+0x18>
 8006066:	e7fb      	b.n	8006060 <__mcmp+0x28>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	e7f8      	b.n	8006060 <__mcmp+0x28>
	...

08006070 <__mdiff>:
 8006070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006074:	460c      	mov	r4, r1
 8006076:	4606      	mov	r6, r0
 8006078:	4611      	mov	r1, r2
 800607a:	4620      	mov	r0, r4
 800607c:	4692      	mov	sl, r2
 800607e:	f7ff ffdb 	bl	8006038 <__mcmp>
 8006082:	1e05      	subs	r5, r0, #0
 8006084:	d111      	bne.n	80060aa <__mdiff+0x3a>
 8006086:	4629      	mov	r1, r5
 8006088:	4630      	mov	r0, r6
 800608a:	f7ff fd5b 	bl	8005b44 <_Balloc>
 800608e:	4602      	mov	r2, r0
 8006090:	b928      	cbnz	r0, 800609e <__mdiff+0x2e>
 8006092:	f240 2132 	movw	r1, #562	; 0x232
 8006096:	4b3c      	ldr	r3, [pc, #240]	; (8006188 <__mdiff+0x118>)
 8006098:	483c      	ldr	r0, [pc, #240]	; (800618c <__mdiff+0x11c>)
 800609a:	f000 faf5 	bl	8006688 <__assert_func>
 800609e:	2301      	movs	r3, #1
 80060a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80060a4:	4610      	mov	r0, r2
 80060a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060aa:	bfa4      	itt	ge
 80060ac:	4653      	movge	r3, sl
 80060ae:	46a2      	movge	sl, r4
 80060b0:	4630      	mov	r0, r6
 80060b2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80060b6:	bfa6      	itte	ge
 80060b8:	461c      	movge	r4, r3
 80060ba:	2500      	movge	r5, #0
 80060bc:	2501      	movlt	r5, #1
 80060be:	f7ff fd41 	bl	8005b44 <_Balloc>
 80060c2:	4602      	mov	r2, r0
 80060c4:	b918      	cbnz	r0, 80060ce <__mdiff+0x5e>
 80060c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80060ca:	4b2f      	ldr	r3, [pc, #188]	; (8006188 <__mdiff+0x118>)
 80060cc:	e7e4      	b.n	8006098 <__mdiff+0x28>
 80060ce:	f100 0814 	add.w	r8, r0, #20
 80060d2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80060d6:	60c5      	str	r5, [r0, #12]
 80060d8:	f04f 0c00 	mov.w	ip, #0
 80060dc:	f10a 0514 	add.w	r5, sl, #20
 80060e0:	f10a 0010 	add.w	r0, sl, #16
 80060e4:	46c2      	mov	sl, r8
 80060e6:	6926      	ldr	r6, [r4, #16]
 80060e8:	f104 0914 	add.w	r9, r4, #20
 80060ec:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80060f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80060f4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80060f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80060fc:	fa1f f18b 	uxth.w	r1, fp
 8006100:	4461      	add	r1, ip
 8006102:	fa1f fc83 	uxth.w	ip, r3
 8006106:	0c1b      	lsrs	r3, r3, #16
 8006108:	eba1 010c 	sub.w	r1, r1, ip
 800610c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006110:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006114:	b289      	uxth	r1, r1
 8006116:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800611a:	454e      	cmp	r6, r9
 800611c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006120:	f84a 3b04 	str.w	r3, [sl], #4
 8006124:	d8e6      	bhi.n	80060f4 <__mdiff+0x84>
 8006126:	1b33      	subs	r3, r6, r4
 8006128:	3b15      	subs	r3, #21
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	3415      	adds	r4, #21
 8006130:	3304      	adds	r3, #4
 8006132:	42a6      	cmp	r6, r4
 8006134:	bf38      	it	cc
 8006136:	2304      	movcc	r3, #4
 8006138:	441d      	add	r5, r3
 800613a:	4443      	add	r3, r8
 800613c:	461e      	mov	r6, r3
 800613e:	462c      	mov	r4, r5
 8006140:	4574      	cmp	r4, lr
 8006142:	d30e      	bcc.n	8006162 <__mdiff+0xf2>
 8006144:	f10e 0103 	add.w	r1, lr, #3
 8006148:	1b49      	subs	r1, r1, r5
 800614a:	f021 0103 	bic.w	r1, r1, #3
 800614e:	3d03      	subs	r5, #3
 8006150:	45ae      	cmp	lr, r5
 8006152:	bf38      	it	cc
 8006154:	2100      	movcc	r1, #0
 8006156:	4419      	add	r1, r3
 8006158:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800615c:	b18b      	cbz	r3, 8006182 <__mdiff+0x112>
 800615e:	6117      	str	r7, [r2, #16]
 8006160:	e7a0      	b.n	80060a4 <__mdiff+0x34>
 8006162:	f854 8b04 	ldr.w	r8, [r4], #4
 8006166:	fa1f f188 	uxth.w	r1, r8
 800616a:	4461      	add	r1, ip
 800616c:	1408      	asrs	r0, r1, #16
 800616e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006172:	b289      	uxth	r1, r1
 8006174:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006178:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800617c:	f846 1b04 	str.w	r1, [r6], #4
 8006180:	e7de      	b.n	8006140 <__mdiff+0xd0>
 8006182:	3f01      	subs	r7, #1
 8006184:	e7e8      	b.n	8006158 <__mdiff+0xe8>
 8006186:	bf00      	nop
 8006188:	08007b0f 	.word	0x08007b0f
 800618c:	08007b20 	.word	0x08007b20

08006190 <__d2b>:
 8006190:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006194:	2101      	movs	r1, #1
 8006196:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800619a:	4690      	mov	r8, r2
 800619c:	461d      	mov	r5, r3
 800619e:	f7ff fcd1 	bl	8005b44 <_Balloc>
 80061a2:	4604      	mov	r4, r0
 80061a4:	b930      	cbnz	r0, 80061b4 <__d2b+0x24>
 80061a6:	4602      	mov	r2, r0
 80061a8:	f240 310a 	movw	r1, #778	; 0x30a
 80061ac:	4b24      	ldr	r3, [pc, #144]	; (8006240 <__d2b+0xb0>)
 80061ae:	4825      	ldr	r0, [pc, #148]	; (8006244 <__d2b+0xb4>)
 80061b0:	f000 fa6a 	bl	8006688 <__assert_func>
 80061b4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80061b8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80061bc:	bb2d      	cbnz	r5, 800620a <__d2b+0x7a>
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	f1b8 0300 	subs.w	r3, r8, #0
 80061c4:	d026      	beq.n	8006214 <__d2b+0x84>
 80061c6:	4668      	mov	r0, sp
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	f7ff fd87 	bl	8005cdc <__lo0bits>
 80061ce:	9900      	ldr	r1, [sp, #0]
 80061d0:	b1f0      	cbz	r0, 8006210 <__d2b+0x80>
 80061d2:	9a01      	ldr	r2, [sp, #4]
 80061d4:	f1c0 0320 	rsb	r3, r0, #32
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	430b      	orrs	r3, r1
 80061de:	40c2      	lsrs	r2, r0
 80061e0:	6163      	str	r3, [r4, #20]
 80061e2:	9201      	str	r2, [sp, #4]
 80061e4:	9b01      	ldr	r3, [sp, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bf14      	ite	ne
 80061ea:	2102      	movne	r1, #2
 80061ec:	2101      	moveq	r1, #1
 80061ee:	61a3      	str	r3, [r4, #24]
 80061f0:	6121      	str	r1, [r4, #16]
 80061f2:	b1c5      	cbz	r5, 8006226 <__d2b+0x96>
 80061f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061f8:	4405      	add	r5, r0
 80061fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061fe:	603d      	str	r5, [r7, #0]
 8006200:	6030      	str	r0, [r6, #0]
 8006202:	4620      	mov	r0, r4
 8006204:	b002      	add	sp, #8
 8006206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800620a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800620e:	e7d6      	b.n	80061be <__d2b+0x2e>
 8006210:	6161      	str	r1, [r4, #20]
 8006212:	e7e7      	b.n	80061e4 <__d2b+0x54>
 8006214:	a801      	add	r0, sp, #4
 8006216:	f7ff fd61 	bl	8005cdc <__lo0bits>
 800621a:	2101      	movs	r1, #1
 800621c:	9b01      	ldr	r3, [sp, #4]
 800621e:	6121      	str	r1, [r4, #16]
 8006220:	6163      	str	r3, [r4, #20]
 8006222:	3020      	adds	r0, #32
 8006224:	e7e5      	b.n	80061f2 <__d2b+0x62>
 8006226:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800622a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800622e:	6038      	str	r0, [r7, #0]
 8006230:	6918      	ldr	r0, [r3, #16]
 8006232:	f7ff fd33 	bl	8005c9c <__hi0bits>
 8006236:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800623a:	6031      	str	r1, [r6, #0]
 800623c:	e7e1      	b.n	8006202 <__d2b+0x72>
 800623e:	bf00      	nop
 8006240:	08007b0f 	.word	0x08007b0f
 8006244:	08007b20 	.word	0x08007b20

08006248 <_calloc_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	fb02 f501 	mul.w	r5, r2, r1
 800624e:	4629      	mov	r1, r5
 8006250:	f000 f854 	bl	80062fc <_malloc_r>
 8006254:	4604      	mov	r4, r0
 8006256:	b118      	cbz	r0, 8006260 <_calloc_r+0x18>
 8006258:	462a      	mov	r2, r5
 800625a:	2100      	movs	r1, #0
 800625c:	f7fe f932 	bl	80044c4 <memset>
 8006260:	4620      	mov	r0, r4
 8006262:	bd38      	pop	{r3, r4, r5, pc}

08006264 <_free_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	4605      	mov	r5, r0
 8006268:	2900      	cmp	r1, #0
 800626a:	d043      	beq.n	80062f4 <_free_r+0x90>
 800626c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006270:	1f0c      	subs	r4, r1, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	bfb8      	it	lt
 8006276:	18e4      	addlt	r4, r4, r3
 8006278:	f000 fa62 	bl	8006740 <__malloc_lock>
 800627c:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <_free_r+0x94>)
 800627e:	6813      	ldr	r3, [r2, #0]
 8006280:	4610      	mov	r0, r2
 8006282:	b933      	cbnz	r3, 8006292 <_free_r+0x2e>
 8006284:	6063      	str	r3, [r4, #4]
 8006286:	6014      	str	r4, [r2, #0]
 8006288:	4628      	mov	r0, r5
 800628a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800628e:	f000 ba5d 	b.w	800674c <__malloc_unlock>
 8006292:	42a3      	cmp	r3, r4
 8006294:	d90a      	bls.n	80062ac <_free_r+0x48>
 8006296:	6821      	ldr	r1, [r4, #0]
 8006298:	1862      	adds	r2, r4, r1
 800629a:	4293      	cmp	r3, r2
 800629c:	bf01      	itttt	eq
 800629e:	681a      	ldreq	r2, [r3, #0]
 80062a0:	685b      	ldreq	r3, [r3, #4]
 80062a2:	1852      	addeq	r2, r2, r1
 80062a4:	6022      	streq	r2, [r4, #0]
 80062a6:	6063      	str	r3, [r4, #4]
 80062a8:	6004      	str	r4, [r0, #0]
 80062aa:	e7ed      	b.n	8006288 <_free_r+0x24>
 80062ac:	461a      	mov	r2, r3
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	b10b      	cbz	r3, 80062b6 <_free_r+0x52>
 80062b2:	42a3      	cmp	r3, r4
 80062b4:	d9fa      	bls.n	80062ac <_free_r+0x48>
 80062b6:	6811      	ldr	r1, [r2, #0]
 80062b8:	1850      	adds	r0, r2, r1
 80062ba:	42a0      	cmp	r0, r4
 80062bc:	d10b      	bne.n	80062d6 <_free_r+0x72>
 80062be:	6820      	ldr	r0, [r4, #0]
 80062c0:	4401      	add	r1, r0
 80062c2:	1850      	adds	r0, r2, r1
 80062c4:	4283      	cmp	r3, r0
 80062c6:	6011      	str	r1, [r2, #0]
 80062c8:	d1de      	bne.n	8006288 <_free_r+0x24>
 80062ca:	6818      	ldr	r0, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	4401      	add	r1, r0
 80062d0:	6011      	str	r1, [r2, #0]
 80062d2:	6053      	str	r3, [r2, #4]
 80062d4:	e7d8      	b.n	8006288 <_free_r+0x24>
 80062d6:	d902      	bls.n	80062de <_free_r+0x7a>
 80062d8:	230c      	movs	r3, #12
 80062da:	602b      	str	r3, [r5, #0]
 80062dc:	e7d4      	b.n	8006288 <_free_r+0x24>
 80062de:	6820      	ldr	r0, [r4, #0]
 80062e0:	1821      	adds	r1, r4, r0
 80062e2:	428b      	cmp	r3, r1
 80062e4:	bf01      	itttt	eq
 80062e6:	6819      	ldreq	r1, [r3, #0]
 80062e8:	685b      	ldreq	r3, [r3, #4]
 80062ea:	1809      	addeq	r1, r1, r0
 80062ec:	6021      	streq	r1, [r4, #0]
 80062ee:	6063      	str	r3, [r4, #4]
 80062f0:	6054      	str	r4, [r2, #4]
 80062f2:	e7c9      	b.n	8006288 <_free_r+0x24>
 80062f4:	bd38      	pop	{r3, r4, r5, pc}
 80062f6:	bf00      	nop
 80062f8:	20000634 	.word	0x20000634

080062fc <_malloc_r>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	1ccd      	adds	r5, r1, #3
 8006300:	f025 0503 	bic.w	r5, r5, #3
 8006304:	3508      	adds	r5, #8
 8006306:	2d0c      	cmp	r5, #12
 8006308:	bf38      	it	cc
 800630a:	250c      	movcc	r5, #12
 800630c:	2d00      	cmp	r5, #0
 800630e:	4606      	mov	r6, r0
 8006310:	db01      	blt.n	8006316 <_malloc_r+0x1a>
 8006312:	42a9      	cmp	r1, r5
 8006314:	d903      	bls.n	800631e <_malloc_r+0x22>
 8006316:	230c      	movs	r3, #12
 8006318:	6033      	str	r3, [r6, #0]
 800631a:	2000      	movs	r0, #0
 800631c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800631e:	f000 fa0f 	bl	8006740 <__malloc_lock>
 8006322:	4921      	ldr	r1, [pc, #132]	; (80063a8 <_malloc_r+0xac>)
 8006324:	680a      	ldr	r2, [r1, #0]
 8006326:	4614      	mov	r4, r2
 8006328:	b99c      	cbnz	r4, 8006352 <_malloc_r+0x56>
 800632a:	4f20      	ldr	r7, [pc, #128]	; (80063ac <_malloc_r+0xb0>)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	b923      	cbnz	r3, 800633a <_malloc_r+0x3e>
 8006330:	4621      	mov	r1, r4
 8006332:	4630      	mov	r0, r6
 8006334:	f000 f998 	bl	8006668 <_sbrk_r>
 8006338:	6038      	str	r0, [r7, #0]
 800633a:	4629      	mov	r1, r5
 800633c:	4630      	mov	r0, r6
 800633e:	f000 f993 	bl	8006668 <_sbrk_r>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d123      	bne.n	800638e <_malloc_r+0x92>
 8006346:	230c      	movs	r3, #12
 8006348:	4630      	mov	r0, r6
 800634a:	6033      	str	r3, [r6, #0]
 800634c:	f000 f9fe 	bl	800674c <__malloc_unlock>
 8006350:	e7e3      	b.n	800631a <_malloc_r+0x1e>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	1b5b      	subs	r3, r3, r5
 8006356:	d417      	bmi.n	8006388 <_malloc_r+0x8c>
 8006358:	2b0b      	cmp	r3, #11
 800635a:	d903      	bls.n	8006364 <_malloc_r+0x68>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	441c      	add	r4, r3
 8006360:	6025      	str	r5, [r4, #0]
 8006362:	e004      	b.n	800636e <_malloc_r+0x72>
 8006364:	6863      	ldr	r3, [r4, #4]
 8006366:	42a2      	cmp	r2, r4
 8006368:	bf0c      	ite	eq
 800636a:	600b      	streq	r3, [r1, #0]
 800636c:	6053      	strne	r3, [r2, #4]
 800636e:	4630      	mov	r0, r6
 8006370:	f000 f9ec 	bl	800674c <__malloc_unlock>
 8006374:	f104 000b 	add.w	r0, r4, #11
 8006378:	1d23      	adds	r3, r4, #4
 800637a:	f020 0007 	bic.w	r0, r0, #7
 800637e:	1ac2      	subs	r2, r0, r3
 8006380:	d0cc      	beq.n	800631c <_malloc_r+0x20>
 8006382:	1a1b      	subs	r3, r3, r0
 8006384:	50a3      	str	r3, [r4, r2]
 8006386:	e7c9      	b.n	800631c <_malloc_r+0x20>
 8006388:	4622      	mov	r2, r4
 800638a:	6864      	ldr	r4, [r4, #4]
 800638c:	e7cc      	b.n	8006328 <_malloc_r+0x2c>
 800638e:	1cc4      	adds	r4, r0, #3
 8006390:	f024 0403 	bic.w	r4, r4, #3
 8006394:	42a0      	cmp	r0, r4
 8006396:	d0e3      	beq.n	8006360 <_malloc_r+0x64>
 8006398:	1a21      	subs	r1, r4, r0
 800639a:	4630      	mov	r0, r6
 800639c:	f000 f964 	bl	8006668 <_sbrk_r>
 80063a0:	3001      	adds	r0, #1
 80063a2:	d1dd      	bne.n	8006360 <_malloc_r+0x64>
 80063a4:	e7cf      	b.n	8006346 <_malloc_r+0x4a>
 80063a6:	bf00      	nop
 80063a8:	20000634 	.word	0x20000634
 80063ac:	20000638 	.word	0x20000638

080063b0 <__ssputs_r>:
 80063b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	688e      	ldr	r6, [r1, #8]
 80063b6:	4682      	mov	sl, r0
 80063b8:	429e      	cmp	r6, r3
 80063ba:	460c      	mov	r4, r1
 80063bc:	4690      	mov	r8, r2
 80063be:	461f      	mov	r7, r3
 80063c0:	d838      	bhi.n	8006434 <__ssputs_r+0x84>
 80063c2:	898a      	ldrh	r2, [r1, #12]
 80063c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063c8:	d032      	beq.n	8006430 <__ssputs_r+0x80>
 80063ca:	6825      	ldr	r5, [r4, #0]
 80063cc:	6909      	ldr	r1, [r1, #16]
 80063ce:	3301      	adds	r3, #1
 80063d0:	eba5 0901 	sub.w	r9, r5, r1
 80063d4:	6965      	ldr	r5, [r4, #20]
 80063d6:	444b      	add	r3, r9
 80063d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063e0:	106d      	asrs	r5, r5, #1
 80063e2:	429d      	cmp	r5, r3
 80063e4:	bf38      	it	cc
 80063e6:	461d      	movcc	r5, r3
 80063e8:	0553      	lsls	r3, r2, #21
 80063ea:	d531      	bpl.n	8006450 <__ssputs_r+0xa0>
 80063ec:	4629      	mov	r1, r5
 80063ee:	f7ff ff85 	bl	80062fc <_malloc_r>
 80063f2:	4606      	mov	r6, r0
 80063f4:	b950      	cbnz	r0, 800640c <__ssputs_r+0x5c>
 80063f6:	230c      	movs	r3, #12
 80063f8:	f04f 30ff 	mov.w	r0, #4294967295
 80063fc:	f8ca 3000 	str.w	r3, [sl]
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640c:	464a      	mov	r2, r9
 800640e:	6921      	ldr	r1, [r4, #16]
 8006410:	f7ff fb8a 	bl	8005b28 <memcpy>
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800641a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	6126      	str	r6, [r4, #16]
 8006422:	444e      	add	r6, r9
 8006424:	6026      	str	r6, [r4, #0]
 8006426:	463e      	mov	r6, r7
 8006428:	6165      	str	r5, [r4, #20]
 800642a:	eba5 0509 	sub.w	r5, r5, r9
 800642e:	60a5      	str	r5, [r4, #8]
 8006430:	42be      	cmp	r6, r7
 8006432:	d900      	bls.n	8006436 <__ssputs_r+0x86>
 8006434:	463e      	mov	r6, r7
 8006436:	4632      	mov	r2, r6
 8006438:	4641      	mov	r1, r8
 800643a:	6820      	ldr	r0, [r4, #0]
 800643c:	f000 f966 	bl	800670c <memmove>
 8006440:	68a3      	ldr	r3, [r4, #8]
 8006442:	6822      	ldr	r2, [r4, #0]
 8006444:	1b9b      	subs	r3, r3, r6
 8006446:	4432      	add	r2, r6
 8006448:	2000      	movs	r0, #0
 800644a:	60a3      	str	r3, [r4, #8]
 800644c:	6022      	str	r2, [r4, #0]
 800644e:	e7db      	b.n	8006408 <__ssputs_r+0x58>
 8006450:	462a      	mov	r2, r5
 8006452:	f000 f981 	bl	8006758 <_realloc_r>
 8006456:	4606      	mov	r6, r0
 8006458:	2800      	cmp	r0, #0
 800645a:	d1e1      	bne.n	8006420 <__ssputs_r+0x70>
 800645c:	4650      	mov	r0, sl
 800645e:	6921      	ldr	r1, [r4, #16]
 8006460:	f7ff ff00 	bl	8006264 <_free_r>
 8006464:	e7c7      	b.n	80063f6 <__ssputs_r+0x46>
	...

08006468 <_svfiprintf_r>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	4698      	mov	r8, r3
 800646e:	898b      	ldrh	r3, [r1, #12]
 8006470:	4607      	mov	r7, r0
 8006472:	061b      	lsls	r3, r3, #24
 8006474:	460d      	mov	r5, r1
 8006476:	4614      	mov	r4, r2
 8006478:	b09d      	sub	sp, #116	; 0x74
 800647a:	d50e      	bpl.n	800649a <_svfiprintf_r+0x32>
 800647c:	690b      	ldr	r3, [r1, #16]
 800647e:	b963      	cbnz	r3, 800649a <_svfiprintf_r+0x32>
 8006480:	2140      	movs	r1, #64	; 0x40
 8006482:	f7ff ff3b 	bl	80062fc <_malloc_r>
 8006486:	6028      	str	r0, [r5, #0]
 8006488:	6128      	str	r0, [r5, #16]
 800648a:	b920      	cbnz	r0, 8006496 <_svfiprintf_r+0x2e>
 800648c:	230c      	movs	r3, #12
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	f04f 30ff 	mov.w	r0, #4294967295
 8006494:	e0d1      	b.n	800663a <_svfiprintf_r+0x1d2>
 8006496:	2340      	movs	r3, #64	; 0x40
 8006498:	616b      	str	r3, [r5, #20]
 800649a:	2300      	movs	r3, #0
 800649c:	9309      	str	r3, [sp, #36]	; 0x24
 800649e:	2320      	movs	r3, #32
 80064a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064a4:	2330      	movs	r3, #48	; 0x30
 80064a6:	f04f 0901 	mov.w	r9, #1
 80064aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80064ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006654 <_svfiprintf_r+0x1ec>
 80064b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064b6:	4623      	mov	r3, r4
 80064b8:	469a      	mov	sl, r3
 80064ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064be:	b10a      	cbz	r2, 80064c4 <_svfiprintf_r+0x5c>
 80064c0:	2a25      	cmp	r2, #37	; 0x25
 80064c2:	d1f9      	bne.n	80064b8 <_svfiprintf_r+0x50>
 80064c4:	ebba 0b04 	subs.w	fp, sl, r4
 80064c8:	d00b      	beq.n	80064e2 <_svfiprintf_r+0x7a>
 80064ca:	465b      	mov	r3, fp
 80064cc:	4622      	mov	r2, r4
 80064ce:	4629      	mov	r1, r5
 80064d0:	4638      	mov	r0, r7
 80064d2:	f7ff ff6d 	bl	80063b0 <__ssputs_r>
 80064d6:	3001      	adds	r0, #1
 80064d8:	f000 80aa 	beq.w	8006630 <_svfiprintf_r+0x1c8>
 80064dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064de:	445a      	add	r2, fp
 80064e0:	9209      	str	r2, [sp, #36]	; 0x24
 80064e2:	f89a 3000 	ldrb.w	r3, [sl]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 80a2 	beq.w	8006630 <_svfiprintf_r+0x1c8>
 80064ec:	2300      	movs	r3, #0
 80064ee:	f04f 32ff 	mov.w	r2, #4294967295
 80064f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064f6:	f10a 0a01 	add.w	sl, sl, #1
 80064fa:	9304      	str	r3, [sp, #16]
 80064fc:	9307      	str	r3, [sp, #28]
 80064fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006502:	931a      	str	r3, [sp, #104]	; 0x68
 8006504:	4654      	mov	r4, sl
 8006506:	2205      	movs	r2, #5
 8006508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800650c:	4851      	ldr	r0, [pc, #324]	; (8006654 <_svfiprintf_r+0x1ec>)
 800650e:	f7ff fafd 	bl	8005b0c <memchr>
 8006512:	9a04      	ldr	r2, [sp, #16]
 8006514:	b9d8      	cbnz	r0, 800654e <_svfiprintf_r+0xe6>
 8006516:	06d0      	lsls	r0, r2, #27
 8006518:	bf44      	itt	mi
 800651a:	2320      	movmi	r3, #32
 800651c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006520:	0711      	lsls	r1, r2, #28
 8006522:	bf44      	itt	mi
 8006524:	232b      	movmi	r3, #43	; 0x2b
 8006526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800652a:	f89a 3000 	ldrb.w	r3, [sl]
 800652e:	2b2a      	cmp	r3, #42	; 0x2a
 8006530:	d015      	beq.n	800655e <_svfiprintf_r+0xf6>
 8006532:	4654      	mov	r4, sl
 8006534:	2000      	movs	r0, #0
 8006536:	f04f 0c0a 	mov.w	ip, #10
 800653a:	9a07      	ldr	r2, [sp, #28]
 800653c:	4621      	mov	r1, r4
 800653e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006542:	3b30      	subs	r3, #48	; 0x30
 8006544:	2b09      	cmp	r3, #9
 8006546:	d94e      	bls.n	80065e6 <_svfiprintf_r+0x17e>
 8006548:	b1b0      	cbz	r0, 8006578 <_svfiprintf_r+0x110>
 800654a:	9207      	str	r2, [sp, #28]
 800654c:	e014      	b.n	8006578 <_svfiprintf_r+0x110>
 800654e:	eba0 0308 	sub.w	r3, r0, r8
 8006552:	fa09 f303 	lsl.w	r3, r9, r3
 8006556:	4313      	orrs	r3, r2
 8006558:	46a2      	mov	sl, r4
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	e7d2      	b.n	8006504 <_svfiprintf_r+0x9c>
 800655e:	9b03      	ldr	r3, [sp, #12]
 8006560:	1d19      	adds	r1, r3, #4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	9103      	str	r1, [sp, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	bfbb      	ittet	lt
 800656a:	425b      	neglt	r3, r3
 800656c:	f042 0202 	orrlt.w	r2, r2, #2
 8006570:	9307      	strge	r3, [sp, #28]
 8006572:	9307      	strlt	r3, [sp, #28]
 8006574:	bfb8      	it	lt
 8006576:	9204      	strlt	r2, [sp, #16]
 8006578:	7823      	ldrb	r3, [r4, #0]
 800657a:	2b2e      	cmp	r3, #46	; 0x2e
 800657c:	d10c      	bne.n	8006598 <_svfiprintf_r+0x130>
 800657e:	7863      	ldrb	r3, [r4, #1]
 8006580:	2b2a      	cmp	r3, #42	; 0x2a
 8006582:	d135      	bne.n	80065f0 <_svfiprintf_r+0x188>
 8006584:	9b03      	ldr	r3, [sp, #12]
 8006586:	3402      	adds	r4, #2
 8006588:	1d1a      	adds	r2, r3, #4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	9203      	str	r2, [sp, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	bfb8      	it	lt
 8006592:	f04f 33ff 	movlt.w	r3, #4294967295
 8006596:	9305      	str	r3, [sp, #20]
 8006598:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006664 <_svfiprintf_r+0x1fc>
 800659c:	2203      	movs	r2, #3
 800659e:	4650      	mov	r0, sl
 80065a0:	7821      	ldrb	r1, [r4, #0]
 80065a2:	f7ff fab3 	bl	8005b0c <memchr>
 80065a6:	b140      	cbz	r0, 80065ba <_svfiprintf_r+0x152>
 80065a8:	2340      	movs	r3, #64	; 0x40
 80065aa:	eba0 000a 	sub.w	r0, r0, sl
 80065ae:	fa03 f000 	lsl.w	r0, r3, r0
 80065b2:	9b04      	ldr	r3, [sp, #16]
 80065b4:	3401      	adds	r4, #1
 80065b6:	4303      	orrs	r3, r0
 80065b8:	9304      	str	r3, [sp, #16]
 80065ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065be:	2206      	movs	r2, #6
 80065c0:	4825      	ldr	r0, [pc, #148]	; (8006658 <_svfiprintf_r+0x1f0>)
 80065c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065c6:	f7ff faa1 	bl	8005b0c <memchr>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d038      	beq.n	8006640 <_svfiprintf_r+0x1d8>
 80065ce:	4b23      	ldr	r3, [pc, #140]	; (800665c <_svfiprintf_r+0x1f4>)
 80065d0:	bb1b      	cbnz	r3, 800661a <_svfiprintf_r+0x1b2>
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	3307      	adds	r3, #7
 80065d6:	f023 0307 	bic.w	r3, r3, #7
 80065da:	3308      	adds	r3, #8
 80065dc:	9303      	str	r3, [sp, #12]
 80065de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e0:	4433      	add	r3, r6
 80065e2:	9309      	str	r3, [sp, #36]	; 0x24
 80065e4:	e767      	b.n	80064b6 <_svfiprintf_r+0x4e>
 80065e6:	460c      	mov	r4, r1
 80065e8:	2001      	movs	r0, #1
 80065ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80065ee:	e7a5      	b.n	800653c <_svfiprintf_r+0xd4>
 80065f0:	2300      	movs	r3, #0
 80065f2:	f04f 0c0a 	mov.w	ip, #10
 80065f6:	4619      	mov	r1, r3
 80065f8:	3401      	adds	r4, #1
 80065fa:	9305      	str	r3, [sp, #20]
 80065fc:	4620      	mov	r0, r4
 80065fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006602:	3a30      	subs	r2, #48	; 0x30
 8006604:	2a09      	cmp	r2, #9
 8006606:	d903      	bls.n	8006610 <_svfiprintf_r+0x1a8>
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0c5      	beq.n	8006598 <_svfiprintf_r+0x130>
 800660c:	9105      	str	r1, [sp, #20]
 800660e:	e7c3      	b.n	8006598 <_svfiprintf_r+0x130>
 8006610:	4604      	mov	r4, r0
 8006612:	2301      	movs	r3, #1
 8006614:	fb0c 2101 	mla	r1, ip, r1, r2
 8006618:	e7f0      	b.n	80065fc <_svfiprintf_r+0x194>
 800661a:	ab03      	add	r3, sp, #12
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	462a      	mov	r2, r5
 8006620:	4638      	mov	r0, r7
 8006622:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <_svfiprintf_r+0x1f8>)
 8006624:	a904      	add	r1, sp, #16
 8006626:	f7fd fff3 	bl	8004610 <_printf_float>
 800662a:	1c42      	adds	r2, r0, #1
 800662c:	4606      	mov	r6, r0
 800662e:	d1d6      	bne.n	80065de <_svfiprintf_r+0x176>
 8006630:	89ab      	ldrh	r3, [r5, #12]
 8006632:	065b      	lsls	r3, r3, #25
 8006634:	f53f af2c 	bmi.w	8006490 <_svfiprintf_r+0x28>
 8006638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800663a:	b01d      	add	sp, #116	; 0x74
 800663c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006640:	ab03      	add	r3, sp, #12
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	462a      	mov	r2, r5
 8006646:	4638      	mov	r0, r7
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <_svfiprintf_r+0x1f8>)
 800664a:	a904      	add	r1, sp, #16
 800664c:	f7fe fa7c 	bl	8004b48 <_printf_i>
 8006650:	e7eb      	b.n	800662a <_svfiprintf_r+0x1c2>
 8006652:	bf00      	nop
 8006654:	08007c7c 	.word	0x08007c7c
 8006658:	08007c86 	.word	0x08007c86
 800665c:	08004611 	.word	0x08004611
 8006660:	080063b1 	.word	0x080063b1
 8006664:	08007c82 	.word	0x08007c82

08006668 <_sbrk_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	2300      	movs	r3, #0
 800666c:	4d05      	ldr	r5, [pc, #20]	; (8006684 <_sbrk_r+0x1c>)
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	f7fb fc70 	bl	8001f58 <_sbrk>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d102      	bne.n	8006682 <_sbrk_r+0x1a>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	b103      	cbz	r3, 8006682 <_sbrk_r+0x1a>
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	200006fc 	.word	0x200006fc

08006688 <__assert_func>:
 8006688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800668a:	4614      	mov	r4, r2
 800668c:	461a      	mov	r2, r3
 800668e:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <__assert_func+0x2c>)
 8006690:	4605      	mov	r5, r0
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68d8      	ldr	r0, [r3, #12]
 8006696:	b14c      	cbz	r4, 80066ac <__assert_func+0x24>
 8006698:	4b07      	ldr	r3, [pc, #28]	; (80066b8 <__assert_func+0x30>)
 800669a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800669e:	9100      	str	r1, [sp, #0]
 80066a0:	462b      	mov	r3, r5
 80066a2:	4906      	ldr	r1, [pc, #24]	; (80066bc <__assert_func+0x34>)
 80066a4:	f000 f80e 	bl	80066c4 <fiprintf>
 80066a8:	f000 faa2 	bl	8006bf0 <abort>
 80066ac:	4b04      	ldr	r3, [pc, #16]	; (80066c0 <__assert_func+0x38>)
 80066ae:	461c      	mov	r4, r3
 80066b0:	e7f3      	b.n	800669a <__assert_func+0x12>
 80066b2:	bf00      	nop
 80066b4:	20000010 	.word	0x20000010
 80066b8:	08007c8d 	.word	0x08007c8d
 80066bc:	08007c9a 	.word	0x08007c9a
 80066c0:	08007cc8 	.word	0x08007cc8

080066c4 <fiprintf>:
 80066c4:	b40e      	push	{r1, r2, r3}
 80066c6:	b503      	push	{r0, r1, lr}
 80066c8:	4601      	mov	r1, r0
 80066ca:	ab03      	add	r3, sp, #12
 80066cc:	4805      	ldr	r0, [pc, #20]	; (80066e4 <fiprintf+0x20>)
 80066ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d2:	6800      	ldr	r0, [r0, #0]
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	f000 f88d 	bl	80067f4 <_vfiprintf_r>
 80066da:	b002      	add	sp, #8
 80066dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80066e0:	b003      	add	sp, #12
 80066e2:	4770      	bx	lr
 80066e4:	20000010 	.word	0x20000010

080066e8 <__ascii_mbtowc>:
 80066e8:	b082      	sub	sp, #8
 80066ea:	b901      	cbnz	r1, 80066ee <__ascii_mbtowc+0x6>
 80066ec:	a901      	add	r1, sp, #4
 80066ee:	b142      	cbz	r2, 8006702 <__ascii_mbtowc+0x1a>
 80066f0:	b14b      	cbz	r3, 8006706 <__ascii_mbtowc+0x1e>
 80066f2:	7813      	ldrb	r3, [r2, #0]
 80066f4:	600b      	str	r3, [r1, #0]
 80066f6:	7812      	ldrb	r2, [r2, #0]
 80066f8:	1e10      	subs	r0, r2, #0
 80066fa:	bf18      	it	ne
 80066fc:	2001      	movne	r0, #1
 80066fe:	b002      	add	sp, #8
 8006700:	4770      	bx	lr
 8006702:	4610      	mov	r0, r2
 8006704:	e7fb      	b.n	80066fe <__ascii_mbtowc+0x16>
 8006706:	f06f 0001 	mvn.w	r0, #1
 800670a:	e7f8      	b.n	80066fe <__ascii_mbtowc+0x16>

0800670c <memmove>:
 800670c:	4288      	cmp	r0, r1
 800670e:	b510      	push	{r4, lr}
 8006710:	eb01 0402 	add.w	r4, r1, r2
 8006714:	d902      	bls.n	800671c <memmove+0x10>
 8006716:	4284      	cmp	r4, r0
 8006718:	4623      	mov	r3, r4
 800671a:	d807      	bhi.n	800672c <memmove+0x20>
 800671c:	1e43      	subs	r3, r0, #1
 800671e:	42a1      	cmp	r1, r4
 8006720:	d008      	beq.n	8006734 <memmove+0x28>
 8006722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800672a:	e7f8      	b.n	800671e <memmove+0x12>
 800672c:	4601      	mov	r1, r0
 800672e:	4402      	add	r2, r0
 8006730:	428a      	cmp	r2, r1
 8006732:	d100      	bne.n	8006736 <memmove+0x2a>
 8006734:	bd10      	pop	{r4, pc}
 8006736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800673a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800673e:	e7f7      	b.n	8006730 <memmove+0x24>

08006740 <__malloc_lock>:
 8006740:	4801      	ldr	r0, [pc, #4]	; (8006748 <__malloc_lock+0x8>)
 8006742:	f000 bc15 	b.w	8006f70 <__retarget_lock_acquire_recursive>
 8006746:	bf00      	nop
 8006748:	20000704 	.word	0x20000704

0800674c <__malloc_unlock>:
 800674c:	4801      	ldr	r0, [pc, #4]	; (8006754 <__malloc_unlock+0x8>)
 800674e:	f000 bc10 	b.w	8006f72 <__retarget_lock_release_recursive>
 8006752:	bf00      	nop
 8006754:	20000704 	.word	0x20000704

08006758 <_realloc_r>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	4607      	mov	r7, r0
 800675c:	4614      	mov	r4, r2
 800675e:	460e      	mov	r6, r1
 8006760:	b921      	cbnz	r1, 800676c <_realloc_r+0x14>
 8006762:	4611      	mov	r1, r2
 8006764:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006768:	f7ff bdc8 	b.w	80062fc <_malloc_r>
 800676c:	b922      	cbnz	r2, 8006778 <_realloc_r+0x20>
 800676e:	f7ff fd79 	bl	8006264 <_free_r>
 8006772:	4625      	mov	r5, r4
 8006774:	4628      	mov	r0, r5
 8006776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006778:	f000 fc60 	bl	800703c <_malloc_usable_size_r>
 800677c:	42a0      	cmp	r0, r4
 800677e:	d20f      	bcs.n	80067a0 <_realloc_r+0x48>
 8006780:	4621      	mov	r1, r4
 8006782:	4638      	mov	r0, r7
 8006784:	f7ff fdba 	bl	80062fc <_malloc_r>
 8006788:	4605      	mov	r5, r0
 800678a:	2800      	cmp	r0, #0
 800678c:	d0f2      	beq.n	8006774 <_realloc_r+0x1c>
 800678e:	4631      	mov	r1, r6
 8006790:	4622      	mov	r2, r4
 8006792:	f7ff f9c9 	bl	8005b28 <memcpy>
 8006796:	4631      	mov	r1, r6
 8006798:	4638      	mov	r0, r7
 800679a:	f7ff fd63 	bl	8006264 <_free_r>
 800679e:	e7e9      	b.n	8006774 <_realloc_r+0x1c>
 80067a0:	4635      	mov	r5, r6
 80067a2:	e7e7      	b.n	8006774 <_realloc_r+0x1c>

080067a4 <__sfputc_r>:
 80067a4:	6893      	ldr	r3, [r2, #8]
 80067a6:	b410      	push	{r4}
 80067a8:	3b01      	subs	r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	6093      	str	r3, [r2, #8]
 80067ae:	da07      	bge.n	80067c0 <__sfputc_r+0x1c>
 80067b0:	6994      	ldr	r4, [r2, #24]
 80067b2:	42a3      	cmp	r3, r4
 80067b4:	db01      	blt.n	80067ba <__sfputc_r+0x16>
 80067b6:	290a      	cmp	r1, #10
 80067b8:	d102      	bne.n	80067c0 <__sfputc_r+0x1c>
 80067ba:	bc10      	pop	{r4}
 80067bc:	f000 b94a 	b.w	8006a54 <__swbuf_r>
 80067c0:	6813      	ldr	r3, [r2, #0]
 80067c2:	1c58      	adds	r0, r3, #1
 80067c4:	6010      	str	r0, [r2, #0]
 80067c6:	7019      	strb	r1, [r3, #0]
 80067c8:	4608      	mov	r0, r1
 80067ca:	bc10      	pop	{r4}
 80067cc:	4770      	bx	lr

080067ce <__sfputs_r>:
 80067ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d0:	4606      	mov	r6, r0
 80067d2:	460f      	mov	r7, r1
 80067d4:	4614      	mov	r4, r2
 80067d6:	18d5      	adds	r5, r2, r3
 80067d8:	42ac      	cmp	r4, r5
 80067da:	d101      	bne.n	80067e0 <__sfputs_r+0x12>
 80067dc:	2000      	movs	r0, #0
 80067de:	e007      	b.n	80067f0 <__sfputs_r+0x22>
 80067e0:	463a      	mov	r2, r7
 80067e2:	4630      	mov	r0, r6
 80067e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e8:	f7ff ffdc 	bl	80067a4 <__sfputc_r>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d1f3      	bne.n	80067d8 <__sfputs_r+0xa>
 80067f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067f4 <_vfiprintf_r>:
 80067f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f8:	460d      	mov	r5, r1
 80067fa:	4614      	mov	r4, r2
 80067fc:	4698      	mov	r8, r3
 80067fe:	4606      	mov	r6, r0
 8006800:	b09d      	sub	sp, #116	; 0x74
 8006802:	b118      	cbz	r0, 800680c <_vfiprintf_r+0x18>
 8006804:	6983      	ldr	r3, [r0, #24]
 8006806:	b90b      	cbnz	r3, 800680c <_vfiprintf_r+0x18>
 8006808:	f000 fb14 	bl	8006e34 <__sinit>
 800680c:	4b89      	ldr	r3, [pc, #548]	; (8006a34 <_vfiprintf_r+0x240>)
 800680e:	429d      	cmp	r5, r3
 8006810:	d11b      	bne.n	800684a <_vfiprintf_r+0x56>
 8006812:	6875      	ldr	r5, [r6, #4]
 8006814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006816:	07d9      	lsls	r1, r3, #31
 8006818:	d405      	bmi.n	8006826 <_vfiprintf_r+0x32>
 800681a:	89ab      	ldrh	r3, [r5, #12]
 800681c:	059a      	lsls	r2, r3, #22
 800681e:	d402      	bmi.n	8006826 <_vfiprintf_r+0x32>
 8006820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006822:	f000 fba5 	bl	8006f70 <__retarget_lock_acquire_recursive>
 8006826:	89ab      	ldrh	r3, [r5, #12]
 8006828:	071b      	lsls	r3, r3, #28
 800682a:	d501      	bpl.n	8006830 <_vfiprintf_r+0x3c>
 800682c:	692b      	ldr	r3, [r5, #16]
 800682e:	b9eb      	cbnz	r3, 800686c <_vfiprintf_r+0x78>
 8006830:	4629      	mov	r1, r5
 8006832:	4630      	mov	r0, r6
 8006834:	f000 f96e 	bl	8006b14 <__swsetup_r>
 8006838:	b1c0      	cbz	r0, 800686c <_vfiprintf_r+0x78>
 800683a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800683c:	07dc      	lsls	r4, r3, #31
 800683e:	d50e      	bpl.n	800685e <_vfiprintf_r+0x6a>
 8006840:	f04f 30ff 	mov.w	r0, #4294967295
 8006844:	b01d      	add	sp, #116	; 0x74
 8006846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800684a:	4b7b      	ldr	r3, [pc, #492]	; (8006a38 <_vfiprintf_r+0x244>)
 800684c:	429d      	cmp	r5, r3
 800684e:	d101      	bne.n	8006854 <_vfiprintf_r+0x60>
 8006850:	68b5      	ldr	r5, [r6, #8]
 8006852:	e7df      	b.n	8006814 <_vfiprintf_r+0x20>
 8006854:	4b79      	ldr	r3, [pc, #484]	; (8006a3c <_vfiprintf_r+0x248>)
 8006856:	429d      	cmp	r5, r3
 8006858:	bf08      	it	eq
 800685a:	68f5      	ldreq	r5, [r6, #12]
 800685c:	e7da      	b.n	8006814 <_vfiprintf_r+0x20>
 800685e:	89ab      	ldrh	r3, [r5, #12]
 8006860:	0598      	lsls	r0, r3, #22
 8006862:	d4ed      	bmi.n	8006840 <_vfiprintf_r+0x4c>
 8006864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006866:	f000 fb84 	bl	8006f72 <__retarget_lock_release_recursive>
 800686a:	e7e9      	b.n	8006840 <_vfiprintf_r+0x4c>
 800686c:	2300      	movs	r3, #0
 800686e:	9309      	str	r3, [sp, #36]	; 0x24
 8006870:	2320      	movs	r3, #32
 8006872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006876:	2330      	movs	r3, #48	; 0x30
 8006878:	f04f 0901 	mov.w	r9, #1
 800687c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006880:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006a40 <_vfiprintf_r+0x24c>
 8006884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006888:	4623      	mov	r3, r4
 800688a:	469a      	mov	sl, r3
 800688c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006890:	b10a      	cbz	r2, 8006896 <_vfiprintf_r+0xa2>
 8006892:	2a25      	cmp	r2, #37	; 0x25
 8006894:	d1f9      	bne.n	800688a <_vfiprintf_r+0x96>
 8006896:	ebba 0b04 	subs.w	fp, sl, r4
 800689a:	d00b      	beq.n	80068b4 <_vfiprintf_r+0xc0>
 800689c:	465b      	mov	r3, fp
 800689e:	4622      	mov	r2, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	4630      	mov	r0, r6
 80068a4:	f7ff ff93 	bl	80067ce <__sfputs_r>
 80068a8:	3001      	adds	r0, #1
 80068aa:	f000 80aa 	beq.w	8006a02 <_vfiprintf_r+0x20e>
 80068ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068b0:	445a      	add	r2, fp
 80068b2:	9209      	str	r2, [sp, #36]	; 0x24
 80068b4:	f89a 3000 	ldrb.w	r3, [sl]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 80a2 	beq.w	8006a02 <_vfiprintf_r+0x20e>
 80068be:	2300      	movs	r3, #0
 80068c0:	f04f 32ff 	mov.w	r2, #4294967295
 80068c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068c8:	f10a 0a01 	add.w	sl, sl, #1
 80068cc:	9304      	str	r3, [sp, #16]
 80068ce:	9307      	str	r3, [sp, #28]
 80068d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068d4:	931a      	str	r3, [sp, #104]	; 0x68
 80068d6:	4654      	mov	r4, sl
 80068d8:	2205      	movs	r2, #5
 80068da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068de:	4858      	ldr	r0, [pc, #352]	; (8006a40 <_vfiprintf_r+0x24c>)
 80068e0:	f7ff f914 	bl	8005b0c <memchr>
 80068e4:	9a04      	ldr	r2, [sp, #16]
 80068e6:	b9d8      	cbnz	r0, 8006920 <_vfiprintf_r+0x12c>
 80068e8:	06d1      	lsls	r1, r2, #27
 80068ea:	bf44      	itt	mi
 80068ec:	2320      	movmi	r3, #32
 80068ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068f2:	0713      	lsls	r3, r2, #28
 80068f4:	bf44      	itt	mi
 80068f6:	232b      	movmi	r3, #43	; 0x2b
 80068f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006900:	2b2a      	cmp	r3, #42	; 0x2a
 8006902:	d015      	beq.n	8006930 <_vfiprintf_r+0x13c>
 8006904:	4654      	mov	r4, sl
 8006906:	2000      	movs	r0, #0
 8006908:	f04f 0c0a 	mov.w	ip, #10
 800690c:	9a07      	ldr	r2, [sp, #28]
 800690e:	4621      	mov	r1, r4
 8006910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006914:	3b30      	subs	r3, #48	; 0x30
 8006916:	2b09      	cmp	r3, #9
 8006918:	d94e      	bls.n	80069b8 <_vfiprintf_r+0x1c4>
 800691a:	b1b0      	cbz	r0, 800694a <_vfiprintf_r+0x156>
 800691c:	9207      	str	r2, [sp, #28]
 800691e:	e014      	b.n	800694a <_vfiprintf_r+0x156>
 8006920:	eba0 0308 	sub.w	r3, r0, r8
 8006924:	fa09 f303 	lsl.w	r3, r9, r3
 8006928:	4313      	orrs	r3, r2
 800692a:	46a2      	mov	sl, r4
 800692c:	9304      	str	r3, [sp, #16]
 800692e:	e7d2      	b.n	80068d6 <_vfiprintf_r+0xe2>
 8006930:	9b03      	ldr	r3, [sp, #12]
 8006932:	1d19      	adds	r1, r3, #4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	9103      	str	r1, [sp, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	bfbb      	ittet	lt
 800693c:	425b      	neglt	r3, r3
 800693e:	f042 0202 	orrlt.w	r2, r2, #2
 8006942:	9307      	strge	r3, [sp, #28]
 8006944:	9307      	strlt	r3, [sp, #28]
 8006946:	bfb8      	it	lt
 8006948:	9204      	strlt	r2, [sp, #16]
 800694a:	7823      	ldrb	r3, [r4, #0]
 800694c:	2b2e      	cmp	r3, #46	; 0x2e
 800694e:	d10c      	bne.n	800696a <_vfiprintf_r+0x176>
 8006950:	7863      	ldrb	r3, [r4, #1]
 8006952:	2b2a      	cmp	r3, #42	; 0x2a
 8006954:	d135      	bne.n	80069c2 <_vfiprintf_r+0x1ce>
 8006956:	9b03      	ldr	r3, [sp, #12]
 8006958:	3402      	adds	r4, #2
 800695a:	1d1a      	adds	r2, r3, #4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	9203      	str	r2, [sp, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	bfb8      	it	lt
 8006964:	f04f 33ff 	movlt.w	r3, #4294967295
 8006968:	9305      	str	r3, [sp, #20]
 800696a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a50 <_vfiprintf_r+0x25c>
 800696e:	2203      	movs	r2, #3
 8006970:	4650      	mov	r0, sl
 8006972:	7821      	ldrb	r1, [r4, #0]
 8006974:	f7ff f8ca 	bl	8005b0c <memchr>
 8006978:	b140      	cbz	r0, 800698c <_vfiprintf_r+0x198>
 800697a:	2340      	movs	r3, #64	; 0x40
 800697c:	eba0 000a 	sub.w	r0, r0, sl
 8006980:	fa03 f000 	lsl.w	r0, r3, r0
 8006984:	9b04      	ldr	r3, [sp, #16]
 8006986:	3401      	adds	r4, #1
 8006988:	4303      	orrs	r3, r0
 800698a:	9304      	str	r3, [sp, #16]
 800698c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006990:	2206      	movs	r2, #6
 8006992:	482c      	ldr	r0, [pc, #176]	; (8006a44 <_vfiprintf_r+0x250>)
 8006994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006998:	f7ff f8b8 	bl	8005b0c <memchr>
 800699c:	2800      	cmp	r0, #0
 800699e:	d03f      	beq.n	8006a20 <_vfiprintf_r+0x22c>
 80069a0:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <_vfiprintf_r+0x254>)
 80069a2:	bb1b      	cbnz	r3, 80069ec <_vfiprintf_r+0x1f8>
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	3307      	adds	r3, #7
 80069a8:	f023 0307 	bic.w	r3, r3, #7
 80069ac:	3308      	adds	r3, #8
 80069ae:	9303      	str	r3, [sp, #12]
 80069b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b2:	443b      	add	r3, r7
 80069b4:	9309      	str	r3, [sp, #36]	; 0x24
 80069b6:	e767      	b.n	8006888 <_vfiprintf_r+0x94>
 80069b8:	460c      	mov	r4, r1
 80069ba:	2001      	movs	r0, #1
 80069bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80069c0:	e7a5      	b.n	800690e <_vfiprintf_r+0x11a>
 80069c2:	2300      	movs	r3, #0
 80069c4:	f04f 0c0a 	mov.w	ip, #10
 80069c8:	4619      	mov	r1, r3
 80069ca:	3401      	adds	r4, #1
 80069cc:	9305      	str	r3, [sp, #20]
 80069ce:	4620      	mov	r0, r4
 80069d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069d4:	3a30      	subs	r2, #48	; 0x30
 80069d6:	2a09      	cmp	r2, #9
 80069d8:	d903      	bls.n	80069e2 <_vfiprintf_r+0x1ee>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0c5      	beq.n	800696a <_vfiprintf_r+0x176>
 80069de:	9105      	str	r1, [sp, #20]
 80069e0:	e7c3      	b.n	800696a <_vfiprintf_r+0x176>
 80069e2:	4604      	mov	r4, r0
 80069e4:	2301      	movs	r3, #1
 80069e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80069ea:	e7f0      	b.n	80069ce <_vfiprintf_r+0x1da>
 80069ec:	ab03      	add	r3, sp, #12
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	462a      	mov	r2, r5
 80069f2:	4630      	mov	r0, r6
 80069f4:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <_vfiprintf_r+0x258>)
 80069f6:	a904      	add	r1, sp, #16
 80069f8:	f7fd fe0a 	bl	8004610 <_printf_float>
 80069fc:	4607      	mov	r7, r0
 80069fe:	1c78      	adds	r0, r7, #1
 8006a00:	d1d6      	bne.n	80069b0 <_vfiprintf_r+0x1bc>
 8006a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a04:	07d9      	lsls	r1, r3, #31
 8006a06:	d405      	bmi.n	8006a14 <_vfiprintf_r+0x220>
 8006a08:	89ab      	ldrh	r3, [r5, #12]
 8006a0a:	059a      	lsls	r2, r3, #22
 8006a0c:	d402      	bmi.n	8006a14 <_vfiprintf_r+0x220>
 8006a0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a10:	f000 faaf 	bl	8006f72 <__retarget_lock_release_recursive>
 8006a14:	89ab      	ldrh	r3, [r5, #12]
 8006a16:	065b      	lsls	r3, r3, #25
 8006a18:	f53f af12 	bmi.w	8006840 <_vfiprintf_r+0x4c>
 8006a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a1e:	e711      	b.n	8006844 <_vfiprintf_r+0x50>
 8006a20:	ab03      	add	r3, sp, #12
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	462a      	mov	r2, r5
 8006a26:	4630      	mov	r0, r6
 8006a28:	4b08      	ldr	r3, [pc, #32]	; (8006a4c <_vfiprintf_r+0x258>)
 8006a2a:	a904      	add	r1, sp, #16
 8006a2c:	f7fe f88c 	bl	8004b48 <_printf_i>
 8006a30:	e7e4      	b.n	80069fc <_vfiprintf_r+0x208>
 8006a32:	bf00      	nop
 8006a34:	08007df4 	.word	0x08007df4
 8006a38:	08007e14 	.word	0x08007e14
 8006a3c:	08007dd4 	.word	0x08007dd4
 8006a40:	08007c7c 	.word	0x08007c7c
 8006a44:	08007c86 	.word	0x08007c86
 8006a48:	08004611 	.word	0x08004611
 8006a4c:	080067cf 	.word	0x080067cf
 8006a50:	08007c82 	.word	0x08007c82

08006a54 <__swbuf_r>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	460e      	mov	r6, r1
 8006a58:	4614      	mov	r4, r2
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	b118      	cbz	r0, 8006a66 <__swbuf_r+0x12>
 8006a5e:	6983      	ldr	r3, [r0, #24]
 8006a60:	b90b      	cbnz	r3, 8006a66 <__swbuf_r+0x12>
 8006a62:	f000 f9e7 	bl	8006e34 <__sinit>
 8006a66:	4b21      	ldr	r3, [pc, #132]	; (8006aec <__swbuf_r+0x98>)
 8006a68:	429c      	cmp	r4, r3
 8006a6a:	d12b      	bne.n	8006ac4 <__swbuf_r+0x70>
 8006a6c:	686c      	ldr	r4, [r5, #4]
 8006a6e:	69a3      	ldr	r3, [r4, #24]
 8006a70:	60a3      	str	r3, [r4, #8]
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	071a      	lsls	r2, r3, #28
 8006a76:	d52f      	bpl.n	8006ad8 <__swbuf_r+0x84>
 8006a78:	6923      	ldr	r3, [r4, #16]
 8006a7a:	b36b      	cbz	r3, 8006ad8 <__swbuf_r+0x84>
 8006a7c:	6923      	ldr	r3, [r4, #16]
 8006a7e:	6820      	ldr	r0, [r4, #0]
 8006a80:	b2f6      	uxtb	r6, r6
 8006a82:	1ac0      	subs	r0, r0, r3
 8006a84:	6963      	ldr	r3, [r4, #20]
 8006a86:	4637      	mov	r7, r6
 8006a88:	4283      	cmp	r3, r0
 8006a8a:	dc04      	bgt.n	8006a96 <__swbuf_r+0x42>
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 f93c 	bl	8006d0c <_fflush_r>
 8006a94:	bb30      	cbnz	r0, 8006ae4 <__swbuf_r+0x90>
 8006a96:	68a3      	ldr	r3, [r4, #8]
 8006a98:	3001      	adds	r0, #1
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	60a3      	str	r3, [r4, #8]
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	6022      	str	r2, [r4, #0]
 8006aa4:	701e      	strb	r6, [r3, #0]
 8006aa6:	6963      	ldr	r3, [r4, #20]
 8006aa8:	4283      	cmp	r3, r0
 8006aaa:	d004      	beq.n	8006ab6 <__swbuf_r+0x62>
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	07db      	lsls	r3, r3, #31
 8006ab0:	d506      	bpl.n	8006ac0 <__swbuf_r+0x6c>
 8006ab2:	2e0a      	cmp	r6, #10
 8006ab4:	d104      	bne.n	8006ac0 <__swbuf_r+0x6c>
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f000 f927 	bl	8006d0c <_fflush_r>
 8006abe:	b988      	cbnz	r0, 8006ae4 <__swbuf_r+0x90>
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ac4:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <__swbuf_r+0x9c>)
 8006ac6:	429c      	cmp	r4, r3
 8006ac8:	d101      	bne.n	8006ace <__swbuf_r+0x7a>
 8006aca:	68ac      	ldr	r4, [r5, #8]
 8006acc:	e7cf      	b.n	8006a6e <__swbuf_r+0x1a>
 8006ace:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <__swbuf_r+0xa0>)
 8006ad0:	429c      	cmp	r4, r3
 8006ad2:	bf08      	it	eq
 8006ad4:	68ec      	ldreq	r4, [r5, #12]
 8006ad6:	e7ca      	b.n	8006a6e <__swbuf_r+0x1a>
 8006ad8:	4621      	mov	r1, r4
 8006ada:	4628      	mov	r0, r5
 8006adc:	f000 f81a 	bl	8006b14 <__swsetup_r>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	d0cb      	beq.n	8006a7c <__swbuf_r+0x28>
 8006ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ae8:	e7ea      	b.n	8006ac0 <__swbuf_r+0x6c>
 8006aea:	bf00      	nop
 8006aec:	08007df4 	.word	0x08007df4
 8006af0:	08007e14 	.word	0x08007e14
 8006af4:	08007dd4 	.word	0x08007dd4

08006af8 <__ascii_wctomb>:
 8006af8:	4603      	mov	r3, r0
 8006afa:	4608      	mov	r0, r1
 8006afc:	b141      	cbz	r1, 8006b10 <__ascii_wctomb+0x18>
 8006afe:	2aff      	cmp	r2, #255	; 0xff
 8006b00:	d904      	bls.n	8006b0c <__ascii_wctomb+0x14>
 8006b02:	228a      	movs	r2, #138	; 0x8a
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	4770      	bx	lr
 8006b0c:	2001      	movs	r0, #1
 8006b0e:	700a      	strb	r2, [r1, #0]
 8006b10:	4770      	bx	lr
	...

08006b14 <__swsetup_r>:
 8006b14:	4b32      	ldr	r3, [pc, #200]	; (8006be0 <__swsetup_r+0xcc>)
 8006b16:	b570      	push	{r4, r5, r6, lr}
 8006b18:	681d      	ldr	r5, [r3, #0]
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	460c      	mov	r4, r1
 8006b1e:	b125      	cbz	r5, 8006b2a <__swsetup_r+0x16>
 8006b20:	69ab      	ldr	r3, [r5, #24]
 8006b22:	b913      	cbnz	r3, 8006b2a <__swsetup_r+0x16>
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 f985 	bl	8006e34 <__sinit>
 8006b2a:	4b2e      	ldr	r3, [pc, #184]	; (8006be4 <__swsetup_r+0xd0>)
 8006b2c:	429c      	cmp	r4, r3
 8006b2e:	d10f      	bne.n	8006b50 <__swsetup_r+0x3c>
 8006b30:	686c      	ldr	r4, [r5, #4]
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b38:	0719      	lsls	r1, r3, #28
 8006b3a:	d42c      	bmi.n	8006b96 <__swsetup_r+0x82>
 8006b3c:	06dd      	lsls	r5, r3, #27
 8006b3e:	d411      	bmi.n	8006b64 <__swsetup_r+0x50>
 8006b40:	2309      	movs	r3, #9
 8006b42:	6033      	str	r3, [r6, #0]
 8006b44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b48:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4c:	81a3      	strh	r3, [r4, #12]
 8006b4e:	e03e      	b.n	8006bce <__swsetup_r+0xba>
 8006b50:	4b25      	ldr	r3, [pc, #148]	; (8006be8 <__swsetup_r+0xd4>)
 8006b52:	429c      	cmp	r4, r3
 8006b54:	d101      	bne.n	8006b5a <__swsetup_r+0x46>
 8006b56:	68ac      	ldr	r4, [r5, #8]
 8006b58:	e7eb      	b.n	8006b32 <__swsetup_r+0x1e>
 8006b5a:	4b24      	ldr	r3, [pc, #144]	; (8006bec <__swsetup_r+0xd8>)
 8006b5c:	429c      	cmp	r4, r3
 8006b5e:	bf08      	it	eq
 8006b60:	68ec      	ldreq	r4, [r5, #12]
 8006b62:	e7e6      	b.n	8006b32 <__swsetup_r+0x1e>
 8006b64:	0758      	lsls	r0, r3, #29
 8006b66:	d512      	bpl.n	8006b8e <__swsetup_r+0x7a>
 8006b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b6a:	b141      	cbz	r1, 8006b7e <__swsetup_r+0x6a>
 8006b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b70:	4299      	cmp	r1, r3
 8006b72:	d002      	beq.n	8006b7a <__swsetup_r+0x66>
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7ff fb75 	bl	8006264 <_free_r>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	6363      	str	r3, [r4, #52]	; 0x34
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	2300      	movs	r3, #0
 8006b88:	6063      	str	r3, [r4, #4]
 8006b8a:	6923      	ldr	r3, [r4, #16]
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	f043 0308 	orr.w	r3, r3, #8
 8006b94:	81a3      	strh	r3, [r4, #12]
 8006b96:	6923      	ldr	r3, [r4, #16]
 8006b98:	b94b      	cbnz	r3, 8006bae <__swsetup_r+0x9a>
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba4:	d003      	beq.n	8006bae <__swsetup_r+0x9a>
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f000 fa07 	bl	8006fbc <__smakebuf_r>
 8006bae:	89a0      	ldrh	r0, [r4, #12]
 8006bb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bb4:	f010 0301 	ands.w	r3, r0, #1
 8006bb8:	d00a      	beq.n	8006bd0 <__swsetup_r+0xbc>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60a3      	str	r3, [r4, #8]
 8006bbe:	6963      	ldr	r3, [r4, #20]
 8006bc0:	425b      	negs	r3, r3
 8006bc2:	61a3      	str	r3, [r4, #24]
 8006bc4:	6923      	ldr	r3, [r4, #16]
 8006bc6:	b943      	cbnz	r3, 8006bda <__swsetup_r+0xc6>
 8006bc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006bcc:	d1ba      	bne.n	8006b44 <__swsetup_r+0x30>
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	0781      	lsls	r1, r0, #30
 8006bd2:	bf58      	it	pl
 8006bd4:	6963      	ldrpl	r3, [r4, #20]
 8006bd6:	60a3      	str	r3, [r4, #8]
 8006bd8:	e7f4      	b.n	8006bc4 <__swsetup_r+0xb0>
 8006bda:	2000      	movs	r0, #0
 8006bdc:	e7f7      	b.n	8006bce <__swsetup_r+0xba>
 8006bde:	bf00      	nop
 8006be0:	20000010 	.word	0x20000010
 8006be4:	08007df4 	.word	0x08007df4
 8006be8:	08007e14 	.word	0x08007e14
 8006bec:	08007dd4 	.word	0x08007dd4

08006bf0 <abort>:
 8006bf0:	2006      	movs	r0, #6
 8006bf2:	b508      	push	{r3, lr}
 8006bf4:	f000 fa52 	bl	800709c <raise>
 8006bf8:	2001      	movs	r0, #1
 8006bfa:	f7fb f939 	bl	8001e70 <_exit>
	...

08006c00 <__sflush_r>:
 8006c00:	898a      	ldrh	r2, [r1, #12]
 8006c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c06:	4605      	mov	r5, r0
 8006c08:	0710      	lsls	r0, r2, #28
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	d458      	bmi.n	8006cc0 <__sflush_r+0xc0>
 8006c0e:	684b      	ldr	r3, [r1, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	dc05      	bgt.n	8006c20 <__sflush_r+0x20>
 8006c14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	dc02      	bgt.n	8006c20 <__sflush_r+0x20>
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c22:	2e00      	cmp	r6, #0
 8006c24:	d0f9      	beq.n	8006c1a <__sflush_r+0x1a>
 8006c26:	2300      	movs	r3, #0
 8006c28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c2c:	682f      	ldr	r7, [r5, #0]
 8006c2e:	602b      	str	r3, [r5, #0]
 8006c30:	d032      	beq.n	8006c98 <__sflush_r+0x98>
 8006c32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	075a      	lsls	r2, r3, #29
 8006c38:	d505      	bpl.n	8006c46 <__sflush_r+0x46>
 8006c3a:	6863      	ldr	r3, [r4, #4]
 8006c3c:	1ac0      	subs	r0, r0, r3
 8006c3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c40:	b10b      	cbz	r3, 8006c46 <__sflush_r+0x46>
 8006c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c44:	1ac0      	subs	r0, r0, r3
 8006c46:	2300      	movs	r3, #0
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	6a21      	ldr	r1, [r4, #32]
 8006c50:	47b0      	blx	r6
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	d106      	bne.n	8006c66 <__sflush_r+0x66>
 8006c58:	6829      	ldr	r1, [r5, #0]
 8006c5a:	291d      	cmp	r1, #29
 8006c5c:	d82c      	bhi.n	8006cb8 <__sflush_r+0xb8>
 8006c5e:	4a2a      	ldr	r2, [pc, #168]	; (8006d08 <__sflush_r+0x108>)
 8006c60:	40ca      	lsrs	r2, r1
 8006c62:	07d6      	lsls	r6, r2, #31
 8006c64:	d528      	bpl.n	8006cb8 <__sflush_r+0xb8>
 8006c66:	2200      	movs	r2, #0
 8006c68:	6062      	str	r2, [r4, #4]
 8006c6a:	6922      	ldr	r2, [r4, #16]
 8006c6c:	04d9      	lsls	r1, r3, #19
 8006c6e:	6022      	str	r2, [r4, #0]
 8006c70:	d504      	bpl.n	8006c7c <__sflush_r+0x7c>
 8006c72:	1c42      	adds	r2, r0, #1
 8006c74:	d101      	bne.n	8006c7a <__sflush_r+0x7a>
 8006c76:	682b      	ldr	r3, [r5, #0]
 8006c78:	b903      	cbnz	r3, 8006c7c <__sflush_r+0x7c>
 8006c7a:	6560      	str	r0, [r4, #84]	; 0x54
 8006c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c7e:	602f      	str	r7, [r5, #0]
 8006c80:	2900      	cmp	r1, #0
 8006c82:	d0ca      	beq.n	8006c1a <__sflush_r+0x1a>
 8006c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c88:	4299      	cmp	r1, r3
 8006c8a:	d002      	beq.n	8006c92 <__sflush_r+0x92>
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f7ff fae9 	bl	8006264 <_free_r>
 8006c92:	2000      	movs	r0, #0
 8006c94:	6360      	str	r0, [r4, #52]	; 0x34
 8006c96:	e7c1      	b.n	8006c1c <__sflush_r+0x1c>
 8006c98:	6a21      	ldr	r1, [r4, #32]
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	47b0      	blx	r6
 8006ca0:	1c41      	adds	r1, r0, #1
 8006ca2:	d1c7      	bne.n	8006c34 <__sflush_r+0x34>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0c4      	beq.n	8006c34 <__sflush_r+0x34>
 8006caa:	2b1d      	cmp	r3, #29
 8006cac:	d001      	beq.n	8006cb2 <__sflush_r+0xb2>
 8006cae:	2b16      	cmp	r3, #22
 8006cb0:	d101      	bne.n	8006cb6 <__sflush_r+0xb6>
 8006cb2:	602f      	str	r7, [r5, #0]
 8006cb4:	e7b1      	b.n	8006c1a <__sflush_r+0x1a>
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cbc:	81a3      	strh	r3, [r4, #12]
 8006cbe:	e7ad      	b.n	8006c1c <__sflush_r+0x1c>
 8006cc0:	690f      	ldr	r7, [r1, #16]
 8006cc2:	2f00      	cmp	r7, #0
 8006cc4:	d0a9      	beq.n	8006c1a <__sflush_r+0x1a>
 8006cc6:	0793      	lsls	r3, r2, #30
 8006cc8:	bf18      	it	ne
 8006cca:	2300      	movne	r3, #0
 8006ccc:	680e      	ldr	r6, [r1, #0]
 8006cce:	bf08      	it	eq
 8006cd0:	694b      	ldreq	r3, [r1, #20]
 8006cd2:	eba6 0807 	sub.w	r8, r6, r7
 8006cd6:	600f      	str	r7, [r1, #0]
 8006cd8:	608b      	str	r3, [r1, #8]
 8006cda:	f1b8 0f00 	cmp.w	r8, #0
 8006cde:	dd9c      	ble.n	8006c1a <__sflush_r+0x1a>
 8006ce0:	4643      	mov	r3, r8
 8006ce2:	463a      	mov	r2, r7
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	6a21      	ldr	r1, [r4, #32]
 8006ce8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006cea:	47b0      	blx	r6
 8006cec:	2800      	cmp	r0, #0
 8006cee:	dc06      	bgt.n	8006cfe <__sflush_r+0xfe>
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	e78e      	b.n	8006c1c <__sflush_r+0x1c>
 8006cfe:	4407      	add	r7, r0
 8006d00:	eba8 0800 	sub.w	r8, r8, r0
 8006d04:	e7e9      	b.n	8006cda <__sflush_r+0xda>
 8006d06:	bf00      	nop
 8006d08:	20400001 	.word	0x20400001

08006d0c <_fflush_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	690b      	ldr	r3, [r1, #16]
 8006d10:	4605      	mov	r5, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	b913      	cbnz	r3, 8006d1c <_fflush_r+0x10>
 8006d16:	2500      	movs	r5, #0
 8006d18:	4628      	mov	r0, r5
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
 8006d1c:	b118      	cbz	r0, 8006d26 <_fflush_r+0x1a>
 8006d1e:	6983      	ldr	r3, [r0, #24]
 8006d20:	b90b      	cbnz	r3, 8006d26 <_fflush_r+0x1a>
 8006d22:	f000 f887 	bl	8006e34 <__sinit>
 8006d26:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <_fflush_r+0x6c>)
 8006d28:	429c      	cmp	r4, r3
 8006d2a:	d11b      	bne.n	8006d64 <_fflush_r+0x58>
 8006d2c:	686c      	ldr	r4, [r5, #4]
 8006d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0ef      	beq.n	8006d16 <_fflush_r+0xa>
 8006d36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d38:	07d0      	lsls	r0, r2, #31
 8006d3a:	d404      	bmi.n	8006d46 <_fflush_r+0x3a>
 8006d3c:	0599      	lsls	r1, r3, #22
 8006d3e:	d402      	bmi.n	8006d46 <_fflush_r+0x3a>
 8006d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d42:	f000 f915 	bl	8006f70 <__retarget_lock_acquire_recursive>
 8006d46:	4628      	mov	r0, r5
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f7ff ff59 	bl	8006c00 <__sflush_r>
 8006d4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d50:	4605      	mov	r5, r0
 8006d52:	07da      	lsls	r2, r3, #31
 8006d54:	d4e0      	bmi.n	8006d18 <_fflush_r+0xc>
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	059b      	lsls	r3, r3, #22
 8006d5a:	d4dd      	bmi.n	8006d18 <_fflush_r+0xc>
 8006d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d5e:	f000 f908 	bl	8006f72 <__retarget_lock_release_recursive>
 8006d62:	e7d9      	b.n	8006d18 <_fflush_r+0xc>
 8006d64:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <_fflush_r+0x70>)
 8006d66:	429c      	cmp	r4, r3
 8006d68:	d101      	bne.n	8006d6e <_fflush_r+0x62>
 8006d6a:	68ac      	ldr	r4, [r5, #8]
 8006d6c:	e7df      	b.n	8006d2e <_fflush_r+0x22>
 8006d6e:	4b04      	ldr	r3, [pc, #16]	; (8006d80 <_fflush_r+0x74>)
 8006d70:	429c      	cmp	r4, r3
 8006d72:	bf08      	it	eq
 8006d74:	68ec      	ldreq	r4, [r5, #12]
 8006d76:	e7da      	b.n	8006d2e <_fflush_r+0x22>
 8006d78:	08007df4 	.word	0x08007df4
 8006d7c:	08007e14 	.word	0x08007e14
 8006d80:	08007dd4 	.word	0x08007dd4

08006d84 <std>:
 8006d84:	2300      	movs	r3, #0
 8006d86:	b510      	push	{r4, lr}
 8006d88:	4604      	mov	r4, r0
 8006d8a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d92:	6083      	str	r3, [r0, #8]
 8006d94:	8181      	strh	r1, [r0, #12]
 8006d96:	6643      	str	r3, [r0, #100]	; 0x64
 8006d98:	81c2      	strh	r2, [r0, #14]
 8006d9a:	6183      	str	r3, [r0, #24]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	2208      	movs	r2, #8
 8006da0:	305c      	adds	r0, #92	; 0x5c
 8006da2:	f7fd fb8f 	bl	80044c4 <memset>
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <std+0x38>)
 8006da8:	6224      	str	r4, [r4, #32]
 8006daa:	6263      	str	r3, [r4, #36]	; 0x24
 8006dac:	4b04      	ldr	r3, [pc, #16]	; (8006dc0 <std+0x3c>)
 8006dae:	62a3      	str	r3, [r4, #40]	; 0x28
 8006db0:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <std+0x40>)
 8006db2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006db4:	4b04      	ldr	r3, [pc, #16]	; (8006dc8 <std+0x44>)
 8006db6:	6323      	str	r3, [r4, #48]	; 0x30
 8006db8:	bd10      	pop	{r4, pc}
 8006dba:	bf00      	nop
 8006dbc:	080070d5 	.word	0x080070d5
 8006dc0:	080070f7 	.word	0x080070f7
 8006dc4:	0800712f 	.word	0x0800712f
 8006dc8:	08007153 	.word	0x08007153

08006dcc <_cleanup_r>:
 8006dcc:	4901      	ldr	r1, [pc, #4]	; (8006dd4 <_cleanup_r+0x8>)
 8006dce:	f000 b8af 	b.w	8006f30 <_fwalk_reent>
 8006dd2:	bf00      	nop
 8006dd4:	08006d0d 	.word	0x08006d0d

08006dd8 <__sfmoreglue>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	2568      	movs	r5, #104	; 0x68
 8006ddc:	1e4a      	subs	r2, r1, #1
 8006dde:	4355      	muls	r5, r2
 8006de0:	460e      	mov	r6, r1
 8006de2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006de6:	f7ff fa89 	bl	80062fc <_malloc_r>
 8006dea:	4604      	mov	r4, r0
 8006dec:	b140      	cbz	r0, 8006e00 <__sfmoreglue+0x28>
 8006dee:	2100      	movs	r1, #0
 8006df0:	e9c0 1600 	strd	r1, r6, [r0]
 8006df4:	300c      	adds	r0, #12
 8006df6:	60a0      	str	r0, [r4, #8]
 8006df8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006dfc:	f7fd fb62 	bl	80044c4 <memset>
 8006e00:	4620      	mov	r0, r4
 8006e02:	bd70      	pop	{r4, r5, r6, pc}

08006e04 <__sfp_lock_acquire>:
 8006e04:	4801      	ldr	r0, [pc, #4]	; (8006e0c <__sfp_lock_acquire+0x8>)
 8006e06:	f000 b8b3 	b.w	8006f70 <__retarget_lock_acquire_recursive>
 8006e0a:	bf00      	nop
 8006e0c:	20000708 	.word	0x20000708

08006e10 <__sfp_lock_release>:
 8006e10:	4801      	ldr	r0, [pc, #4]	; (8006e18 <__sfp_lock_release+0x8>)
 8006e12:	f000 b8ae 	b.w	8006f72 <__retarget_lock_release_recursive>
 8006e16:	bf00      	nop
 8006e18:	20000708 	.word	0x20000708

08006e1c <__sinit_lock_acquire>:
 8006e1c:	4801      	ldr	r0, [pc, #4]	; (8006e24 <__sinit_lock_acquire+0x8>)
 8006e1e:	f000 b8a7 	b.w	8006f70 <__retarget_lock_acquire_recursive>
 8006e22:	bf00      	nop
 8006e24:	20000703 	.word	0x20000703

08006e28 <__sinit_lock_release>:
 8006e28:	4801      	ldr	r0, [pc, #4]	; (8006e30 <__sinit_lock_release+0x8>)
 8006e2a:	f000 b8a2 	b.w	8006f72 <__retarget_lock_release_recursive>
 8006e2e:	bf00      	nop
 8006e30:	20000703 	.word	0x20000703

08006e34 <__sinit>:
 8006e34:	b510      	push	{r4, lr}
 8006e36:	4604      	mov	r4, r0
 8006e38:	f7ff fff0 	bl	8006e1c <__sinit_lock_acquire>
 8006e3c:	69a3      	ldr	r3, [r4, #24]
 8006e3e:	b11b      	cbz	r3, 8006e48 <__sinit+0x14>
 8006e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e44:	f7ff bff0 	b.w	8006e28 <__sinit_lock_release>
 8006e48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e4c:	6523      	str	r3, [r4, #80]	; 0x50
 8006e4e:	4b13      	ldr	r3, [pc, #76]	; (8006e9c <__sinit+0x68>)
 8006e50:	4a13      	ldr	r2, [pc, #76]	; (8006ea0 <__sinit+0x6c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e56:	42a3      	cmp	r3, r4
 8006e58:	bf08      	it	eq
 8006e5a:	2301      	moveq	r3, #1
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	bf08      	it	eq
 8006e60:	61a3      	streq	r3, [r4, #24]
 8006e62:	f000 f81f 	bl	8006ea4 <__sfp>
 8006e66:	6060      	str	r0, [r4, #4]
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f000 f81b 	bl	8006ea4 <__sfp>
 8006e6e:	60a0      	str	r0, [r4, #8]
 8006e70:	4620      	mov	r0, r4
 8006e72:	f000 f817 	bl	8006ea4 <__sfp>
 8006e76:	2200      	movs	r2, #0
 8006e78:	2104      	movs	r1, #4
 8006e7a:	60e0      	str	r0, [r4, #12]
 8006e7c:	6860      	ldr	r0, [r4, #4]
 8006e7e:	f7ff ff81 	bl	8006d84 <std>
 8006e82:	2201      	movs	r2, #1
 8006e84:	2109      	movs	r1, #9
 8006e86:	68a0      	ldr	r0, [r4, #8]
 8006e88:	f7ff ff7c 	bl	8006d84 <std>
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	2112      	movs	r1, #18
 8006e90:	68e0      	ldr	r0, [r4, #12]
 8006e92:	f7ff ff77 	bl	8006d84 <std>
 8006e96:	2301      	movs	r3, #1
 8006e98:	61a3      	str	r3, [r4, #24]
 8006e9a:	e7d1      	b.n	8006e40 <__sinit+0xc>
 8006e9c:	08007a54 	.word	0x08007a54
 8006ea0:	08006dcd 	.word	0x08006dcd

08006ea4 <__sfp>:
 8006ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	f7ff ffac 	bl	8006e04 <__sfp_lock_acquire>
 8006eac:	4b1e      	ldr	r3, [pc, #120]	; (8006f28 <__sfp+0x84>)
 8006eae:	681e      	ldr	r6, [r3, #0]
 8006eb0:	69b3      	ldr	r3, [r6, #24]
 8006eb2:	b913      	cbnz	r3, 8006eba <__sfp+0x16>
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	f7ff ffbd 	bl	8006e34 <__sinit>
 8006eba:	3648      	adds	r6, #72	; 0x48
 8006ebc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	d503      	bpl.n	8006ecc <__sfp+0x28>
 8006ec4:	6833      	ldr	r3, [r6, #0]
 8006ec6:	b30b      	cbz	r3, 8006f0c <__sfp+0x68>
 8006ec8:	6836      	ldr	r6, [r6, #0]
 8006eca:	e7f7      	b.n	8006ebc <__sfp+0x18>
 8006ecc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ed0:	b9d5      	cbnz	r5, 8006f08 <__sfp+0x64>
 8006ed2:	4b16      	ldr	r3, [pc, #88]	; (8006f2c <__sfp+0x88>)
 8006ed4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ed8:	60e3      	str	r3, [r4, #12]
 8006eda:	6665      	str	r5, [r4, #100]	; 0x64
 8006edc:	f000 f847 	bl	8006f6e <__retarget_lock_init_recursive>
 8006ee0:	f7ff ff96 	bl	8006e10 <__sfp_lock_release>
 8006ee4:	2208      	movs	r2, #8
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006eec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ef0:	6025      	str	r5, [r4, #0]
 8006ef2:	61a5      	str	r5, [r4, #24]
 8006ef4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ef8:	f7fd fae4 	bl	80044c4 <memset>
 8006efc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f04:	4620      	mov	r0, r4
 8006f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f08:	3468      	adds	r4, #104	; 0x68
 8006f0a:	e7d9      	b.n	8006ec0 <__sfp+0x1c>
 8006f0c:	2104      	movs	r1, #4
 8006f0e:	4638      	mov	r0, r7
 8006f10:	f7ff ff62 	bl	8006dd8 <__sfmoreglue>
 8006f14:	4604      	mov	r4, r0
 8006f16:	6030      	str	r0, [r6, #0]
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d1d5      	bne.n	8006ec8 <__sfp+0x24>
 8006f1c:	f7ff ff78 	bl	8006e10 <__sfp_lock_release>
 8006f20:	230c      	movs	r3, #12
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	e7ee      	b.n	8006f04 <__sfp+0x60>
 8006f26:	bf00      	nop
 8006f28:	08007a54 	.word	0x08007a54
 8006f2c:	ffff0001 	.word	0xffff0001

08006f30 <_fwalk_reent>:
 8006f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f34:	4606      	mov	r6, r0
 8006f36:	4688      	mov	r8, r1
 8006f38:	2700      	movs	r7, #0
 8006f3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f42:	f1b9 0901 	subs.w	r9, r9, #1
 8006f46:	d505      	bpl.n	8006f54 <_fwalk_reent+0x24>
 8006f48:	6824      	ldr	r4, [r4, #0]
 8006f4a:	2c00      	cmp	r4, #0
 8006f4c:	d1f7      	bne.n	8006f3e <_fwalk_reent+0xe>
 8006f4e:	4638      	mov	r0, r7
 8006f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f54:	89ab      	ldrh	r3, [r5, #12]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d907      	bls.n	8006f6a <_fwalk_reent+0x3a>
 8006f5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	d003      	beq.n	8006f6a <_fwalk_reent+0x3a>
 8006f62:	4629      	mov	r1, r5
 8006f64:	4630      	mov	r0, r6
 8006f66:	47c0      	blx	r8
 8006f68:	4307      	orrs	r7, r0
 8006f6a:	3568      	adds	r5, #104	; 0x68
 8006f6c:	e7e9      	b.n	8006f42 <_fwalk_reent+0x12>

08006f6e <__retarget_lock_init_recursive>:
 8006f6e:	4770      	bx	lr

08006f70 <__retarget_lock_acquire_recursive>:
 8006f70:	4770      	bx	lr

08006f72 <__retarget_lock_release_recursive>:
 8006f72:	4770      	bx	lr

08006f74 <__swhatbuf_r>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	460e      	mov	r6, r1
 8006f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	2900      	cmp	r1, #0
 8006f80:	461d      	mov	r5, r3
 8006f82:	b096      	sub	sp, #88	; 0x58
 8006f84:	da07      	bge.n	8006f96 <__swhatbuf_r+0x22>
 8006f86:	2300      	movs	r3, #0
 8006f88:	602b      	str	r3, [r5, #0]
 8006f8a:	89b3      	ldrh	r3, [r6, #12]
 8006f8c:	061a      	lsls	r2, r3, #24
 8006f8e:	d410      	bmi.n	8006fb2 <__swhatbuf_r+0x3e>
 8006f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f94:	e00e      	b.n	8006fb4 <__swhatbuf_r+0x40>
 8006f96:	466a      	mov	r2, sp
 8006f98:	f000 f902 	bl	80071a0 <_fstat_r>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	dbf2      	blt.n	8006f86 <__swhatbuf_r+0x12>
 8006fa0:	9a01      	ldr	r2, [sp, #4]
 8006fa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006faa:	425a      	negs	r2, r3
 8006fac:	415a      	adcs	r2, r3
 8006fae:	602a      	str	r2, [r5, #0]
 8006fb0:	e7ee      	b.n	8006f90 <__swhatbuf_r+0x1c>
 8006fb2:	2340      	movs	r3, #64	; 0x40
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	6023      	str	r3, [r4, #0]
 8006fb8:	b016      	add	sp, #88	; 0x58
 8006fba:	bd70      	pop	{r4, r5, r6, pc}

08006fbc <__smakebuf_r>:
 8006fbc:	898b      	ldrh	r3, [r1, #12]
 8006fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fc0:	079d      	lsls	r5, r3, #30
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	d507      	bpl.n	8006fd8 <__smakebuf_r+0x1c>
 8006fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	6123      	str	r3, [r4, #16]
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	6163      	str	r3, [r4, #20]
 8006fd4:	b002      	add	sp, #8
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	466a      	mov	r2, sp
 8006fda:	ab01      	add	r3, sp, #4
 8006fdc:	f7ff ffca 	bl	8006f74 <__swhatbuf_r>
 8006fe0:	9900      	ldr	r1, [sp, #0]
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f7ff f989 	bl	80062fc <_malloc_r>
 8006fea:	b948      	cbnz	r0, 8007000 <__smakebuf_r+0x44>
 8006fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff0:	059a      	lsls	r2, r3, #22
 8006ff2:	d4ef      	bmi.n	8006fd4 <__smakebuf_r+0x18>
 8006ff4:	f023 0303 	bic.w	r3, r3, #3
 8006ff8:	f043 0302 	orr.w	r3, r3, #2
 8006ffc:	81a3      	strh	r3, [r4, #12]
 8006ffe:	e7e3      	b.n	8006fc8 <__smakebuf_r+0xc>
 8007000:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <__smakebuf_r+0x7c>)
 8007002:	62b3      	str	r3, [r6, #40]	; 0x28
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	6020      	str	r0, [r4, #0]
 8007008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	9b00      	ldr	r3, [sp, #0]
 8007010:	6120      	str	r0, [r4, #16]
 8007012:	6163      	str	r3, [r4, #20]
 8007014:	9b01      	ldr	r3, [sp, #4]
 8007016:	b15b      	cbz	r3, 8007030 <__smakebuf_r+0x74>
 8007018:	4630      	mov	r0, r6
 800701a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800701e:	f000 f8d1 	bl	80071c4 <_isatty_r>
 8007022:	b128      	cbz	r0, 8007030 <__smakebuf_r+0x74>
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	f023 0303 	bic.w	r3, r3, #3
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	81a3      	strh	r3, [r4, #12]
 8007030:	89a0      	ldrh	r0, [r4, #12]
 8007032:	4305      	orrs	r5, r0
 8007034:	81a5      	strh	r5, [r4, #12]
 8007036:	e7cd      	b.n	8006fd4 <__smakebuf_r+0x18>
 8007038:	08006dcd 	.word	0x08006dcd

0800703c <_malloc_usable_size_r>:
 800703c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007040:	1f18      	subs	r0, r3, #4
 8007042:	2b00      	cmp	r3, #0
 8007044:	bfbc      	itt	lt
 8007046:	580b      	ldrlt	r3, [r1, r0]
 8007048:	18c0      	addlt	r0, r0, r3
 800704a:	4770      	bx	lr

0800704c <_raise_r>:
 800704c:	291f      	cmp	r1, #31
 800704e:	b538      	push	{r3, r4, r5, lr}
 8007050:	4604      	mov	r4, r0
 8007052:	460d      	mov	r5, r1
 8007054:	d904      	bls.n	8007060 <_raise_r+0x14>
 8007056:	2316      	movs	r3, #22
 8007058:	6003      	str	r3, [r0, #0]
 800705a:	f04f 30ff 	mov.w	r0, #4294967295
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007062:	b112      	cbz	r2, 800706a <_raise_r+0x1e>
 8007064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007068:	b94b      	cbnz	r3, 800707e <_raise_r+0x32>
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f830 	bl	80070d0 <_getpid_r>
 8007070:	462a      	mov	r2, r5
 8007072:	4601      	mov	r1, r0
 8007074:	4620      	mov	r0, r4
 8007076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800707a:	f000 b817 	b.w	80070ac <_kill_r>
 800707e:	2b01      	cmp	r3, #1
 8007080:	d00a      	beq.n	8007098 <_raise_r+0x4c>
 8007082:	1c59      	adds	r1, r3, #1
 8007084:	d103      	bne.n	800708e <_raise_r+0x42>
 8007086:	2316      	movs	r3, #22
 8007088:	6003      	str	r3, [r0, #0]
 800708a:	2001      	movs	r0, #1
 800708c:	e7e7      	b.n	800705e <_raise_r+0x12>
 800708e:	2400      	movs	r4, #0
 8007090:	4628      	mov	r0, r5
 8007092:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007096:	4798      	blx	r3
 8007098:	2000      	movs	r0, #0
 800709a:	e7e0      	b.n	800705e <_raise_r+0x12>

0800709c <raise>:
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <raise+0xc>)
 800709e:	4601      	mov	r1, r0
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	f7ff bfd3 	b.w	800704c <_raise_r>
 80070a6:	bf00      	nop
 80070a8:	20000010 	.word	0x20000010

080070ac <_kill_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	2300      	movs	r3, #0
 80070b0:	4d06      	ldr	r5, [pc, #24]	; (80070cc <_kill_r+0x20>)
 80070b2:	4604      	mov	r4, r0
 80070b4:	4608      	mov	r0, r1
 80070b6:	4611      	mov	r1, r2
 80070b8:	602b      	str	r3, [r5, #0]
 80070ba:	f7fa fec9 	bl	8001e50 <_kill>
 80070be:	1c43      	adds	r3, r0, #1
 80070c0:	d102      	bne.n	80070c8 <_kill_r+0x1c>
 80070c2:	682b      	ldr	r3, [r5, #0]
 80070c4:	b103      	cbz	r3, 80070c8 <_kill_r+0x1c>
 80070c6:	6023      	str	r3, [r4, #0]
 80070c8:	bd38      	pop	{r3, r4, r5, pc}
 80070ca:	bf00      	nop
 80070cc:	200006fc 	.word	0x200006fc

080070d0 <_getpid_r>:
 80070d0:	f7fa beb7 	b.w	8001e42 <_getpid>

080070d4 <__sread>:
 80070d4:	b510      	push	{r4, lr}
 80070d6:	460c      	mov	r4, r1
 80070d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070dc:	f000 f894 	bl	8007208 <_read_r>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	bfab      	itete	ge
 80070e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070e6:	89a3      	ldrhlt	r3, [r4, #12]
 80070e8:	181b      	addge	r3, r3, r0
 80070ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070ee:	bfac      	ite	ge
 80070f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80070f2:	81a3      	strhlt	r3, [r4, #12]
 80070f4:	bd10      	pop	{r4, pc}

080070f6 <__swrite>:
 80070f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070fa:	461f      	mov	r7, r3
 80070fc:	898b      	ldrh	r3, [r1, #12]
 80070fe:	4605      	mov	r5, r0
 8007100:	05db      	lsls	r3, r3, #23
 8007102:	460c      	mov	r4, r1
 8007104:	4616      	mov	r6, r2
 8007106:	d505      	bpl.n	8007114 <__swrite+0x1e>
 8007108:	2302      	movs	r3, #2
 800710a:	2200      	movs	r2, #0
 800710c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007110:	f000 f868 	bl	80071e4 <_lseek_r>
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	4632      	mov	r2, r6
 8007118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800711c:	81a3      	strh	r3, [r4, #12]
 800711e:	4628      	mov	r0, r5
 8007120:	463b      	mov	r3, r7
 8007122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800712a:	f000 b817 	b.w	800715c <_write_r>

0800712e <__sseek>:
 800712e:	b510      	push	{r4, lr}
 8007130:	460c      	mov	r4, r1
 8007132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007136:	f000 f855 	bl	80071e4 <_lseek_r>
 800713a:	1c43      	adds	r3, r0, #1
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	bf15      	itete	ne
 8007140:	6560      	strne	r0, [r4, #84]	; 0x54
 8007142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800714a:	81a3      	strheq	r3, [r4, #12]
 800714c:	bf18      	it	ne
 800714e:	81a3      	strhne	r3, [r4, #12]
 8007150:	bd10      	pop	{r4, pc}

08007152 <__sclose>:
 8007152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007156:	f000 b813 	b.w	8007180 <_close_r>
	...

0800715c <_write_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	4611      	mov	r1, r2
 8007164:	2200      	movs	r2, #0
 8007166:	4d05      	ldr	r5, [pc, #20]	; (800717c <_write_r+0x20>)
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f7fa fea7 	bl	8001ebe <_write>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_write_r+0x1e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_write_r+0x1e>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	200006fc 	.word	0x200006fc

08007180 <_close_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	2300      	movs	r3, #0
 8007184:	4d05      	ldr	r5, [pc, #20]	; (800719c <_close_r+0x1c>)
 8007186:	4604      	mov	r4, r0
 8007188:	4608      	mov	r0, r1
 800718a:	602b      	str	r3, [r5, #0]
 800718c:	f7fa feb3 	bl	8001ef6 <_close>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_close_r+0x1a>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_close_r+0x1a>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	200006fc 	.word	0x200006fc

080071a0 <_fstat_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	2300      	movs	r3, #0
 80071a4:	4d06      	ldr	r5, [pc, #24]	; (80071c0 <_fstat_r+0x20>)
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	4611      	mov	r1, r2
 80071ac:	602b      	str	r3, [r5, #0]
 80071ae:	f7fa fead 	bl	8001f0c <_fstat>
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	d102      	bne.n	80071bc <_fstat_r+0x1c>
 80071b6:	682b      	ldr	r3, [r5, #0]
 80071b8:	b103      	cbz	r3, 80071bc <_fstat_r+0x1c>
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	bf00      	nop
 80071c0:	200006fc 	.word	0x200006fc

080071c4 <_isatty_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	2300      	movs	r3, #0
 80071c8:	4d05      	ldr	r5, [pc, #20]	; (80071e0 <_isatty_r+0x1c>)
 80071ca:	4604      	mov	r4, r0
 80071cc:	4608      	mov	r0, r1
 80071ce:	602b      	str	r3, [r5, #0]
 80071d0:	f7fa feab 	bl	8001f2a <_isatty>
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d102      	bne.n	80071de <_isatty_r+0x1a>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b103      	cbz	r3, 80071de <_isatty_r+0x1a>
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	200006fc 	.word	0x200006fc

080071e4 <_lseek_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4604      	mov	r4, r0
 80071e8:	4608      	mov	r0, r1
 80071ea:	4611      	mov	r1, r2
 80071ec:	2200      	movs	r2, #0
 80071ee:	4d05      	ldr	r5, [pc, #20]	; (8007204 <_lseek_r+0x20>)
 80071f0:	602a      	str	r2, [r5, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	f7fa fea3 	bl	8001f3e <_lseek>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_lseek_r+0x1e>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_lseek_r+0x1e>
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	200006fc 	.word	0x200006fc

08007208 <_read_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4604      	mov	r4, r0
 800720c:	4608      	mov	r0, r1
 800720e:	4611      	mov	r1, r2
 8007210:	2200      	movs	r2, #0
 8007212:	4d05      	ldr	r5, [pc, #20]	; (8007228 <_read_r+0x20>)
 8007214:	602a      	str	r2, [r5, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f7fa fe34 	bl	8001e84 <_read>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_read_r+0x1e>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_read_r+0x1e>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	200006fc 	.word	0x200006fc

0800722c <_init>:
 800722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722e:	bf00      	nop
 8007230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007232:	bc08      	pop	{r3}
 8007234:	469e      	mov	lr, r3
 8007236:	4770      	bx	lr

08007238 <_fini>:
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	bf00      	nop
 800723c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723e:	bc08      	pop	{r3}
 8007240:	469e      	mov	lr, r3
 8007242:	4770      	bx	lr
